var BinaryParser = require('./binary/parser'),
hash = require('./hash'),
Structr = require('structr');


var MACHINE_ID = parseInt(Math.random() * 0xFFFFFF, 10),
PID = typeof process != 'undefined' ? process.pid : parseInt(Math.random() * 0xFFFFFF, 8);

var numIDsGenerated = 0;

var Generator = Structr({

	/**
	 */

	'__construct': function(key)
	{

		//the key for the generator
		this.key = key;


		//the hash value of the KEY to prepend to the ID / generated hash
		this.keyHash = hash.crc32(key);

	},

	/**
	 */

	'inc': function()
	{
		return numIDsGenerated++;
	},


	/**
	 * a unique identifier, taken from mongodb's spec
	 */

	'uid': function()
	{
		var unixTime  = parseInt(Date.now()/1000, 10),
		time4Bytes    = BinaryParser.encodeInt(unixTime, 32, true, true),
		machine3Bytes = BinaryParser.encodeInt(MACHINE_ID, 24, false),
		pid2Bytes     = BinaryParser.fromShort(PID),
		index3Bytes   = BinaryParser.encodeInt(this.inc(), 24, false, true);

		return this.keyHash + this._toHexString(time4Bytes + machine3Bytes + pid2Bytes + index3Bytes);	
	},

	/**
	 * hashed 
	 */

	'hash': function(value, algorithm)
	{
		//crc32 or md5 for now...
		return this.keyHash + hash[algorithm || 'md5'](value);
	},


	/**
	 */

	'random': function()
	{
		var buffer = '', n = 32; //size of md5 hash
		for(var i = n; i--;) buffer += this._rc();

		return this.hash(buffer);
	},

	/**
	 */

	'_rc': function(id)
	{
		return (((1+Math.random())*0x10000)|0).toString(16).substring(1);
	},

	/**
	 */
	 
	'_toHexString': function(id)
	{
		var hexString = '', number, value;

		for (var index = 0, len = id.length; index < len; index++) 
		{
			value = BinaryParser.toByte(id.substr(index, 1));

			number = value <= 15 ? '0' + value.toString(16) : value.toString(16);

		    hexString = hexString + number;
		}

		return hexString;
	}
});

var Manager = Structr({
    
    /**
     */
     
    '__construct': function()
    {
    	this._generatorsByKey = {};

    	//crc32 hash for the key
    	this._generatorsByHash = {};

    	//the number of IDS generated
    	this.idsGenerated = 0;
    },
    
    /**
     */
     
    'register': function(key, clazz)
    {
    	if(this._generatorsByKey[key]) return this._generatorsByKey[key];

    	if(!clazz) clazz = Generator;

    	var gen = new clazz(key);

    	return this._generatorsByHash[gen.keyHash] = this._generatorsByKey[key] = gen;
    },

    /**
     */

    'generator': function(keyOrId, create)
    {
    	return this._generatorsByKey[keyOrId] || this._generatorsByHash[keyOrId.substr(0, 8)] || (create ? new Generator(keyOrId) : null);
    },

    /**
     */

    'key': function(keyOrId)
    {
    	var gen = this.generator(keyOrId);

    	return gen ? gen.key : null; 
    }
     
});

var glob = typeof window != 'undefined' ? window : global;


//forces NPM to return the global verson
var man = glob.cashew ? glob.cashew : new Manager();
man.Generator = Generator;

module.exports = glob.cashew = man;



