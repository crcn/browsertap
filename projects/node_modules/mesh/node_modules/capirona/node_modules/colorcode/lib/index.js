function colorCode() {


	var self   = {},
	codes      = [],
	logLevels  = ['log','info','warn','error'],
	levelCodes = {};


	/**
	 */

	self.code = function(match, replace) {


		if(typeof match == 'object' && !replace) {
			for(var m in match) {
				self.code(m, match[m]);
			}
			return self;
		}

		codes.push(colorSetter(replace, match));

		return self;
	}


	logLevels.forEach(function(level) {
		self[level] = function(value) {
			levelCodes[level] = valueReplacer(value);
			return self;
		}
	})

	/**
	 */

	self.export = function(logger) {

		for(var fName in logger) {
			_wrapFn(logger, fName);
		}

		return self;
	}


	function _wrapFn(logger, fName) {
		if(!(logger[fName] instanceof Function)) return;

		var fn    = logger[fName],
		levelCode = levelCodes[fName];

		logger[fName] = function() {

			var args = Array.apply([], arguments),
			msg = args.shift();


			for(var i = codes.length; i--;) {
				var code = codes[i],
				repl = code(msg);

				if(repl != undefined) {
					msg = repl;
				}
			}

			if(levelCode) {
				msg = levelCode(msg)
			}



			fn.apply(this, [msg].concat(args));

		}
	}

	return self;

}

var cc = colorCode();

Object.keys(cc).forEach(function(fn) {
	exports[fn] = function() {
		return colorCode()[fn].apply(this, arguments);
	}
});


/**
 */


function colorSetter(replace, match) {

	var replacer = valueReplacer(replace, match);

	if(match) {
		//CLI reps
		var tester     = colorTester(match);

		return function(value) {

			if(!tester.test(value)) return;

			return replacer(value);
		}
	} else {
		return replacer;
	}
}


/**
 */

function valueReplacer(replace, match) {

	if(replace instanceof Function) {
		return replace;
	} else 
	if(typeof replace == 'string') {

		if(match) {
			return function(value) {

				return value.replace(match, replace);
			}
		} else {
			return function(value) {
				return replace;
			}
		}
	}
}

/**
 */

function colorTester(match) {

	if(match instanceof RegExp) {
		return match;
	} else 
	if(typeof match == 'string') {
		return {
			test: function(value) {
				return String(value).indexOf(match) > -1;
			}
		}
	} else {
		return match;
	}
}


/**
 */