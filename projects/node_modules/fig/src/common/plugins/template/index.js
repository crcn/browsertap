var loaderPlugin = require('./loader'),
hogan            = require('hogan');

exports.plugin = function(router, params) {

	params = this.params();

	var loader = loaderPlugin.plugin(router),
	cache      = {};


	router.on({

		'pull template': function(req, res) {

			var ops = req.query;

			checkCached();


			/**
			 * check if the template is rendered
			 */

			function checkCached() {

				if(cache[ops.path]) {
					onTemplate(cache[ops.path]);
				} else {
					loadTpl(ops, res.success(onContent));
				}

			}


			/**
			 * step two compile the content
			 */

			function onContent(content) {


				var scriptsRegexp = /<script.*?>[\w\W]*?<\/script>/g;

				var scripts = (content.match(scriptsRegexp) || []).join('\n');
				content     = content.replace(scriptsRegexp, '');
				content     = "{{{scripts}}}\n" + content;

				var tpl = hogan.compile(content),
				wrapped = {
					render: function(data) {
						if(!data) data = {};
						data.scripts = scripts;


						var ret = tpl.render(data);

						return ret;
					}
				}
				

				onTemplate(wrapped);
			}


			/**
			 * step three, return the template
			 */

			function onTemplate(tpl) {

				cache[ops.path] = tpl;

				res.end(tpl);

			}

		}
	});

	
	function loadTpl(ops, next){

		if(ops.path.substr(0, 1) == '#') {
			loadFromDoc(ops, next);
		} else {
			loader.load(ops.path, next);
		}
	}

	function loadFromDoc(ops, next) {

		var el = ops.document.getElementById(ops.path.substr(1));

		//text/x-tmpl-
		if(el) {

			//query.type    = el.getAttribute('type').substr(12);

			next(null, el.innerText || el.text || el.textContent)

		} else {

			next(new Error('Template '+ops.path+' does not exist'))
		}
	}

}

