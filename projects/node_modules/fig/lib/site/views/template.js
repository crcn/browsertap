var model = require('./model'),
View = require('./concrete'),
logger = require('mesh-winston').loggers.get('fig'),
sprintf = require('sprintf').sprintf;

var TemplateViewPartial = {
	
	/**
	 */

	'override setup': function(ops) {

		this._super(ops);

		this.tpl = this.ops.tpl || this.tpl;

		return this;

	},


	/**
	 * the data to use to fill in the template
	 */

	'templateData': function() {

		return { };

	},

	/**
	 * render the template
	 */


	'override render': function() {

		var self = this, _super = this._super;

		if(!this.__template) return;
			
		var rendered = this.__template.render(this.templateData());

		if(typeof window == 'undefined') {
			self.el.innerHTML = rendered;
		} else {
			self.$$(self.el).html(rendered)
		}


		_super.call(this);
	},

	/**
	 */

	'override instructions': function() {
		return ['_loadTemplate'].concat(this._super());
	},

	/**
	 * loads in a template, this should happen *once*
	 */

	'_loadTemplate': function(next) {

		logger.verbose(sprintf('loading template %s', this.tpl));

		if(this.el == this.document && typeof window != 'undefined') {
			logger.warn('Unable to load template because element is document');
			return next();
		}

		if(!this.tpl || this.loadedTemplate) {

			console.warn('Cannot load template');

			return next();

		}

		this.loadedTemplate = true;

		var self = this;

		function onTemplate(template, type) {

			logger.verbose('loaded template');

			self.__template = template;
			next();
			
		}

		var query = { path: this.tpl, document: this.document };


		this.router.request('template').query(query).headers({ cache: true }).success(onTemplate).pull();
	}
}


var ModelTemplatePartial = {
	

	/**
	 */

	'templateData': function() {

		return this.data ? this.data().doc : {};

	}
};

exports.Template           = View.extend(TemplateViewPartial);
exports.ItemTemplate       = model.Item.extend(TemplateViewPartial, ModelTemplatePartial);
exports.CollectionTemplate = model.Collection.extend(TemplateViewPartial, ModelTemplatePartial);