var View = require('./concrete');


var ItemView = exports.Item = View.extend({
	

	/**
	 */

	'merge _binders': {

		'value': function(action, target, properties)
		{
			var self = this;


			if(!self._data) return;

			function bind(elementProp, dataProp)
			{
				target[elementProp](self._data.get(dataProp));

				// target.attr(elementProp, self._data.get(dataProp));

				self._data.subscribe(dataProp, function(value)
				{
					target.attr(elementProp, value);
				})

				target.bind('change', function()
				{
					if(!self._data) return;

					self._data.set(dataProp, target[elementProp]());

					//todo. why the hell is this here??

					if(self._data.save) self._data.save()
				})	
			}


			for(var elementProp in properties)
			{
				bind(elementProp, properties[elementProp]);
			}
		}
	},

	/**
	 */

	'override setup': function(ops)
	{
		this._super(ops);

		if(this.ops.data) this.data(this.ops.data);

		return this;
	},


	/**
	 */

	'data': function(v, skipLoad)
	{
		if(!arguments.length) return this._data;

		this._data = v;

		if(this.initialized)
		{
			if(v) this.listenToData(v);
			if(!skipLoad) this.loadData();

			//update EVERYFING
			this.update();
		}
	},


	/**
	 */

	'override init': function()
	{
		this._super.apply(this, arguments);

		if(this._data) this.data(this._data);
	},


	/**
	 */

	'listenToData': function(data)
	{
		if(this._dataSubscription) this._dataSubscription.dispose();

		var self = this;

		this._dataSubscription = data.subscribe({
			'update': this.getMethod('onDataChange')
		});
	},

	/**
	 */

	'onDataChange': function()
	{
		this.update();
	},

	/**
	 */

	'loadData': function(next)
	{
		if(!this._data || this._data.loaded || !this._data.load) 
		{
			if(next) next();
			return;
		}


		var self = this;

		this._data.load(function()
		{
			if(next) next();
		});
	},

	/**
	 */

	'removeData': function()
	{                                                                                                            
		if(this.data()) this.data().remove();
	},

	/**
	 */

	'override instructions': function()
	{
		return this._super().concat(['loadData']);
	}

});


var CollectionView = exports.Collection = ItemView.extend({
	
	/**
	 */

	'override __construct': function(ops)
	{
		this._super(ops);


		if(this.ops.view) this.view = this.ops.view;
	},

	/**
	 */

	'override setup': function(ops)
	{
		this._super(ops);

		this.view = this.ops.view ? this.ops.view : (this.view || 'View');
		this.tag = this.ops.tag || this.tag;
	},

	/**
	 */

	'listenToData': function(data)
	{
		if(this._collectionSubscription) this._collectionSubscription.dispose();

		this._collectionSubscription = data.subscribe({
			'add': this.getMethod('add'),
			'reset': this.getMethod('render'),
			'remove': this.getMethod('remove')
		});

		if(data.loaded) this.render();
	},


	'override render': function()
	{
		this._super();

		if(!this.el || !this.data()) return;


		this.childrenEl = this.children ? this.$(this.children)[0] : this.el;
		if(!this.childrenEl) console.warn(this.children + ' does not exist');
		this.childrenEl.innerHTML = '';

		this.data().each(this.getMethod('add'));	
	},

	'add': function(item, index)
	{
		var el = this.childHolderElement(item, index);

		// var el = this.el.
		var view = this.create(item, el);

		if(this.childrenEl) this.childrenEl.appendChild(el);
	},

	/**
	 */

	'childHolderElement': function(item, index)
	{
		return this.document.createElement(this.tag || 'div');
	},

	/**
	 */

	'remove': function(item, index)
	{
		var child = this.childrenEl.childNodes[index];
		if(child) this.childrenEl.removeChild(child);
	},

	/**
	 * creates a view from an item
	 */

	'create': function(item, element)
	{
		var v = this.newView(item);
		v.setup({ el: element }, element);
		var view = this.addChild(v);
	},

	/**
	 * override me
	 */

	'newView': function(item, element)
	{
		console.log(this.views)
		return new this.views[this.view]({ data: item });
	}

});