var Structr = require('structr'),
logger = require('mesh-winston').loggers.get('views.core'),
sprintf = require('sprintf').sprintf;


                 
var ViewChain = module.exports = Structr({    

	/**
	 */

	'__construct': function(parent, root) {

		this._parent = parent;          
		this._root   = root || this;   

	},     

	/**
	 */

	'contains': function(name) {

		return this.view && this.view.name == name;

	}, 


	/**  
	 * applies the view chain to the request, or subifies it.
	 */


	'next': function(req, res, name) {   

		//already view chained? subify.
		if(!this.__nextViewChain || this.__nextViewChain.name != name) {          

			if(this.__nextViewChain) logger.verbose(sprintf('"%s" replaced by view "%s" ',this.__nextViewChain.name, name));
			this._nextViewChain().clearView();

		}    

		this.__nextViewChain.apply(req, res, name);
		

		return this.__nextViewChain;
	},   

	/**
	 */

	'apply': function(req, res, name) {

		var self = this;     
		self.name = name;

		//sets a view and adds a view to the current view
		req.addView = function(view) {    

			logger.debug('add view');   

			view.name = self.name;
			self.view = view;            

			//parent exists? add the child.
			if(self._parent && self._parent.view) {

				logger.verbose(sprintf('"%s" adding child "%s"', self._parent.name, self.name));

				self._parent.view.addChild(view, self.name);
			}

			return self;
		}                     

		if(!req.viewChained) { 

			this.applyRoot(req, res);

		}
	},


	/**
	 */

	'clearView': function() {

		if(!this.view) return this;    

		this.view.remove();          
		this.view = null;   

		if(this.__nextViewChain) {

			this.__nextViewChain.clearView();
			this.__nextViewChain = null;

		}    

		return this;
	},


	/**
	 */

	'applyRoot': function(req, res) {    

		var self = this;

		req.viewChained = true;     

		req.display = function(callback) {     

			logger.debug('display view');


			if(callback) self._root.view.subscribeOnce('complete', callback);


			self._root.view.send(res);
		}

		req.addRootView = function(view) {    

			logger.debug('add root view');

			view.name = self.name;
			self.view = view;

			self._root.view.addChild(view, self.name);

			return self;
		}
	},

	/**
	 */

	'_nextViewChain': function() {   

		var chain = this.__nextViewChain || (this.__nextViewChain = new ViewChain(this, this._root));  
		return chain;

	}
});