var load = require('psk/node/io/net').loadJSON,
	qs   = require('querystring');

exports.Youtube = Youtube;

function Youtube(developerKey)
{
	var self = this;

	this.getSubscriptions = function(account, callback)
	{
		self.auth.get('https://gdata.youtube.com/feeds/api/users/default/subscriptions?v=2&alt=json', account, null, function(err, result)
		{
			try
			{
				callback(null, JSON.parse(result))
			}catch(e)
			{
				
			}
		});
	}

	function subscriptionBody(username, term)
	{
		var body = '<?xml version="1.0" encoding="UTF-8"?>' +
		'<entry xmlns="http://www.w3.org/2005/Atom" xmlns:yt="http://gdata.youtube.com/schemas/2007">' +
   		'<category scheme="http://gdata.youtube.com/schemas/2007/subscriptiontypes.cat" term="'+term+'"/>' +
  		'<yt:username>'+username+'</yt:username>' +
		'</entry>';

		return body;
	}

	this.subscribe = function(account, user, callback)
	{
		self.auth.post('https://gdata.youtube.com/feeds/api/users/default/subscriptions', account, subscriptionBody(user.feed, 'user') , function(err, result)
		{
			try
			{
				callback(null, JSON.parse(result))
			}catch(e)
			{
				
			}
		});
	}

	this.unsubscribe = function(account, feed, callback)
	{
		self.auth.remove('https://gdata.youtube.com/feeds/api/users/default/subscriptions/' + feed.feedId.split(':').pop() +'?key='+escape(developerKey), account, null , function(err, result)
		{
			try
			{
				callback();
			}catch(e)
			{
				
			}
		});
	}


	
	//search
	this.search = function(keyword, callback)
	{                      
		loadJSON('gdata.youtube.com/feeds/api/videos', { q: keyword, alt: 'json' }, callback);
	}
	
	this.getUserVideos = function(user, callback)
	{
		loadJSON('gdata.youtube.com/feeds/api/users/' + user + '/uploads', {alt:'json'}, callback);
	}
	
	this.findChannels = function(q, callback)
	{
		loadJSON('gdata.youtube.com/feeds/api/channels', { alt: 'json', q: q, v: 2 }, callback);
	}



	function loadJSON(url, data, callback)
	{
		load(url + '?' + qs.stringify(data),
		function(data)
		{       
			callback(!data, data ? data.feed.entry : null)
		});
	}
}