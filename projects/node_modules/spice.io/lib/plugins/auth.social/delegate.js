var crypto = require('crypto'),
cashew = require('cashew'),
Structr = require('structr');



var idGen = cashew.register('social.accounts');

function sha1(str)
{
	return crypto.createHash("sha1").update(str).digest('hex')
}

var AccountDelegate = function(router, SpiceAppAccountModel)
{
	var self = this;
        
	this.delinkAccount = function (accountId, callback)
	{
		c_accounts.update({_id: accountId},{$set:{accessToken:getNewAccessToken(accountId)}},function()
		{
			callback();
		})
	}
	
	this.updateAccount = function (service, info, callback)
	{
		var ret = {};      
		
		if(!callback)
		{
			callback = ret.accessToken;
			ret.accessToken = undefined;
		}

		var search = { userid: info.userid, type: service };
		var update = { secret: info.info };
		delete info.info;

		for(var i in info)
		{
			if(update[i] || search[i]) continue;

			update[i] = info[i];
		}                            
		                             
		
		update.lastAccess = new Date();    
		
		
		SpiceAppAccountModel.findOne(search, function (err, account)
		{
			Structr.copy(search, update, true);
			
			var isNew = false;
			
			
			function save(err, token)
			{                                                 
				account.save(function (err)
				{
					console.log('Saved authorized account');
					
					//notify any custom function that the account has been created, and wait for a response
					//before finishing
					router.push(isNew ? 'account/created' : 'account/updated', { account: account, accessToken: token.key });
                                                            
					var ret = { accessToken: token.key };          
					                       
					Structr.copy(account.doc || account, ret, true);    
					                                  
					callback(false, ret)
					
				});
				
			}
			
			if(!account)
			{
				account = new SpiceAppAccountModel();   
					account._id = idGen.uid();
				update.joined = update.lastAccess;
				update.loginCount = 0;	
				isNew = true;
			}
			
			Structr.copy(update, account, true);
			update.loginCount++;
			
			               
			
			//new signup? create a new profile
			if(!account.profile)
			{                                                                              
				
				//profile doesn't exist? passively add one
				router.request('profile/register').query({ validate: false, name: account.displayName }).success(function(response)
				{                          
					account.profile = response.result.profile;
					
					save(false, response.result);
				}).pull();
			}
			else
			{                                                                         
				  
				
				router.request('token/by/secret').query({ secret: account.profile.toString() }).success(function(response)
				{                                
					save(false, response.result);
				}).pull();
			}
			
			
		})             
	}
		
	this.getAccounts   = function (search, returnAllData, callback)
	{       
		if(typeof search == 'string')
		{
			search = { profile: search };
		}                            
		
		if(!callback)
		{
			callback = returnAllData;
			returnAllData = undefined;
			
		}
		function search2()
		{
		}
		
			
		if(search._id) search._id.toString();
		if(search.profile) search.profile = search.profile.toString();
		
		
		self.findAccounts(search, returnAllData, callback);
		
	}


	this.getAccount    = function (id, callback)
	{
		c_accounts.findOne({_id:id},callback)
	}
		
	this.findAccounts  = function (search, returnAllData, callback)
	{
		if(!callback)
		{
			callback = returnAllData;
			returnAllData = undefined;
			
		}
		
		if(search._id) search._id = search._id;
		if(search.profile) search.profile = search.profile;
		var params = returnAllData ? {} : {secret:0};
		
		SpiceAppAccountModel.find(search, params, callback);
	}
} 

exports.AccountDelegate = AccountDelegate;