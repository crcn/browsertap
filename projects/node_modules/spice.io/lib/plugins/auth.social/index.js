var vine = require('vine'),
	AuthHandler = require('./handler'),
	AccountDelegate = require('./delegate').AccountDelegate,
	request = require('request');


/**

params = {

	
	redirect: {

		whitelist: ["*.spice.io","*.cliq.ly"] 
	},
	
	//http hook callbacks
	hooks: ["http://genoo.someserver.com"]
}     

*/

exports.plugin = function(router, params) {

	var handler = new AuthHandler(params), 
	Account,
	delegate;

	function linkAccount(req, mw, account) {

		throw new Error('Not updated - this code is OLD');

		var session = req.session;

		console.log('Authorized %s account', mw.data('service');
			
		var session = req.session,
		profile = req.profile;

		if(profile) account.profile = profile._id;   
		           
			
		console.log('Updating authorized account...');
		
		
		delegate.updateAccount(mw.data('service'), account, function (err, data) {
    
			console.log('Updated authorized account');
			
			if(session) {

				var redirectUrl = session.data.redirectUrl || handler.redirect; 
				session.remove('redirectUrl');
			}
			else {

				session = handler.redirect;
			}
			

			
			(params.hooks || []).forEach(function(hook) {

				request.post({ uri: hook, body: JSON.stringify(data) }, function(){ });
			});

			if(redirectUrl) {

				return request.respond({ redirect: redirectUrl + '?accountId=' + data._id.toString() + '&accessToken=' + data.accessToken + '&displayName=' + data.displayName + '&service=' + request.data.service } ).end();
			}       
			    
			vine.result({ accountId: data._id.toString(), accessToken: data.accessToken, displayName: data.displayName, service: request.data.service }).end(request);
		});
	}

	var masterRoutes = {

		
		/**!
		 * Checks to see if an account connection can be made with the target service
		 * @param service(facebook) the service to check. e.g: (youtube, twitter, facebook)
		 * @collection connect              
		 * @example /connect/twitter/exists
		 * @displayName serviceExists
		 */

		'pull \
		-method=GET \
		connect/:service/exists': function(req, res) {

			var auth = handler.auth(req.params.service);


			if(!auth) return vine.error('You cannot authenticate with %s', req.params.service).end(res);

			this.oauth = auth;

			if(!this.next()) {

				vine.message('You can authenticate with %s', req.params.service).end(res);
			}
		},


		/**!
		 * Initializes a connection between a user account and the selected service.
		 * @param service(twitter) the service to connect to.
		 * @optional redirectUrl The url to redirect to when done. This url __must be whitelisted__
		 * @collection connect                 
		 * @example /connect/twitter?redirect=http://whitelistedUrl.com
		 * @displayName connectWithService
		 */

		'pull \
		-method=GET \
		connect/:service/exists -> \
			session/profile -> \
				connect/:service': function(req, res) {

			var sess = req.session,
			data = req.query;

			//links accounts
			sess.data.accessToken = data.accessToken;

			if(data.redirect) {

				if(data.redirect.indexOf('file://') == 0 || handler.canRedirect(data.redirect)) {

					sess.data.redirectUrl = data.redirect;

				} else {

					return vine.error('You cannot redirect with %s', data.redirect).end(res);
				}
			}

			this.oauth.authenticate(req);
		},

		/**!
		 * Callback function for authorizing a service
		 * @param service the service to authorize
		 */

		'pull \
		-method=GET \
		connect/:service/exists -> \
			session/profile -> \
				authorize/:service': function(req, res, mw) {

			console.log('authorizing...');
			            
			this.oauth.authorized(this, function(err, account) {

				linkAccount(req, mw, account);

			});  
		},      
		
		/**
		 */
		
		'pull \
		session -> \
			session/profile': function(req, res, mw) {
          
			if(req.session.data.accessToken) {
               
				router.request('profile/validate').query({ token: req.session.data.accessToken }).success(function(response) {
                     
					eq.profile = this.profile;    
					if(response.errors) console.warn('Profile with given access token does not exist (auth.social)').end(res);
					
					mw.next();
				}).pull();

			} else {

				mw.next();
			}
		},

		/**
		 */

		'pull -http -method=POST  connect/:service/exists -> share/account/:service': function(req, res, mw) {

			console.log('Sharing app credentials');
			
			
			
			req.oauth.share(req.data, function(err, account) {

				linkAccount(req, mw, account);
			});
		}
	};


	var beanRoutes = {


		/**
		 */

		'push init': function() {

			this.router.request('connect/auth').success(handler.getMethod('add')).collect();
		},

		/**
		 */

		'push mongodb': function(db) {

			Account = require('./models')(db).Account;
			
			delegate = new AccountDelegate(this.router, Account);
			
			Account.findOne({ type: 'facebook'}, function() {

			})
		},

		/**!
		 * Returns a list of connected accounts
		 * @collection accounts       
		 * @displayName getAccount           
		 */

		'pull \
		-hook -method=GET \
		profile -> \
			accounts OR \
			accounts/:serviceOrId OR \
			social/accounts OR \
			social/accounts/:serviceOrId': function (req, res, mw) {
                                       
			var profile = req.profile;   
			                  

			var search = { profile: profile._id },
			serviceOrId = mw.data('serviceOrId'),
			singleAccount = false;

			if(serviceOrId && serviceOrId != 'all') {


				if(serviceOrId.length == 24) {

					singleAccount = true;
					search._id = serviceOrId;
				}
				else {

					search.type = serviceOrId;
				}

			}

			delegate.getAccounts(search, true, function(err, result) {

				var accounts = [];
				
				(result || []).forEach(function(account) {

					accounts.push(account);
				})

				if(singleAccount) {

					req.account = accounts[0];
				}

				req.accounts = accounts;

				if(!mw.next()) vine.api().list(accounts).end(res);
			});
		},
                     
		/**!
		 * Deletes the target account
		 * @param accountId 
		 * @collection accounts   
		 * @displayName getAllAccounts         
		 */

		'pull \
		-hook -method=DELETE \
		profile -> \
			accounts/:accountId OR \
			accounts OR \
			social/accounts/:accountId': function(req, res) {
                                      
			var account = new Account({ _id: this.data('accountId') });

			account.remove(true, function() {

				vine.remove(account).end(es);
			})
		},

		/**
		 */

		'push init/master': function() {
 
			this.router.on(masterRoutes);

		},

		/**
		 */

		'pull 
		account': function(req, res) {

			delegate.getAccount(req.query, function(err, result) {

				res.end(result);
			})
		}
	}

	router.on(beanRoutes)
}