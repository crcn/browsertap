var Structr = require('structr'),
Url = require('url');


module.exports = Structr({
	
	/**
	 */

	'__construct': function(params)
	{
		this._handlers = {};  
		                 
		var self = this;
		this.whitelist = [];
		      
		(params.whitelist || []).forEach(function(url, index)
		{                                                       
			if(url.indexOf('://') == -1) url = 'http://' + url;       
			                    
			var domain = url.match(/:\/\/([^\/]+)/)[1],
			domainParts = domain.split('.');  
			                             
			self.whitelist.push(self._parseDomain(url));
		})
	},  
	
	/**
	 */
	
   	'_parseDomain': function(url)
	{
		if(url.indexOf('://') == -1) url = 'http://' + url;       
		                    
		var domain = url.match(/:\/\/([^\/]+)/)[1],
		domainParts = domain.split('.');  
		                                   
		return {
			protocol: url.match(/\w+(?=:\/\/)/6)[0],
			subdomain: domainParts.length > 2 ? domainParts.shift() : '*',
			tldomain: domainParts.join('.')
		}
	},
	
	

	/**
	 */

	'add': function(auth)
	{
		this._handlers[auth.name] = auth;	
	},

	/**
	 */
	

	'exists': function(name)
	{
		return !!this._handlers[name];
	},

	/**
	 */

	'auth': function(name)
	{
		return this._handlers[name];
	},

	/**
	 */
	
	'canRedirect': function(url)
	{       
		var parts = this._parseDomain(url);
		
		for(var i = this.whitelist.length; i--;)
		{                 
			var whitelisted = this.whitelist[i];
			
			if((whitelisted.subdomain == '*' || whitelisted.subdomain == parts.subdomain) &&
			whitelisted.tldomain == parts.tldomain)
			{
				return true;
			} 
		}                   
		
		return false;
	}
});