var models = require('./models'),
	vine = require('vine');


exports.plugin = function(mediator) {
	
	var storageModels,
		UserStorage;
		
	function accountStorageSet(data, callback) {

		if(!callback) {

			callback = data.callback;
			data = data.data;
		}
		
		data.data.forEach(function(v) {

			UserStorage.collection.update({ key: v.key, account: data.profile._id.toString() }, {$set: { value: v.value }}, {upsert: true }, function(err) {

				if(callback) callback();

			})
		})
	}
	
	function accountStorageGet(data, callback) {

		if(!callback) {

			callback = data.callback;
			data = data.data;
		}
		
		UserStorage.find({account: data.profile._id.toString(), key : {$in : data.key instanceof Array ? data.key : [data.key] }}, function(err, storage) {

			callback(storage);

		});
	}
	
	function accountStorageRemove(data, callback) {

		if(!callback) {

			callback = data.callback;
			data = data.data;

		}
		
		UserStorage.remove({account: data.profile._id.toString(), key : {$in : data.key instanceof Array ? data.key : [data.key] }}, function(err, storage) {

			if(callback) callback();

		});
	}
	
	
	function onMongoDB(mongodb) {

		UserStorage = models(mongodb).UserStorage;

	}

	
	mediator.on({


		/**
		 */
		 
		'pull \
		social/validate/login -> \
			account/storage/get OR 
			account/storage/get/:key': function(req, res) {

			var keys = this.data('keys').split('+');
						
			accountStorageGet({ key: keys, profile: req.profile }, function(storage) {

				vine.api().result(storage).end(res);

			});
		},

		/**
		 */
		 
		'pull \
		social/validate/login -> \
			account/storage/set OR 
			account/storage/set/:key OR 
			account/storage/set/:key/:value': function(req, res) {

			var profile = req.profile,
				value = this.data('value'),
				key = this.data('key');
				
			try {

				value = JSON.parse(value);

			} catch(e) { }
			
			if(key) {

				accountStorageSet({ data: [{ key: key, value: value }], profile: profile });

			} else if(value instanceof Array) {

				accountStorageSet({ data: value, profile: profile });

			}
			
			vine.api().result(true).end(es);
		},

		/**
		 */
		 
		'pull \
		social/validate/login -> \
			account/storage/remove OR \
			account/storage/remove/:key': function(req, res) {

			var keys = this.data('keys').split('+');
						
			accountStorageRemove({ key: keys, profile: request.profile });
			
			vine.api().result(true).end(res);
		},

		/**
		 */
		 
		'push mongodb': onMongoDB
	})
}