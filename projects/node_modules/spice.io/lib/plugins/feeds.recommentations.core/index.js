var Structr = require('sk/core/struct'),
	Queue = require('sk/core/queue').Queue,
	vine = require('vine');

var SuggestionManager = Structr({
		'__construct': function() {

			this._handlers = {
	};
	},
	'addHandler': function(handler) {

		this._handlers[handler.name] = handler;
	},
	'findSuggestions': function(ops, callback) {

		var word = ops.q,
			i = 0,
			suggestions = [];
		
		for(var name in this._handlers) {

			i++;
			var handler = this._handlers[name];
			
			handler.findSuggestions(word, function(sugg) {

				suggestions = suggestions.concat(sugg);
				
				if(!(--i)) callback(suggestions);
			});
			
		}
	}
})


exports.plugin = function(router) {

	var manager = new SuggestionManager();
	
	function init() {

		router.on('collect suggestion/handler', manager.getMethod('addHandler'));

	}
		

	function initMaster() {

		mediator.on({
			
			/**
			 */

			'pull \
			-http \
			social/validate/login/passive -> \
				suggest/:q OR \
				suggest': function(req, res) {

				manager.findSuggestions({ q: this.data('q') }, function(suggestions) {

					vine.api().result(suggestions).end(res);
					
				})
			}
		})
	}
	
	
	mediator.on({

		/**
		 */
		 
		'push init': init,

		/**
		 */

		'push init/master': initMaster

	})
}