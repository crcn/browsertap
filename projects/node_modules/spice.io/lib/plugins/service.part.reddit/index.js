var net = require('psk/node/io/net'),   
Url    = require('url'),
loadRequest = net.loadRequest,
URLRequest = net.Request,
Queue = require('sk/core/queue').Queue;

//check out: http://api.ihackernews.com/

exports.plugin = function(router)
{
	function getSocialService(req, res)
	{           

		function renderRedditData(data)
		{
			data = data.data;

			return {
				label:data.title
				,augment:data.url ? (data.url.indexOf('/comments/') == -1 ? true : false) : true
				,createdAt:new Date(Number(data.created_utc)*1000)
				,link:data.url
				,type:'post'
				,icon:data.thumbnail
				,likes:data.ups   
				,dislikes:data.downs
				,nsfw:data.over_18

			}	
		}


		function _subRedditPartial(order,target)
		{
			if(!target)
			{
				target = order;
				order = undefined;
			}                        
			target.params = {q:{type:'input'}};
			target.renderData = renderRedditData;  
			target.load = function(data,callback)
			{                                  
				this.service.loadSubredditNew(data.q,order,function(data)
				{                                   
					callback(!data,data ? data.data.children : null);     
				})
			}

			return target;
		}

		var loader = 
		{
			name:'Reddit'
			,type:'graph'
			,service: new (function()
			{      

				var host = 'http://www.reddit.com/r/';   

				this.loadSubredditNew = function(sub,order,callback)
				{					           
					if(!callback)
					{
						callback = order;
						order = 'new';
					}                                             

					loadRequest(host+sub+'/'+order+'.json',function(data)
					{            
						try
						{                   
							callback(JSON.parse(data));
						}
						catch(e)
						{                         
							callback(null);
						}
					})
				}  
			}
			)()
			,loaders:
			{
				default:
				{                                    
					r:_subRedditPartial({
						name:'New Subreddits'
						,identify:
						[ 
							{
								test:[/reddit.com\/r\/(\w+)\/new/i]
								,feed:function(match,callback)
								{
									callback(false, {q:match[1]});
								}
							}
						]
					})
					,top:_subRedditPartial('top',{
						name:'Top Subreddits'
						,identify:
						[ 
							{
								test:[/reddit.com\/r\/(\w+)\/top/i]
								,feed:function(match,callback)
								{
									callback(false, {q:match[1]});
								}
							}
						]
					})
					,hot:_subRedditPartial('hot',{
						name:'Hot Subreddits'
						,identify:
						[ 
							{
								test:[/reddit.com\/?$/,/reddit.com\/r\/(\w+)\/hot/i,/reddit.com\/r\/(\w+)\/?$/i]
								,feed:function(match,callback)
								{
									callback(false, {q:match[1] || 'all'});
								}
							}
						]
					})
					,controversial:_subRedditPartial('controversial',{
						name:'Controversial Subreddits'
						,identify:
						[ 
							{
								test:[/reddit.com\/r\/(\w+)\/controversial/i]
								,feed:function(match,callback)
								{
									callback(false, {q:match[1]});
								}
							}
						]
					})
				}  
			}
		}

		res.end(loader)
	}
	
	function getPromotionFinder(req, res)
	{ 
		res.end({
			service:'reddit'  
			,interval:1000 //1 request every N seconds. 
			,test:function(item)
			{
				return item.service == 'reddit';
			}
			,find:function(item,callback)
			{                                               


				var request = new URLRequest('http://www.reddit.com/api/info.json');
				request.data = {url:item.link};

				var correctPost;

				loadRequest(request,function(data)
				{
					try
					{
						var result = JSON.parse(data).data.children;

						for(var i = result.length; i--;)
						{
							var post = result[i].data;

							if(post.created_utc == item.createdAt.getTime()/1000)
							{
								correctPost = post;
								break;
							}

							//otherwise find the best candidate
							else
							if(!correctPost || post.ups > correctPost.downs)
							{
								correctPost = post;
							}

						}

						if(correctPost) 
						callback(correctPost.ups,correctPost.downs);
						else
						callback();

					}
					catch(e)
					{
						callback(null);
					}
				});    
			}
		})
	}
	
	router.on({
		'collect social/service': getSocialService,
		'collect promotion/finder': getPromotionFinder
	})
}
       