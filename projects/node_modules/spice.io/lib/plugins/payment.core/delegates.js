exports.PaymentDelegate = function(mediator, mongoose)
{
	var c_paymentDetails = mongoose.collection('payment.details'),
		c_paymentBalance = mongoose.collection('payment.balance');
		
		
	this.addPayment = function(orderInfo, callback)
	{
		var profile = orderInfo.profile,
			items = orderInfo.items;
			
		
		this.getPaymentBalance(profile, function(err, item)
		{
			if(err) return callback(err);
			
			c_paymentDetails.insert(items, function(){});
			
			var balance = 0;
			
			for(var i = items.length; i--;)
			{
				var item = items[i];
				
				balance += (item.price || 0);
			}
			
			c_paymentBalance.update({profile:profile}, {$inc:{balance:balance, total: balance}, $set:{lastOrder:new Date()}}, function()
			{
				callback();
			});
		})
	}
	
	
	this.subtractBalance = function(profile, balance, callback)
	{
		console.log('Subtracting balance of %s for profile %s', balance, profile);
		
		c_paymentBalance.update({profile:profile}, {$inc:{balance:-Math.abs(balance)}, $set:{lastOrder:new Date()}}, function()
		{
			if(callback) callback();
		})
	}
	
	
	this.getPaymentBalance = function(profile, callback)
	{
		c_paymentBalance.findOne({ profile: profile }, function(err, item)
		{
			if(err) return callback(err);
			
			
			if(!item)
			{
				c_paymentBalance.insert({ profile: profile, balance: 0}, function(err, item)
				{
					callback(false, 0);
				})
			}
			else
			{
				callback(false, item.balance);
			}
		})
	}
}