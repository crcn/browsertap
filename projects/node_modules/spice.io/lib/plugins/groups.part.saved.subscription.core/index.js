var Delegate = require('./delegate'),
vine = require('vine'),
SubscriptionHandlers = require('./handlers'),
cron = require('cron2'),
logger = require('winston').loggers.get('subscription.core');


/**


 */

exports.plugin = function(router){
                                                       
	var delegate, manager = new SubscriptionHandlers(router).wrap();	

	router.on({


		/**
		 */

		'push \
		mongodb': function(db) {

			// cache/subscriberInfo/36accessToken
			delegate = new Delegate(router, db, manager);

			//handler could be email, or reposting out to twitter, facebook, google
			router.request('subscription/handler').success(manager.add).collect();

		},
		
		/**!
		 * returns a list of subscribers to the given group
		 * @param groupId
		 * @collection subscription   
		 * @displayName getAllSubscribers
		 */

		'pull \
		-hook \
		-method=GET \
		groups/:group/subscribers': function(req, res) {

			delegate.getSubscribers(req.group._id, req.query.page, req.query.count, function(subscribers) {

				vine.list(subscribers).end(res);

			});

		},
		
		/**!
		 * notify subscribers immediately
		 */
		
		'pull \
		-hook -method=POST \
		groups/:group/subscribers/notify': function(req, res) {

			delegate.notifySubscribers(req.group._id.toString(), Date.now());
			
			vine.result('sending').end(res);

		},

		/**!
		 * Returns information about the subscription. Information such as: When to send off a newsletter, subscribers, etc.
		 * @param groupId
		 * @collection subscription     
		 * @displayName getSubscriptionInfo
		 */

		'pull \
		-hook -method=GET \
		groups/:group/subscribers/info': function(req, res) {

			delegate.getSubscriptionInfo(req.group._id.toString(), function(item) {

				vine.result(item).end(res);

			});

		},
		
		/**!
		 * Returns a history of when items were sent
		 */
		
		'pull \
		-hook -method=GET \
		groups/:group/subscribers/history': function(req, res) {

			vine.result('history').end(res);

		},


		/**!
		 * Updates the subscription info for a given group. 
		 * @param cron the cron job - when to send a newsletter
		 * @collection subscription      
		 * @displayName updateSubscriptionInfo
		 */

		'pull \
		-hook -method=PUT -perm=USER \
		remove/cache/subscriberInfo -> \
			groups/:group/subscribers/info OR \
			groups/:group/subscribers/info/update': function(req, res) { 

			delegate.updateSubscriptionInfo(req.group._id.toString(), req.query, function(item) {

				vine.result(item).end(res);
			});
		},


		/**!
		 * Adds a new subscriber to the group
		 * @param groupId
		 * @param type the type of subscriber: email, facebook, etc.
		 * @collection subscription      
		 * @displayName addSubscription
		 */

		'pull \
		-hook -method=POST -perm=USER|ADD_SUBSCRIBER|MODIFY_SUBSCRIBER \
		remove/cache/subscribers -> \
			groups/:group/subscribers OR \
			groups/:group/subscribers/add': function(req, res) {              
			var d = req.query;
			                
			var data = {
				type: d.type,
				groupId: req.group._id.toString(),
				value: d.value,
				cron: d.cron
			};
			
			delegate.updateSubscriber(data, function(result) {

				res.end(result);

			});
		},


		/**!
		 * Returns the target subscriber
		 * @param groupId
		 * @param subscriberId
		 * @collection subscription    
		 * @displayName getSubscriber
		 */

		'pull \
		-hook -method=GET \
			groups/:group/subscribers/:subscriberId': function(req, res) {


			delegate.getSubscriber(req.params.group, req.params.subscriberId, function(subscriber) {

				vine.result(subscriber).end(res);
			});

		},

		/**!
		 * Removes a subscriber
		 * @param groupId
		 * @param subscriberId
		 * @collection subscription  
		 * @displayName removeSubscriber
		 */

		'pull \
		-hook -method=DELETE \
		remove/cache/subscribers -> \
			groups/:group/subscribers/:subscriberId OR \
			groups/:group/subscribers/:subscriberId/remove': function(req, res) {

			logger.info('unsubscribing user');

			delegate.removeSubscriber(req.params.subscriberId, req.query.subscriberKey, function() {

				vine.result(true).end(res);

			});
		},

		/**!
		 * Updates a subscriber
		 * @param groupId
		 * @param subscriberId
		 * @collection subscription  
		 * @displayName updateSubscriber
		 */

		'pull \
		-hook -method=PUT \
		groups/:group/subscribers/:subscriberId OR \
		groups/:group/subscribers/update': function(req, res) {

			delegate.updateSubscriber(this.data(), function(result) {

				es.end(result);

			});
		},
	})
}