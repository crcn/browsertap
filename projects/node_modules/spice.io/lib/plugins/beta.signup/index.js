var models = require('./models'),
outcome = require('outcome'),
vine = require('vine'),
cashew = require('cashew'),
mustache = require('mustache'),
fs = require('fs'),
logger = require('winston').loggers.get('auth.profile'),
sprintf = require('sprintf').sprintf;

exports.plugin = function(router, params) {
	
	var BetaUser, signupKeyGen = cashew.register('signupKey');


	function priority(offset) {

		return Date.now();
	}

    //by days
	if(!params.referalWeight) params.referalWeight = 1000 * 60 * 60 * 24; // 1 day per referal
	if(!params.defaultTemplate) throw new Error("A default template must be present");
	if(!params.invitedTemplate) throw new Error("A invite template must be present");
		 
	function sendInvite(doc, callback) {

		var tpl = fs.readFileSync(params.invitedTemplate,'utf8');


		//give a random signup key
		doc.signupToken = signupKeyGen.random();

		//the url users can access to signup with the given token
		var tokenUrl = 'http://' + process.env.HOSTNAME + '/signup?email='+doc.email+'&signupToken=' + doc.signupToken;

		logger.info(sprintf('Inviting %s with url %s', doc.email, tokenUrl));

		doc.save(outcome.success(function() {

			router.request('send/email').
			query({
				to: doc.email,
				subject: "You've been invited to Team Digest",
				body: mustache.to_html(tpl, { signupUrl: tokenUrl } )
			}).
			success(callback || function() { }).
			pull();

		}));
	} 

	router.on({

		/**
		 */

		'validate signupToken': function(req, next) {

			logger.verbose('fetching signup token from db');

			BetaUser.findOne({ signupToken: req.value }, outcome.success(function(user) {
					
				if(!user) return next(new Error('You have not been invited yet to use the app.'));
					
				//req.sanitized.username = user.email;

				//tack on privileges to a particular account - or "sharing"
				req.sanitized.grant = {
					to: user.inviter,
					scope: user.grant
				}

				logger.verbose('found token, nexting');
				next();

			}));

		},


		/**
		 */

		'validate count': /\d+/,

		/**
		 */

		'validate emails': function(req, next) {

			logger.verbose('checking if emails are valid');

			if(!req.value) throw new Error("Emails must be present");

			var value;

			if(req.value instanceof Array) {

				value = req.value;

			} else {

				try {

					value = JSON.parse(req.value);

				} catch(e) {

					value = req.value.split('|');

				}	

			}
				

			if(!value) throw new Error("Email is invalid");

			next(false, value);
		},

		/**
		 */

		'push \
		init': function() {

			router.push('validate/env/HOSTNAME');

		},


		/**
		 */
		
		'push \
		mongodb': function(db) {  

			BetaUser = models(db).BetaUser;
		},
		
		/**
		 */

		'pull \
		-hook -method=POST \
		validate/email ->\
			beta/signup': function(req, res) {

			var newUser = new BetaUser({
				email: req.sanitized.email,
				priority: priority()
			}),
			refereal = req.query.referal;

			newUser.save(outcome.error(function() {

				vine.error('User already exists').end(res);

			}).success(function() {

				vine.result('successfuly signed up').end(res);

				//send a thank-you email
				router.request('send/email').
				query({
					to: req.sanitized.email,
					subject: 'Thanks for signing up for Team Digest',
					body: mustache.to_html(fs.readFileSync(params.defaultTemplate,'utf8'))
				}).success(function(){}).
				pull();

			}));

			if(!refereal) return;

			//increase priority to the refered user - TODO change referal
			BetaUser.update({ _id: refereal }, { $inc: { priority: -params.referalWeight } });
		},

		/**
		 * friends can invite others 
		 */

		'pull \
		-perm=USER \
		-hook -method \
		validate/emails ->\
			invite/friends': function(req, res) {

			
			logger.verbose("Inviting friends");

			req.sanitized.emails.forEach(function(email) {


				function onBetaUser(err, user) {

					if(err) {
						logger.error(sprintf('unable to invite user %s', email));
						return;
					}

					//already sent a token? don't send another email. Oh god that would
					//be fucking anoying
					if(user.signupToken) {
						logger.verbose('user has already been sent an invitation')
						return;
					}

					sendInvite(user);

				}


				//find the user before inviting them
				BetaUser.findOne({ email: email }, function(err, user) {



					if(err || user) {

						//user or error? continue.
						onBetaUser(err, user);

					} else {

						logger.info(sprintf('invited user %s does not exist, signing up', email));

						//otherwise add a new user!
						var newUser = new BetaUser({ email: email, inviter: req.sanitized.profile._id, grant: String(req.query.grant).split('+') });

						//save the new user
						newUser.save(function(err) {

							//then send an invite
							onBetaUser(err, newUser);

						});
					}
				});
			});

			vine.result('invited friends').end(res);
		},

		/**
		 * grant access to given user
		 */

		'pull \
		-hook -method=POST \
		validate/count ->\
			beta/grant': function(req, res) {


			var count = 0, count = req.sanitized.count;


			BetaUser.find({ signupToken: undefined }).sort('priority', 1).limit(count).each(outcome.success(function(doc) {
				
				if(!doc) return vine.message('granted %d users access', count).end(res);

				count++;

				sendInvite(doc);
			}));
				
			
		},

		/**
		 * only people with tokens can signup
		 */

		'pull \
		 validate/signupToken -> \
		 	validate/signup/*': function(req, res, mw) {
		 		mw.next();
		 }
	});
}