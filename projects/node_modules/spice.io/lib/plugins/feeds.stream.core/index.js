var Loader = require('./loader'),
DelegateManager = require('./db/manager'),
vine = require('vine'),
logger = require('winston').loggers.get('feeds.stream.core'),
sprintf = require('sprintf').sprintf;


exports.plugin = function(router, params) {

	var mongodb, loader;
		
	//the max ttl for caching feeds before dumping everything
	if(params.maxFeedCacheTime) params.maxFeedCacheTime = Number(params.maxFeedCacheTime);

	//expands stream urls as they're coming in. this is taxing considering there's no dupe-detection
	if(params.expandStreamUrls) params.expandStreamUrls = params.expandStreamUrls.indexOf('yes') > -1;

	//max number of stream records before popping off old items
	if(params.maxStreamFeedRecords) params.maxStreamFeedRecords = Number(params.maxStreamFeedRecords);


	if(params.maxStreamAge) param.maxStreamAge = Number(param.maxStreamAge);
	if(params.maxPromoAge) param.maxPromoAge = Number(param.maxPromoAge);
	

	var self = { router: router, appParams: params };

	function onFeed(prefix, callback) {


		var on = { };

		//first fetch the accounts. feed might be private. TODO:
		//this SHOULD be in feed/identify instead probably
		var uris = [/*'pull -public -http accounts',*/


		//next we need to identify the feeds passed in.
		//'-> feed/identify',
		
		'pull -hook -method=GET -ttl=20 feed/identify',
		
		//finally, the options for loading the particular feed

		//new/google+flickr/photo/search/tacos
		'-> :prefix/:service/:category/:action/:q',

		//hot/twitter/search/traveling+vacation
		'OR :prefix/:service/:action/:q',

		//stream/facebook/homepage
		'OR :prefix/:service/:action',

		//stream/some-random-group-id
		'OR :prefix/:feed', 

		//or dirty it up with any of the options above
		'OR :prefix/'];

		//replace the prefix. uses : for consistency.
		on[ uris.join(' ').replace(/:prefix/g, prefix) ] = callback;

		router.on(on);
	}


	function addLoader(type) {

		logger.verbose(sprintf('Adding %s loader', type));

		onFeed(type, function(req, res, mw) {

			var feeds = req.identifiedFeeds;


			var d = mw.flattenData();

			var ops = {

			
				feeds: feeds,

				//the current page
				page: d.page || 0,

				//number of items to show
				count: d.count || 30,

				//true for sync
				wait: d.wait,

				//filter by site
				site: d.site,

				//filter by servuce
				service: d.service,

				//filter by media
				media: d.media,


				//FTS
				filter: d.filter 
			};


			logger.verbose(sprintf('Loading %s', type));

			self.loader.load(type, ops, function(err, api) {

				api.end(res);
			});
		});
	}                          

	/**!
	 * Streams raw data from the target sources  
	 * @collection feeds    
	 * @example /stream/youtube/search/pasta+recipe         
	 * @displayName getStream
	 */

	 //'pull stream/:service/:action/:query'
	
	/**!
	 * Streams new, augmented from the target sources     
	 * @optional filter filter against the target stream ~ search term. Accepts OR, AND, NOT, arguments.
	 * @optional count the number of items to show on the page
	 * @optional page the current page to show                                  
	 * @optional media return only content with media type: video, image, link, image. Accepts OR arguments.              
	 * @optional site return content provided from given site only. e.g: http://engadget.com
	 * @optional service return content provided by given service only: rss, twitter, facebook, etc.
	 * @collection feeds                                            
	 * @example /new/twitter/search/obama   
	 * @displayName getAugmentedStream
	 */

	 //'pull new/:service/:action/:query' 
	
	/**!
	 * Streams augmented data ordered by how hot the content is (# likes / time)
	 * @collection feeds    
	 * @example /hot/twitter/search/obama  
	 * @displayName getHotStream 
	 */

	 //'pull hot/:service/:action/:query'
	
	/**!
	 * Streams augmented data ordered by popularity in a given time frame (default is one day)
	 * @collection feeds    
	 * @example /top/twitter/search/obama   
	 * @displayName getTopStream 
	 */

	 //'pull top/:service/:action/:query'

	
	['stream','hot','top','new'].forEach(addLoader);


	router.on({

		/**
		 */

		'push \
		mongodb': function(db) {

			self.database = db;
			self.dbManager = new DelegateManager(self); 

			loader = self.loader = new Loader(self.dbManager).wrap();


			router.on({

				/**
				 */

				'pull \
				-hook -method=GET \
				articles/:articleId OR \
				articles': function(req, res) {


					self.dbManager.promotions.getPromotion(this.data('articleId') || this.data('_id') || this.data('link'), function(item) {

						if(item) return vine.list(item).end(res);

						vine.error('article does not exist').end(res);
					})
				},

				/**
				 */

				'push -collect -each content/standardizer': loader.addContentStandardizer

			});
		},
		
	})
}