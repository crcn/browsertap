var cachers = require('psk/node/io/cache2'),
DBCacher = cachers.DBCacher,
FSCacher = cachers.FSCacher,
Structr = require('sk/core/struct');

var SpiceAppCacher = Structr({
	__construct: function(cacher) {

		this._cacher = cacher;
	},
	remove: function(key, callback) {

		this._cacher.remove(new RegExp(this.toRegexSearchableKey(key)), callback || function(){});
	},
	get: function(key, callback) {

		this._cacher.get(key, callback);
	},
	store: function(key, value, callback) {

		this._cacher.store(this.getKey(key), value, callback);
	},
	objectToKey: function(object) {

		var key = '';
		
		for(var i in object) {

			var v = object[i];
			
			if(v) key = i+'='+escape(object[i])+'&';
		}
		return key;
	},
	toRegexSearchableKey: function(key) {

		return this.getKey(key).replace(/([^a-zA-Z0-9_]+)/g,'\\$1');
	},
	getKey: function(key) {

		if(key instanceof RegExp) {

			return key;
		}else
		if(key instanceof Array) {

			key = key.join('+');
		}
		else
		if(typeof key == 'object') {

			key = this.objectToKey(key);
		}
		
		return key;
	}
})

var SpiceAppDBCacher = SpiceAppCacher.extend({
	'override __construct': function(name, db) {

		this._super(new DBCacher(name, db));
	}
});

var SpiceAppFSCacher = SpiceAppCacher.extend({
	'override __construct': function(name, db) {

		this._super(new FSCacher(name, db));
	}
});

var JSONCacher = {

	'override get': function(key, returnRaw, callback) {

		if(!callback) {

			callback = returnRaw;
			returnRaw = undefined;
		}
		
		this._super(key, function(data) {

			//returning raw data is a helluva lot less overhead, but we don't want it to be the default
			callback(data ? (returnRaw ? data : JSON.parse(data)) : null)
		});
	},
	'override store': function(key, value, callback) {

		this._super(key, JSON.stringify(value), callback);
	}
}


exports.JSONDBCacher = SpiceAppDBCacher.extend(JSONCacher);
exports.JSONFSCacher = SpiceAppFSCacher.extend(JSONCacher);
exports.FeedDataCacher = SpiceAppFSCacher.extend(JSONCacher);

exports.SavedFeedsCacher = exports.FeedDataCacher.extend({
	'override get': function(ops, returnRaw, callback) {

		this._super(this.objectToKey(ops), returnRaw, callback);
	},
	'override store': function(ops, value, callback) {

		this._super(this.objectToKey(ops), value, callback);
	},
	'override remove': function(ops) {

		this._super(this.objectToKey(ops));
	}
});

//group id only
exports.GroupInfoCacher = SpiceAppCacher.extend();

//profileId, type
exports.GroupByTypeCacher = exports.FeedDataCacher.extend({
	'override get': function(type, profile, callback) {

		this._super(type+profile, callback);
	},
	'override store': function(type, profile, value, callback) {

		this._super(type+profile, value, callback);
	},
	'override remove': function(type, profile) {

		this._super(type+profile);
	}
});

exports.GroupFeedsCacher = exports.JSONFSCacher.extend();