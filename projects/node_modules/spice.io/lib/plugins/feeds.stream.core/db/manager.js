var utils 	     = require('sk/node/utils'),
Janitor      = require('sk/core/garbage').Janitor,
models = require('./models');


var PromotionsDelegate = require('./delegates/promotions').PromotionsDelegate,
FeedDelegate = require('./delegates/feeds').FeedDelegate;


function cleanUpDatabase(mongodb) {
	var db = mongodb.db;
	
	//do some map-reduce cleanup (for now)
	db.collectionNames(function(err,result) {
		if(err) return;
		
		result.forEach(function(tmp) {
			if(!tmp) return;

			if(tmp.name.indexOf("tmp.mr.map") > -1) {
				//notice since this SHOULDN'T happen
				console.warn("removing old mapreduce collection: "+tmp.name);
				tmp.name = tmp.name.replace("spice.","");
				
				var collection = mongodb.collection(tmp.name);
				
				collection.drop(function(){});
			};
		})
	})
}    


var DBManager = function(plugin) {
	var appModels = models(plugin.database);
	
	
	var db = this.db = appModels.db,

	//established promotions                                
	c_estPromotions = db.collection('feed.promotion.est'),   

	
	//RAW statistics that get broken down after a duration of time
	c_statRecordings	= db.collection('statistics.recorded'),
	
	//summarized statistics
	c_statSummary		= db.collection('statistics.summary'),

	//contains cached data that get spit back to user. this usually sticks around for data that doesn't get updated often.
	c_feedData    = db.collection('feed.data');    
		
	// cleanUpDatabase(db);  
	
	var self = this;
	                                      
	//controls the stream data that comes in
	this.feeds		   = new FeedDelegate(plugin, this, appModels.SpiceAppFeedInfo, c_feedData);
	
	//controls the promoted content with urls
	this.promotions    = new PromotionsDelegate(plugin, this, c_feedData, appModels.PromotedItemsModel);
		
}        


module.exports = DBManager;