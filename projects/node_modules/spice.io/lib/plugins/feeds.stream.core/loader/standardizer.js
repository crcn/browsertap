logger = require('winston').loggers.get('feeds.stream.core'),
sprintf = require('sprintf').sprintf;


module.exports = function() {

	var self = this;
	
	//standardizes content so that:
	//- no text has html
	//- any images, urls, etc. are represented as media
	contentStandardizers = {};
	
	//passed from standardizeFeedItem. runs through all standardizers
	function standardizeFeedItem2(item, standardizers) {

		for(var i = standardizers.length; i--;) {
                                          
			var standardizer = standardizers[i];         
			
			standardizer.standardize(item);
		}
	}
	
	//standardizes a feed item
	this.standardizeFeedItem = function(item) {


		var standardizers,
			defaultStandardizer  = self.getContentStandardizer('default');

		item.media = item.media || []; 

		//first go through the standardizers specific to the service. Maybe a bit reduntant, but it keeps
		//the code clean, and uniform for really augmenting data quickly. Could have used "Augment" naming conventions, but 
		//there's already ANOTHER chunk of code that does that when items become popular.
		if(standardizers || (standardizers = self.getContentStandardizer(item.service))) {
                                  
			standardizeFeedItem2(item, standardizers);
		}                                           
		
		//now run through the DEFAULT standardizers. One should be looking for urls under the nectars plugin, but I guess
		//we should check... wtf ever >.>
		
		if(defaultStandardizer) {

			standardizeFeedItem2(item, defaultStandardizer);     
		}
		else {

			logger.warn('default standardizer does NOT exist!');
		}
		
		var usedMedia = {}, usedMatches = {};

		//finally, we need to run through the media and make sure there aren't any duplicate matches. otherwise we need to remove
		//items. this happens especially to services such as youtube, and others where users will be the link in their text, which also
		//winds up in the link, so video media gets added twice.
		if(item.media.length) {
                                                                       
			for(var j = item.media.length; j--;) {

				var md = item.media[j],       

				//uid = video+http://youtube.com/fsdfsaf
				uid = md.type+md.link;  
				
				//are goodies present? then don't augment then tell the server not to load anymore data!
				if(md.type == 'video' || 
				   md.type == 'image' || 
				   md.type == 'audio') {

					item.augment = false;
				}

				//get rid of it
				if(usedMedia[uid]) {

					item.media.splice(j, 1);
				}                        
				else {
                                                     
					//matches are items in text. if there are more than one of the same, it'll screw up the HTML       
					if(md.match) {
          
						if(usedMatches[md.match])
						delete md.match;       
						else
						usedMatches[md.match] = 1;

					} 
					usedMedia[uid] = 1;
				}
			}
		}       
		//remove the item media if there isn't any.      
		else {

			delete item.media;
		}
	}
	
	//returns the content standardizer based on the name
	this.getContentStandardizer = function(service) {
          
		return contentStandardizers[service];
	}
	
	//adds a content standardizer. default if service is not provided (checks against EVERYTHING)
	this.addContentStandardizer = function(standardizer) {

		logger.verbose(sprintf('adding content standardizer: %s', standardizer.service || 'default'));
                                            
		standardizer.service = standardizer.service || 'default';
		
		if(!contentStandardizers[standardizer.service]) contentStandardizers[standardizer.service] = [];
		

		contentStandardizers[standardizer.service].push(standardizer);

	}
}