/** 
 * managers subscriptions for email clients, including added / removed hooks.
 */


var dateformat = require('dateformat');

/* 


var params = {

	defaultTemplate : './web/template.mu',
	maxItems
}

*/


 exports.plugin = function(router, params)
 {
	
	//oh god this is fugly
	// require('leche.core/server/beans/template.core').plugin(router, { dirs: process.cwd() })
	// this.require('')
	this.require('fig');

	if(!params.maxArticles) params.maxArticles = 30;
	if(!params.defaultTemplate) throw new Error('A default newsletter template must be provided');
	
	console.log('Setting newsletter template to %s', params.defaultTemplate);
	
 	
 	router.on({

 		/**
 		 */

 		'push -pull fig': function(fig) {
 			require('./views')(fig);
 		},


 		/**
 		 */
 		
 		'collect subscription/handler': function(req, res)
 		{
 			res.end({

 				/**
 				 * the type of subscription handler: twitter, email, facebook, etc
 				 */
 				
 				type: 'email',


				/**
				 * interval in days. Fire off when newsletter fires off
				 */

				cron : '* * * * * *',
				// cron: '00 00 23 * * *',


 				/**
 				 * called when a new subscription is ready
 				 */

 				notify: function(subscriber, callback)
 				{
 					console.log('Loading article for %s', subscriber.value);

					subscriber.loadNewsletterArticles({ afterDate: subscriber.lastSentAt, count: params.maxArticles }, function(response)
					{

						console.log('Sending newsletter to %s', subscriber.value);
						
						
						var articles = response.result;
						
						//unable to load, or no new stuffs
						if(!articles || !articles.length) {
							console.error('No new articles to send to %s', subscriber.value);
							console.log(response);
							return callback();
						}
						
						var currentTime = dateformat(new Date(), 'mmmm, dd, yyyy');
						

						var ops = {
							tpl: params.defaultTemplate,
							currentTime: currentTime,
							contact: subscriber.value,
							title: subscriber.group.name,
							description: subscriber.group.description,
							curatedBy: subscriber.group.profile.displayName || subscriber.group.profile.fullName || subscriber.group.profile.firstName,
							articles: articles
						};

						if(params.unsubscribeUrl) {
							ops.unsubscribeUrl = params.unsubscribeUrl + "?subscriber=" + subscriber._id + "&group="+subscriber.group._id;
						}

						
						var nv = new router.views.NewsletterView(ops),
						body = '';

						nv.send({
							router: router,
							'respond': function(){},
							'write': function(chunk)
							{
								body += chunk;
								
							},
							'end': function(chunk)
							{
								if(chunk) body += chunk;

								router.request('send/email', {
									to: subscriber.value,
									subject: sprintf('Team Digest - %s - %s', subscriber.group.name, currentTime),
									body: body
								}).success(function(response)
								{
									callback();
								}).pull();
							}
						})
						
						
					});
 				},

 				/**
 				 */

 				validate: function(subscriber, callback)
 				{

 					//regexp check
 					callback(!subscriber.value);
 				}
 			});
 		}
 	});

 }