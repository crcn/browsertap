var Manager = require('./manager'),
vine = require('vine'),
Structr = require('structr'),
logger  = require('winston').loggers.get('feed.service.core'),
sprintf = require('sprintf').sprintf,
outcome = require('outcome');

exports.plugin = function(router) {


	var manager = new Manager().wrap();

	function testAccount(accountsCheck, feed, account) {

		var successCheck = !accountsCheck;

		if(!successCheck)
		for(var i = accountsCheck.length; i--;) {

			if(successCheck) break;

			var check = accountsCheck[i];

			if(check.length == 24) {

				successCheck = account._id.toString() == check;
			}
			else {

				successCheck = feed.service == check;
			}
		}

		return successCheck && feed.service == account.type;
	}

	/*manager.transformer.add({
		test: function(ops) {
                                    
			return false;
			
		},
		feeds: function(ops, on) {
                            
			var req = ops.req,
			feeds = ops.feeds,
			accountsStr = req.data.accounts,
			allAccounts = false;

                                  

			accountsCheck = accountsStr != 'all' ? accountsStr.split('+') : null;;


			var moarFeeds = []; 
			                  

			var hasRoute = req.forward('social/accounts', function(response) {

				if(response.errors) return on(false, ops.feeds);

				var accounts = response.result;    
				                     


				for(var j = feeds.length; j--;) {

					var feed = feeds[j];                 

					for(var i = accounts.length; i--;) {

						var account = accounts[i];
						                    
						
						if(testAccount(accountsCheck, feed, account)) {

							var newFeed = Structr.copy(feed);

							newFeed.account = account;
							newFeed.data.account = account._id.toString();

							moarFeeds.push(newFeed);
						}
					}
                      
					//what?? GOD FUCKING DAMNIT CRAIG>>> WRITE THEM COMMENTS (from craig, love craig)
					//if(i == -1) moarFeeds.push(feed);
				}   
				                                  

				callback(moarFeeds);
			});
			
			if(!hasRoute) {

				callback(ops.feeds);
			}
		}
	});*/

	router.on({

		/**
		 */

		'push \
		init': function() {

			router.on({
				
				/**
				 */

				'push -collect feeder': manager.feeder.wrap().add,

		
				/**
				 */

				'push -collect social/service': manager.add
				
				
			});
		},


		/**!
		 * Identifies a feed, and returns information about it. The input can be a url, twitter hash tag, etc. 
         *
		 * Here are some examples:
		 *
		 * - http://cliqly.spice.io/feed/identify?pretty&feed=http://engadget.com
		 * - http://cliqly.spice.io/feed/identify?pretty&feed=http://www.youtube.com/results?search_query=yahoo&aq=f
		 *
		 * @example /feeds/identify?feed=http://engadget.com        
		 * @collection feeds  
		 * @displayName identifyFeed     
		 */

		'pull \
		-hook \
		feed/identify OR \
		feed/identify/:service/:category/:action/:q OR \
		feed/identify/:service/:action/:q OR \
		feed/identify/:action/:q OR \
		feed/identify/:feed': function(req, res, mw) {
   
			logger.verbose('Identifying feeds');                           
			
			function onFeeds(api) {
                                
				logger.verbose('Identified feeds');   
				
				req.identifiedFeeds = api.result() || [];

				if(!req.identifiedFeeds.length) return vine.error("No feeds provides").end(res); 
				
				if(!mw.next()) api.end(res);	
			}

			var d = mw.flattenData();

			
			if(!d.feeds && !d.feed) {


				logger.verbose('Feeds is NOT set - finding from params / query');   
                          
				manager.feeder.feeds({ service: d.service || '*', 
				action: d.action, 
				category: d.category || 'default', 
				data: d }, req, function(feeds) {

					onFeeds(vine.result(feeds || []));
				});

			} else {
                       
				var feeds = (d.feed || d.feeds).split(','),
				numRunning = feeds.length,
				identified = []; 
				
				
				for(var i = feeds.length; i--;) {

					manager.feeder.feeds({ feed: feeds[i], data: d }, req, function(feeds) {
                       
						identified = identified.concat(feeds);
						
						if(!(--numRunning)) {

						 	onFeeds(vine.result(identified));
						}                                   
						
					})
				} 
			}
		},
		
	})
}