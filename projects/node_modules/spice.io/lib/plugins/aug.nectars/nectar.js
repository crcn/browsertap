var shortUrls = require('./shortUrls').services;

function getShortUrlMedia(matches,url)
{                
	return {};
	// return url;   
}         

function getDefaultMedia(matches,url) 
{                        
	return {};
	// return {url:url};          
}






var urlHandlers = 
[ 
{
	check:{
		domain:'twitgoo.com'
		,test:/com\/(\w+)/  
	} 
	,type:'image'
	,getMedia:function(matches,url)
	{
		return {regular:{link:'http://twitgoo.com/show/img/'+matches[1]}};
	}
}, 
{
	check:{
		domain:'imgur.com'
		,test:/com\/(\w+)\/?\.?(\w+)?/   
	}
	,type:'image'
	,getMedia:function(matches,url)
	{                                              
		var ext = matches[2] || 'jpg';
		                       
		return {regular:{link:'http://imgur.com/'+matches[1]+'m.'+ext},
				large:{link:'http://imgur.com/'+matches[1]+'.'+ext},
				square:{link:'http://imgur.com/'+matches[1]+'s.'+ext}};
	}
},           
{           
	check:{
		domain:'twitpic.com'
		,test:/com\/(\w+)/  
	}     
	,type:'image'
	,getMedia:function(matches,url)
	{                                   
		var id = matches[1]
		return {regular:{link:'http://twitpic.com/show/thumb/'+id},
				large:{link:'http://twitpic.com/show/large/'+id},
				square:{link:'http://twitpic.com/show/mini/'+id}};
	}
},
{           
	check:{
		domain:'yfrog.com'
		,test:/com\/(\w+)/  
	}     
	,type:'image'
	,getMedia:function(matches,url)
	{                                             
		var id = matches[1]
		return {regular:{link:'http://yfrog.com/'+id+':medium'},
				small:{link:'http://yfrog.com/'+id+':small'}};
	}
},
{
	check:{
		domain:'lockerz.com'
		,test:/com\/s\/(\w+)/  
	}     
	,type:'image'
	,getMedia:function(matches, url)
	{                           
		return {regular:{link:'http://api.plixi.com/api/tpapi.svc/imagefromurl?url='+escape(url)+'&size=medium'},
				large:{link:'http://api.plixi.com/api/tpapi.svc/imagefromurl?url='+escape(url)+'&size=big'},
				small:{link:'http://api.plixi.com/api/tpapi.svc/imagefromurl?url='+escape(url)+'&size=small'}};
	}
},
{
	check:{
		domain:'vimeo.com'
		,test:/com\/(\d+)/  
	}   
	,type:'video'
	,getMedia:function(matches,url)
	{                                           
		var id = matches[1]
		return {link:url,html:'<iframe src="http://player.vimeo.com/video/'+id+'" width="640" height="385" frameborder="0"></iframe>'};
	}
},
{
	check:{
		domain:'default'
	}       
	,type:'url'
	,getMedia:getDefaultMedia
},
{
	extension:['jpg','jpeg','gif','png','tiff','bmp']    
	,type:'image'
	,getMedia:function(url)
	{
		return {link:url,regular:{link:url}};
	}
},
{
	extension:['mp4','mp3','m4a','aac']        
	,type:'audio'
	,getMedia:function(url)
	{
		return {link:url};
	}
},
{
	extension:['flv','mov','avi','mkv','mpeg','mpg','ogg']  
	,type:'video'
	,getMedia:function(url)
	{
		return {link:url};
	}
},
{
	extension:['pdf']         
	,type:'document'
	,getMedia:function(url)
	{
		return {link:url};
	}
}                          
];                                   

//add the short urls 
for(var i in shortUrls)
{
	var service = shortUrls[i];
	
	//unshift incase we have a NEW handler
	urlHandlers.unshift({
		check:{
			domain:shortUrls[i]
		}
		,type:'shortUrl'
		,getMedia:getShortUrlMedia 
	});
}        
         

function getMedia(factory, matches, url, match, type)
{                
	if(!factory) return [];
	
	var media = factory(matches,url);
	
	media = media instanceof Array ? media :  [media];
	
	for(var i = 0; i < media.length; i++)
	{
		var md = media[i];
		if(type) md.type = type || 'url';  
		md.link = md.link || url || match;//.indexOf('://') > -1 ? url : 'http://'+url;      
	}
	                               
	                 
	//we only want ONE match. the match is used to replace a text item with the link given
	if(match) md.match = match;      
	                       
	
	return media;                                
	// return {data:,type:type || 'url',match:url};
}

function getDomain(url)
{	
	var domain = url.match(/(?:www\.)?(\w+(\.\w+)+)/);
	
	if(!domain) return url;
	
	return domain[1];	
}

function removeSub(url)
{
	var parts = url.split('.');     
	parts.shift();
	return parts.join('.');
}


function getExt(url)
{
	var ext =  url.match(/(\w+)(\?.*)?$/);
	return ext ? ext[1] : null;
}

var NectarRouter = function(router)
{                                       
	var nectars = {domain:{},extension:{}};    
	
	var services = [],
	s = this;

	
	function defaultAugmentor(data, matches, url, callback)
	{                                                                

	    //first off... is there a suitable image already in place?
		if(data.media)
		for(var i = data.media.length; i--;)
		{
			var md = data.media[i];
			if(md.type == 'image')
			{
				if(md.width > 200 && md.height > 200) return callback(true);
			}
		}   

		//no images,videos,audio
		if(url.search(/\.(jpg|gif|png|tiff|psd|jpeg|mov|avi|wav|flv|mp3|ogg|mp4)/) > -1)
		{
			return callback(true)
		}

		
		//use diffbot
		router.request('scrape/article').query(url).success(function(response)
		{
			
			if(response.errors || response.result.error) return callback(true);
			
			var article = response.result;
			
			//the requested url MIGHT have been redirected to a new url, so we need to check for that. This applies
			//especially for short urls.
			// if(url != reqUrl && fbv.keys.indexOf(reqUrl) == -1) fbv.keys.push(reqUrl);
			
			
			callback(false, { type:' article', 
							  link: article.url, 
							  label: article.title, 
							  text: article.text, 
							  media: article.media });
			
		}).pull();
		//NO, there isn't. Let's load a good image now.
		/*readlyBalancer.loadReadly(url, function(data)
		{
			if(data.error && (!data.media || data.media.length == 0)) return callback(true);

				var reqUrl = data.url;

			//the requested url MIGHT have been redirected to a new url, so we need to check for that. This applies
			//especially for short urls.
			// if(url != reqUrl && fbv.keys.indexOf(reqUrl) == -1) fbv.keys.push(reqUrl);

			var mdd = data.media,
				media = [];


			callback(false,{ type:' article', 
							 link: reqUrl, 
							 label: data.title, 
							 text: data.content, 
							 media: data.media, 
							 uid: data.uid });
		});*/
		
		

	}
	
	
	this.getAugmentor = function(url)
	{
		//add http:// if it doesn't exist.
		if(url.indexOf("://") == -1)
		{
			url = "http://"+url;
		}
		
				
		//matches:
		//digg.com -> digg
		//google.co.uk -> google.co
		//espn.go.com -> espn.go
		// var domain = url.match(/(?:www\.)?((?:\w+\.)?\w+)\.\w+.*/)[1];

		//matches:
		//www.google.com -> google.com
		//bit.ly -> bit.ly        
		var domain = getDomain(url);   

		//matches:
		//digg.com -> digg
		//google.co.uk -> google
		//espn.go.com -> go
		// var domain = url.match(/(?:wwww\.)?(\w+)\.\w+.*/)[1];  
		var handler = nectars.domain[domain] || nectars.domain[removeSub(domain)]
		,matches;          
		
		
		if(handler && handler.check)
		{
			for(var i = handler.check.length; i--;)
			{
				
				if(matches = url.match(handler.check[i])) break;
			}
			
		}
		                                    
		
		if(!handler || (handler.check && handler.check.length && !matches))
		{
			var ext = getExt(url);

			if(ext)
			{
				handler = nectars.extension[ext];
			}          
			
			
			if(!handler)
			{
				handler = nectars.domain.default;
			}         
			
		}
		
		
		return {handler:handler,matches:matches};
	}
	
	this.readability = function(data,url,callback)
	{
		if(!callback)
		{
			callback = url;
			url = data;
			data = {};
		}
		
		if(!url)
		{
			console.warn("cannot augment data because url doesn't exist!!");
			console.warn(JSON.stringify(data));
		}
		
		var hd = s.getAugmentor(url || '');
		
		hd.handler.augment(data, hd.matches, url, callback);
	}
	
	this.getAugmentedData = function(url)
	{                        
		var data = s.getAugmentor(url);

		//if the check DOES NOT exist OR the url passes the handler match, then
		//return the result with the matches
		
		if(data.matches)
		{
			return getMedia(data.handler.getMedia,data.matches,url,url,data.handler.type);
		}           
		else
		{
			return getMedia(data.handler.getMedia,url,null,url,data.handler.type);
		}
	}  

	this.addNectars = function(target)
	{                      
		target.forEach(function(nectar)
		{         
			if(nectar.check)
			{
				var checks = nectar.check instanceof Array ? nectar.check : [nectar.check],
				nc;
				
				checks.forEach(function(check)
				{
					nectars.domain[check.domain] = nc = {};
					if(check.test) nc.check = check.test instanceof Array ? check.test : [check.test];
					nc.getMedia = nectar.getMedia;
					nc.augment = nectar.augment || defaultAugmentor;
					nc.type = nectar.type;
					
					
					if(check.domain != 'default') services.push(check.domain);
				})
			}
			else
			{
				var extensions = nectar.extension instanceof Array ? nectar.extension : [nectar.extension],
				nc;
				extensions.forEach(function(ext)
				{
					nectars.extension[ext] = nc = {};
					nc.getMedia = nectar.getMedia;   
					nc.augment = nectar.augment || defaultAugmentor; 
					nc.type = nectar.type;
				});

			} 
		});
	}            

	this.getServices = function()
	{
		return services;
	}

	this.addMedia = function(media,url)
	{
		var md = this.getAugmentedData(url);
		
		if(md instanceof Array)
		{
			for(var i = 0; i < md.length; i++)
			{
				media.push(md[i]);
			}
		}
		else
		if(md)
		{
			media.push(md);
		}
		
	}
	
	
	s.addNectars(urlHandlers);
}   


exports.Router = NectarRouter;   
exports.shortUrls = shortUrls;