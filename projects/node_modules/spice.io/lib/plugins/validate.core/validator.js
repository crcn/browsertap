var beanpoll = require('beanpoll'),
structr = require('structr');



var Messenger = structr({

	'override start': function() {		

		//the data to return as a response - sanitized.
		this.sanitized = this.request.sanitized = this.request.query.__sanitized || {};

		this._super();
			
		
	},

	/**
	 */
	
	'_next': function(middleware) {

		var message = this.request;

		message.name = this.router.parse.stringifySegments(this.current.path.segments);

		//key to evaluate
		message.key     = message.property = this._findKey();
		
		//skip if null?
		message.passive = middleware.tags.passive;

		message.optional = middleware.tags.optional;

		//the property to assign to as a sanitized string
		message.assign = middleware.tags.assign || message.key;

		message.value  = message.query[message.key] || message.sanitized[message.key] || message.params[message.key];

		var self = this;

		this.__validate(middleware.listener, function() {
			self._onValidated.apply(self, arguments);
		});
	},

	/**
	 */

	'_findKey': function() {
		
		var key = this.current.tags.key || this.request.name,
		ops = key.split('|');

		for(var i = 0, n = ops.length; i < n; i++) {
			if(ops[i] in this.request.query) {
				return ops[i];
			}
		}

		return key;
	},

	/** 
	 * validates the current middleware
	 */

	'__validate': function(validator, next) {

		if(!this.request.value && !this.request.passive) {

			if(this.request.optional) return next();

			return next(new Error(this.request.key + ' is required'));
		}

		
		if(validator instanceof RegExp) {
			
			if(!validator.test(this.request)) return next(new Error(this.request.key + ' is not valid'));

			next();

		} else {


			var ret = validator.call(this, this.request, next);

			if(ret != undefined) {
				
				next(null, ret);

			}

		}

	},

	/**
	 */

	'_onValidated': function(err, newValue) {
		
		//error? we're done.
		if(err) return this.response.error(err);

		var key = this.request.key,
		assign  = this.request.assign;

		this.sanitized[assign] = newValue || this.sanitized[assign] || this.request.query[key];

		//nothing else to evaluate? return
		if(!this.next()) {

			this.response.end(this.sanitized);

		}
	}

}, beanpoll.Messenger);


var Director = structr({
	
	_newMessenger: function(message, middleware) {
        return new Messenger(message, middleware, this);
	}

}, beanpoll.Director);



module.exports = function(router) {
	
	return {
		name: 'validate',
		director: new Director('validate', router),
		router: {
			validate: function(path, query, callback) {
				
				return this.request(path).validate(query, callback);
						
			}
		},
		request: {
			validate: function(query, callback) {

				if(typeof query == 'function') {

					callback = query;
					query = undefined;

				}

				if(callback) this.response(callback);
				if(query) this.query(query);

				return this.dispatch('validate');
			}
		}
	}
}