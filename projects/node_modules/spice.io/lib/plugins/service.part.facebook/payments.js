var utils= require('sk/node/utils'),
	crypto = require('crypto');


exports.plugin = function(router, params)
{
	
	
	function getPaymentHandler(req, res)
	{
		
		var payableItems = {};
		
		function parseSignedRequest(signedRequest)
		{
			var secret = params.clientSecret,
			encodedParts = signedRequest.split('.', 2),
			encodedSig = encodedParts[0],
			payload = encodedParts[1],
			sig = utils.base64.decode(encodedSig),
			data = JSON.parse(utils.base64.decode(payload));
			
			
			if (!data.algorithm || data.algorithm.toUpperCase() != 'HMAC-SHA256') 
			{
				console.error('Unknown algorithm. Expected HMAC-SHA256');
				return null;
			}
			
			var expectedSig = crypto.createHmac('sha256',secret).update(payload).digest('base64').replace(/\+/g,'-').replace(/\//g,'_').replace('=','');
			
			if(encodedSig != expectedSig)
			{
				console.error('Bad signed JSON signature!');
				return null;
			}
			
			return data;
		}
		
		
		
		var handler = {
			service: 'facebook',
			init: function(pih)
			{
				payableItems = pih;
			},
			getPaymentDialogUrl: function(data)
			{
				return 'http://www.facebook.com/dialog/pay?app_id='+params.clientId+ '&order_info='+escape(data.orderInfo) + '&redirect_uri='+escape(data.redirectUrl);
			},
			getPayments: function()
			{
				
			},
			payments_get_items: function(req, data, callbacks)
			{
				var orderInfo = JSON.parse(data.order_info);
					
				payableItems.pay(orderInfo, function(err, item)
				{
					if(err) return callback(err);
					
					item.price = Math.round(item.price * 10)
					
					var resp = {
						content: [item],
						method: data.method
					}
										
					callbacks.handshake(false, resp);
				});
			},
			payments_status_update: function(req, data, callbacks)
			{
				var details = JSON.parse(data.order_details);
				
				if(details.status == 'placed')
				{
					callbacks.handshake(false, {
						content: {
							status: 'settled'
						},
						order_id: req.order_id,
						method: data.method
					});
				}
				
				//confirmation
				else
				{
					var items = details.items,
						converted = [];
					
					for(var i = items.length; i--;)
					{
						var item = items[i];
						
						converted.push({
							title: item.title, 
							description: item.description,
							price: item.price / 10
						})
					}
					
					callbacks.handshake(false, {
						content: {
							status: 'settled'
						},
						order_id: req.order_id,
						method: data.method
					});
					
					callbacks.settled({
						user:{
							userid: req.user_id
						},
						items: converted
					});
					
					
				}
				
				
			},
			handlePayment: function(data, callbacks)
			{
				var req = parseSignedRequest(data.signed_request);
				
				if(!req) return callbacks.handshake(true);
				
				var method = handler[data.method];
				
				
				if(!method)
				{
					console.error('unknown method %s', data.method);
					return callbacks.handshake('unknown method');
				}
				
				method(req, data, callbacks);
			}
		};
		
		
		
		res.end(handler)
	}
	
	router.on({
		'pull paymentHandler': getPaymentHandler
	});
}