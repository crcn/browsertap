 
var vine = require('vine'),
utils = require('sk/node/utils');


module.exports = function(router, SpiceAppGroupModel) {

	var self = this,
		MAX_WATCH_GROUP_AGE = 1000 * 3600 * 24 * 365 * 20;
		
		
	
	this.createNewGroup = function(profile, data) {

		var group = new SpiceAppGroupModel();
		utils.copy(data,group);
		group.profile = profile._id.toString();
		return group;
	}
	
	this.updateGroupAndChildren = function (profile, group, toUpdate, callback) {

		
		//profile must match before updating a group
		if(profile != group.profile) {

			if(callback) callback(true);
			return;
		}
		
		SpiceAppGroupModel.collection.update({ path: new RegExp('^' + group.path)},{ $set: toUpdate }, function (err, result) {

			if(callback) callback();
		})
	}

	this.getGroups = function(search, callback) {
                        
		if(search._id) search._id = search._id;    
		                            
		
		function doSearch() {
                
			SpiceAppGroupModel.find(search).sort('createdAt','ascending').find(function(err, items) {

				callback(err, items/*, SpiceAppGroupModel.collection.bindable(search)*/);
			});
		}                   
		
		//first checkif the parent exists
		if(search.parent) {
                  
			self.getOneGroup({ _id: search.parent }, function (err, group) {

				if(err || !group) return callback(err || true, group);

				doSearch();
			});
		} 
		else {

			doSearch();
		}
	}
	
	
	this.getGroupFeeds = function(search, callback) {

		
		// var cacheKey = groupFeedsCacher.getKey(search);
		
		function onGroupFeeds(toStore, cache) {

			// cacheKey += toStore.groupIds.join('+');
			
			// if(cache) groupFeedsCacher.store(cacheKey, toStore);
			
			callback(vine.result(toStore));
		}
		
		function searchFeeds() {

			self.getGroups(search, function (err, groups) {

				if(err || !groups || groups.length == 0) return callback(vine.error('Unable to load group.'));

				var target = groups[0];

				//now find all the children of that particular group
				self.getGroups({ path: new RegExp('^' + target.path) }, function (err, groups) {

					var feeds = [],
						groupIds = [];

					//traverse the entire tree
					groups.forEach(function (group) {

						groupIds.push(group._id.toString());

						if(group.feeds) {

							feeds = group.feeds.concat(feeds);
						}
					})


					onGroupFeeds({group: target, feeds: feeds, groupIds: groupIds}, true);
				});
			});
		}
		
		searchFeeds();
		
		//to test later. the performance it however is negligible... this might not be needed.
		/*groupFeedsCacher.get(new RegExp('^' + groupFeedsCacher.toRegexSearchableKey(cacheKey)), function(feeds) {

			if(feeds) return onGroupFeeds(feeds);
			searchFeeds();
		})*/
		
		
	}      
	       
	
	this.getOwnerGroup = function(profile, groupId, callback) {
  
		self.getOneGroup({ profile: profileId(profile), _id: groupId }, callback);
	}
	
	this.getOneGroup = function(search, callback) {

		if(search._id) search._id = search._id;
		
		SpiceAppGroupModel.findOne(search, callback);
	}

	this.removeGroup = function(groupId, profile, callback) {

		c_groups.findOne({ _id: groupId, profile: profileId(profile) }, function (err, group) {

			if(err || !group) return callback(err, group);
                                                                            
			//remove the group, AND the children
			c_groups.remove({ path: new RegExp('^' + group.path ) }, function (err, result) {

				callback(false,true)
			});     
		});
	}
	
	
	/*spiceApp.proxy.on({
		'pull oneGroup': function(pull) {

			self.getOneGroup(pull.data, pull.end);
		}
	});*/
	
	function reduceGroupFeeds() {

		var feeds = { },
		feedStats = [];

		function map() {
  
			if(this.feeds)                 
			for(var i = this.feeds.length; i--;) {
              
				var feed = this.feeds[i];  
				
				//provide support for the older versions
				emit(feed.id || feed._id,feed);
			}
		}                                                   

		function reduce(key,values) {
               
			return values[0];
		} 

		SpiceAppGroupModel.collection.mapReduce(map, reduce, function(err, collection) {
         
			if(err) return;  
			    
			collection.find(function (err, cursor) {
              
				function nextFeed(err, feed) {
                                 
					if(!feed) {

						collection.drop(function () { });
						return;
					}                   
					
					/*dbManager.feedDelegate.watchFeed(feed._id, MAX_WATCH_GROUP_AGE, function () {

						cursor.nextObject(nextFeed);
					});*/ 
				}
				
				cursor.nextObject(nextFeed);      
			});   
		});
	}
	
	reduceGroupFeeds();
	
}                                         
    