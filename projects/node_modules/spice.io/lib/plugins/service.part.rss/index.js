var NodePie = require('nodepie'),
net = require('psk/node/io/net'),
findLocation = net.findLocation,
loadRequest = net.loadRequest,
Url    = require('url'),
load = net.loadRequest,             
standardize = require('psk/node/xml/standardize') , 
findFeed = require('psk/node/xml/findFeed').load;

exports.plugin = function(router)
{                   
	function renderNodePie(rawData)
	{
		var link = rawData.getPermalink();

		return {type:'article',
		    label:rawData.getTitle(), 
		    text:rawData.getDescription(),
		    createdAt:rawData.getDate(), 
		    link:link,
			media:[{type: 'url',link:link,match:link}]};
	}

	var service = new (function()
	{
		this.load = function(url, callback)
		{
			loadRequest(url, function(xml)
			{
				try
				{
					var feed = new NodePie(xml);
					feed.init();
					callback(feed.getItems());
				}catch(e)
				{
					console.error('Unable to parse feed: %s', url);
					callback(null);
				}
			});
		}
	}
	)()
	
	function getSocialService(req, res)
	{                  
		var loader = 
		{
			name:'RSS'
			,type:'graph'
			,service: service
			,loaders:
			{
				default:
				{
					feed:
					{
						name: 'Feed',
						renderData: renderNodePie,
						params: {url: {type: 'input'}},
						ignoreMedia: true,
						identify:
						[
						{
							test: [/feed:\/\/.*/,
								  /:\/\/feed/,
								  /.xml((#|\?).*?)?$/] //could be a bad assumption, but look for feed before the url
							,feed: function (match, callback)
							{
								callback(false, {url:match.input});
							}
						}
						,{
							default: true
							,test: [/http:\/\/.*?/]
							,feed: function (match, callback)
							{                                        
								findFeed(match.input, function(err, urls)
								{
									if(err) return callback(err);
									return callback(false, urls);
								})
							}
						  }
						]
						,load:function (data, callback)
						{
							service.load(data.url,function(data)
							{
								if(!data) return callback(true);

								callback(false, data);
							})
						}
					}	
				}
			}
		}

		res.end(loader)
	}
	
	function getContentStandardizer(req, res)
	{
		res.end({ standardize: standardize.standardizeFromHtml, service: 'rss' });
	}
	
	router.on({                              
		'collect content/standardizer': getContentStandardizer, 
		'collect social/service': getSocialService      
	})
}




