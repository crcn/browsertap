var fs  = require('fs'),
path    = require('path'),
exec    = require('child_process').exec,
logger  = require('winston').loggers.get('bootstrap'),
sprintf = require('sprintf').sprintf,
traverse = require('traverse'),
structr  = require('structr');

exports.plugin = function(router, params) {
	
	var loader   = this,
	pm           = loader.params(),
	name         = pm.name,
	version      = pm.version,
	type         = String(pm.type).toLowerCase(),
	config       = pm.configPath,
	rootDir      = pm.rootDir || process.cwd(),
	plugins      = pm.plugins,
	scope        = pm.scope || [];

	structr.copy(loadConfig(pm), pm);


	if(type != 'slave' && type != 'master') throw new Error("Server must be a slave, or master");


	process.env.APP_NAME        = name + '-' + type;
	process.env.MASTER_APP_NAME = name + '-master';   
	process.env.SLAVE_APP_NAME  = name + '-slave';




	traverse(plugins).forEach(function(x) {
		try {
			if(typeof x == 'string' && x.substr(0,1) == ".") {
				this.update(fs.realpathSync(rootDir + "/" + x));
			}
		} catch(e) {

		}
	})



	//load the additional plugins
	loader.
	factory(function(module, options, params, loader) {
		logger.verbose(sprintf('loading bean %s', params.__name));
		return module.plugin.call(loader, options, params, loader);
	}).
	params({
		'daisy': {
			'name': process.env.APP_NAME,
			'transport': {
				'rabbitmq': {
					'host': pm.rabbitmq.host
				}
			},
			'scope': [process.env.MASTER_APP_NAME, process.env.SLAVE_APP_NAME, 'thyme'].concat(scope)
		},
		'spice.io.core' : {
			name: name,
			version: version
		}
	}).
	paths(__dirname + '/plugins').
	paths(__dirname + '/node_modules').
	require('beanpoll-cache','validate.core', 'bean.database.mongo').
	require(plugins).
	require('system.core', 'daisy','spice.io.core');


	if(type == 'master') {
		loader.require('beanpoll-http');
	}


	router.on({

		'push init': function() {

			//bind
			router.push("init/" + type);
			router.on("pull init/" + type, function(req, res) {
				res.end(true);
			});
		}
	});
}


function loadConfig(params) {


	var cfg = JSON.parse(fs.readFileSync(params.config || '/usr/etc/' + params.name + '/config.json', "utf8"));

	return cfg[process.env.NODE_ENV || 'debug'];


}