var RemoteModel = require('./remote'),
Collection = require('./collection'),
vine = require('vine'),
concrete = require('./concrete');
    

module.exports = RemoteModel.extend({
	

	/**
	 * id does not exist? it's new.
	 */

	'isNew': function()
	{
		return this.doc._id == undefined;
	},

	/**
	 */

	'collection': function(collectionName, model, search)
	{
		//root, or relative
		var path = collectionName.substr(0,1) == '/' ? collectionName : this._path() + '/' + collectionName;

		return this['__' + collectionName] || (this['__' + collectionName] = this.newModel('Collection', { path: path, Model: model, parent: this, doc: search }));
	},

	/**
	 */

	'save': function(doc, callback)
	{
		if(typeof doc == 'function')
		{
			callback = doc;
			doc = {};
		}

		if(!doc) doc = {};

		if(this.parent) doc.parent = this.parent.get('_id');

		this._set(doc);

		var isNew = this.isNew(), self = this;


		function onSave(err, result)
		{
			if(callback) callback(err, result);

			if(isNew && self._collection) self._collection._add(self);
		}

		this.load( isNew ? 'POST' : 'PUT', this.doc, onSave);
		return this;
	},

	/**
	 */
	
	'remove': function(onRemove)
	{                      
		console.log("Malt remove");     
		                                   
		
		this._pull('DELETE', this.removeData(), onRemove);


		//remove from the collection if it exists.
		if(this._collection) this._collection._remove(this.doc);

		this.change('remove');

		return this;
	},

	/**
	 */

	'removeData': function()
	{
		return null;
	},

	/**
	 */

	'override _load': function(method, data, callback)
	{
		if(!data) data = {};

		if(this.isNew()) data = this.doc;


		return this._super(method, data, callback);
	},


	/**
	 */

	'_path': function()
	{
		if(this.isNew()) return this.path;
		return this.path + '/' + this.doc._id;
	},

	/**
	 */

	'_onResponse': function(response)
	{
		if(response.result)
		{
			this._set(response.result instanceof Array ? response.result[0] : response.result);
		}

	},

	/**
	 */

	'override _set': function(doc)
	{
		this._super(doc);

		// this.loaded = this.doc._id != undefined;
	},

	/**
	 */

	'static find': function(query, callback)
	{
		if(typeof query == 'function')
		{
			callback = query;
			query = {};
		}

		var path = this.prototype.path;


		if(query._id)
		{
			path += '/' + query._id;
			delete query._id;
		}

		var model = this.prototype.model('Collection');

		var col = new model( { path: path, Model: this });


		col.load(query).subscribeOnce('reset', function(e)
		{
			if(callback) callback(col);
		});

		return col;
	},

	/**
	 */

	'static findOne': function(query, callback)
	{

		this.find(query, function(collection)
		{
			callback(collection.item(0));
		});
	},

	/**
	 */

	'toJSON': function()
	{
		return this.doc;
	}
}, concrete.partial);




