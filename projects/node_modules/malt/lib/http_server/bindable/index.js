var Structr = require('structr'),
Janitor = require('sk/core/garbage').Janitor;

module.exports = Structr({
	
	/**
	 */

	 '__construct': function()
	 {
	 	this._bindings = {};
	 },

	 /**
	  */

	 'subscribe': function(listeners)
	 {
	 	var jan = new Janitor();

	 	for(var type in listeners)
	 	{
		 	jan.addDisposable(this.subscribe(type, listeners[type]));
		}

		 return jan;
	 },

	 /**
	  */

	 'second subscribe': function(property, callback)
	 {
	 	var collection = this._bindings[property] || (this._bindings[property] = []);

	 	collection.push(callback);

	 	return { 
	 		dispose: function()
	 		{
	 			var i = collection.indexOf(callback);

	 			if(i > -1) collection.splice(i, 1);
	 		}
		};
	 },

	 /**
	  */

	 'subscribeOnce': function(property, callback)
	 {
	 	var disp,
	 	onChange = function()
	 	{
	 		callback.apply(null, arguments);

	 		disp.dispose();
	 	}

	 	return disp = this.subscribe(property, onChange);
	 },

	 /**
	  */

	 'change': function()
	 {
	 	var args = Array.apply([], arguments);

	 	var collection = this._bindings[args.shift()];

	 	if(collection)
	 	for(var i = collection.length; i--;)
	 	{
	 		collection[i].apply(null, args)
	 	}
	 },

	 /**
	  */

	 'dispose': function()
	 {
	 	this._bindings = [];
	 }
})