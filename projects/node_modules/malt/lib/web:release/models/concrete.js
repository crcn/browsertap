var AbstractModel = require('./abstract');

exports.partial = {

	/**
	 */

	'override __construct': function(doc, ops)
	{
		this._explicit = {};


		for(var prop in this)
		{
			if(this[prop] && this[prop].explicit)
			{
				this._bindFunc(prop);
			}
		}


		this._super(ops);

		this.doc = {}
		this._set(doc);


		if(this._schema) this._schema.apply(this);
	},

	/**
	 */

	'_bindFunc': function(prop)
	{
		this._explicit[prop] = 1;

		var self = this,
		oldFunc = this[prop];

		this[prop] = function(value)
		{
			if(arguments.length)
			{
				oldFunc.call(self, value);
				self._setDoc(prop, arguments[0])
			}
			else
			{
				return oldFunc.call(self);
			}
		}

		this[prop].bind = function(callback)
		{
			self.bind(prop, callback);
		}
	},

	/**
	 */

	'get': function(property)
	{
		if(this._explicit[property]) return this[property].call(this);

		return this.doc[property];
	},

	/**
	 */

	'set': function(property, value, ignoreUpdate)
	{
		if(value == this.get(property)) return;

		value = this._schema ? this._schema.set(this, property, value) : value;


		if(this._explicit[property])
		{
			this[property].call(this, value);
		}
		else
		{
			this._setDoc(property, value, ignoreUpdate);
		}

		
	},

	/**
	 */

	'_setDoc': function(property, value, ignoreUpdate)
	{
		//might just be exposing the doc properties
		this.doc[property] = value;

		this.change(property, value);

		//notify any listeners to update 
		if(!ignoreUpdate) this._update();
	},

	/**
	 */

	'bind': function(property, callback)
	{
		var ret = this.subscribe(property, callback);

		if(this.get(property) != undefined) callback(this.get(property));
		return ret;
	},

	/**
	 */

	'_set': function(doc)
	{
		if(!doc) return;

		if(typeof doc == 'object')
		{
			for(var property in doc)
			{
				this.set(property, doc[property], true);
			}	

			// this.change('update');

			this._update();
		}
		else
		{
			this.doc = doc;
		}
	},

	/**
	 */

	'_update': function()
	{
		this.change('update');
	}
};

exports.Model = AbstractModel.extend(exports.partial);