var RemoteModel = require('./remote'),
models = require('./index');

module.exports = RemoteModel.extend({

	/**
	 */

	'override __construct': function()
	{
		this._super.apply(this, arguments);

		this._items = [];
	},
	
	/**
	 */

	'_onResponse': function(response)
	{
		if(!this._items) this._items = [];

		switch(response.method)
		{
			case 'list': return this._list(response.result);
			case 'add': return this._add(this.create(response.result));
			case 'remove': return this._remove(response.result);
			case 'update': return this._remove(response.result, response.result);
			default: return this._list(response.result);
		}
	},

	/**
	 */

	'override _load': function(method, data, callback)
	{
		if(!data) data = this.doc;

		return this._super(method, data, callback);
	},

	/**
	 */

	'toArray': function()
	{
		return this._items.concat();	
	},

	/**
	 */

	'item': function(index)
	{
		return this._items[index];	
	},

	/**
	 */

	'length': function()
	{
		return this._items.length;
	},

	/** 
	 */

	'each': function(callback)
	{
		if(this._items)
		for(var i = 0, n = this._items.length; i < n; i++)
		{ 
			callback(this._items[i], i);;
		}
	},

	/**
	 */

	'add': function(doc)
	{
		var item = this.create(doc);
		item.save();
		this._add(item);
	},

	/**
	 */

	'clone': function()
	{
		return new this.__construct({ path: this._path(), Model: this.Model });	
	},

	/**
	 */

	'create': function(doc)
	{
		if(!doc) doc = {};

		// console.log(item)
		var item = this.newItem(doc);
		item.router = this.router;

		if(!item.path) item.path = this._path();


		//ref back to the collection so we cam remove it silently 
		item._collection = this;

		if(item._set) item._set(doc);

		item.loaded = true;

		if(this.parent) item.parent = this.parent;

		return item;
	},

	/**
	 */

	'newItem': function(doc)
	{
		var clazz = this.model(doc.type || this.path) || this.Model;
		
		return clazz ? new clazz() : doc;	
	},

	/**
	 */

	'_list': function(collection)
	{
		if(!(collection instanceof Array)) collection = [collection];
                                       
		var batch = [];
		
		for(var i = 0, n = collection.length; i < n; i++)
		{
			batch.push(this._add(this.create(collection[i]), true));
		}
		
		this.change('reset', this._items);    
		this.change('batch', batch);
	},

	/**
	 */

	'_add': function(item, skipEmit)
	{
		this._items.push(item);

		if(!skipEmit) this.change('add', item);
		return item;
	},

	/**
	 */

	'_remove': function(item)
	{
		for(var i = this._items.length; i--;)
		{
			var oldItem = this._items[i];

			if(oldItem.doc._id == item._id)
			{
				oldItem.dispose();
				this._items.splice(i, 1);
				return this.change('remove', item, i);
			}
		}

	}

})