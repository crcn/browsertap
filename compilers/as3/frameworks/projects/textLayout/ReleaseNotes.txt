TLF 1.1 Build 604
	* Fix 2609202 SDK-26277 RTE when trying to delete a LinkElement in a RichEditableText control
TLF 1.1 Build 603
	* Fix 2598300 Bad width calculations when doing incremental compose if RichEditableText has no width specified.
TLF 1.1 Build 602
	* Fix 2594609 Poor text delete performance when pasting large blocks of code, selecting all, and deleting
TLF 1.1 Build 599
	* Improve paste performance - fix for [SDK-25793]
TLF 1.1 Build 598
	* Fix SDK-25999 Specifying tabStops on a RichText component does not look correct after integration of TLF 1.1
TLF 1.1 Build 597
	* Performance work - major changes to improve performance in long documents
	* Fix 2568628 assigned SWFContext not used on Argo in all scenarios
	* Fix 2568438 [SDK-25693] TextLineRecycler change for Build543 increased size of Flex's Hello World app using FTE and TextLineRecycler by 250k
	* Fix 2571205 [SDK-25734] TLF: src attribute in <img> tag converts to lower case when using TextConverter.importToFlow with TEXT_FIELD_HTML_FORMAT format
	* Fix 2582917 Security sandbox violation in LinkElement.stageMouseMoveHandler
	* Fix 2565658 Security sandbox violation in ContainerController.getContainerController
	* Fix 2565639 Security sandbox violation in SelectionManager.checkForDisplayed()
Build 595
	* Fix 2537642 Bug, TLF Text: htmlText is not Rendered Correctly (importer issue with implied paragraphs)
Build 594
	* Fix 2537651 Vellum exporters can generate a RTE for InlineGraphicElement objects if the textFlow has not been composed.
Build 593
	* Fix more file headers (2532451).
	* Fix 2532163 (again) now generate digests correctly.
Build 592
	* Fix 2534994, transliteration by keyboard command does not work on the Mac (aborts the IME session).
	* Fix 2532163, update build file for swz generation.
	* Fix 2532451, update some file header comments.
Build 590
	* Fix 2525017 - added range checking to IMEClient getTextBounds to avoid exceptions caused by invalid ranges.  Returns empty rectangle in bad range case.
Build 589
	* Fix 2513232, IME conversion window comes up in the top left corner instead of under the text.
	* Fix 2522271, IME typing doesn't replace selected text.
Build 588
	* Fix 2519851, Pasted paragraph formatting attributes overriding the attributes in the paste-to paragraph. 
Build 584
	* Fix 2520041, empty CompositeOperation causes RTE on undo. Now checks for null textFlow before undoing.
	* Fix 2518217, Undo/Redo not working with composite operations and FlowOperationElement begin handlers. 
	* Fix 2520067, CompositeOperation with mixed direct model changes should fail on undo (but doesn't). Now check for that in canUndo, and the CompositeOperation will not be placed on the undo stack if it's not internally consistent, and all its constituent operations are undoable.
Build 576
	* Fix 2509360 ARGO: Unselectable lines appear while scrolling
	* Fix 2513588 ContainerFormat Operations Lose Previous Changes
Build 575
	* Fix 2511985 Input (space or dead key) can hang TLF.
	* Fix 2499150 - Images are cut off in vertical text due to leading issues.  Fix resolves default Roman and East Asian settings but does not address non-standard ones.
	* Fix 2510835 RTE When composing Flow with no containercontrollers
	* Fix 2511957 RTE calling setSelectionState with positions at textFlow.textLength
Build 574
	* Fix two IME bugs, 2509346 RTE hitting delete key after deleting IME input and 2509509 IME Conversion candidate window is displayed far from target text. 
Build 573
	* Fix 2508389 TextLayoutFormat Importer does not generate error on removed format tag
	* Fix 2508061 RTEs when blockProgression is specified on a DivElement and underlines
Build 572
	* Fix 2507871 ContainerController.getPlacedTextLineBounds calls addChild/removeChild directly instead of calling addTextLine/removeTextLine
Build 570
	* Adding default tab stops for players before Argo that will apply if the tabStops in the TextBlock would otherwise be null. Fixes 2505894. 
	* Fix SDK-24677 Major performance regression in flex 4 text area after 12650
	* Fix 2506177 Asserts when resizing the Argo window or Firefox window with Argo plug-in x385.
	* Fix 2506500 TextFlowTextLineFactory.createTextLines is loosing the swfContext when truncating
Build 569
	* Fix Watson 2504656, IME left in uncommitted state after application is deactivated. Fix is to call compositionAbandoned() on the deactivate event.
	* Fix for 2504162, Change mxml compilation of id property. 
	* Fix 2503331 TextLine Recycling Issues
Build 568
	* Fix 2504032 TCM contextMenu when using the factory and READ_SELECT should not enable the editi clipboard items such as cut and paste
Build 567
	* Fix 2500722 Empty elements inserted via MXML cause RTE
	* Add GlobalSettings.resolveFontLookupFunction - when set allows client to do late change to FontLookup setting
Build 566
	* Fix 2470347, control-Z during IME session doesn't work. Now it ends the IME session on control key down. 
	* Fix 2497992 whiteSpaceCollapse not property applied for inter-paragraph whitespace on text that was compiled from an mxml file.
	* Fix 2500307 TCM shouldn't have contextMenu when read-only (switch when using factory from read-select to read-only)
Build 565
	* Fix 2498059 [SDK-24493] Selection highlighting and caret can dissapear when switching EditingMode in TCM
	* Fix 2496825 Scolling lines via arrow keys in text which is not using Up leading, causes assert.
	* Fix 2496529 Error happens when running TextContainerManagerTest.aliceTCMTest on Argo StandAlone for Mac.
Build 564
	* Fix 2497046. Change to core build file to provide ASDocs in the OpenSource folder instead of compiled into the textLayout.SWC. Also added the manifest file to the textLayout.SWC so that mxml code hinting in Flash Builder can work.
	* Fix 2496983 [SDK-24468] HTML TextConverter converts HREF property to lower-case characters
	* Improvements to Fix 2491878 Page Down and Page Up don't work properly in the linked containers
Build 563
	* Fix 2496260 HTML Import Performance Improvements
	* Fix 2497051 Rename GlobalSettings.getResourceStringFunction to resourceStringFunction
Build 562
	* Fix 2491878 Page Down and Page Up don't work properly in the linked containers
Build 561
	* Fix 2491514 Bug Fix For 2467353 Disabled TextLineRecycling In Normal Editing
Build 558
	* Fix 2491945 FXGImporter/FXGExporter Not Deleted. These files were never deleted from the code even though they are never used.
	* Fix for 2491564 [SDK-24350] bound links not updating. Turns out if you defined in mxml a TextFlow that had bound children but no contents (textLength = 0), it was normalizing out the bound children. 
	* Fix 2491430 TLF is updating scroll values but not sending scroll event
	* Fix 2489062 RTE in ScrollToRange when range positions are past the end of the flow
	* Fix 2486475 DeleteText Followed By Undo Can Some Paragraph Attributes
	* Fix 2491505 Add FlowOperationBegin/FlowOperationEnd events for Composite Operations
	* Fix 2487639 Some constructors should have code moved to an initialize function for jitting
	* Fix 2487491 add ability to turn off TextLineRecycler for flash pro
	- use TextLineRecycler.textLineRecyclerEnabled
	* Fix 2489004 Use Explicit Existence Testing Instead of Capabilities.version for Argo APIs
Build 557
	* Fix 2487386 Mutating InlineGraphicElement.source while Graphic is loading Fails.
	* Fix 2487386 Fix Watson 2485262, pointFormat not applied when entering text via inline IME.
	* Fix 2485151 Undo fires from right alt-z on Polish programmer's keyboard in Windows
Build 555
	* Fix 2476623 Backspacing Doesn't Remember Pending Attributes
	* Fix 2486448 [SDK-24317] RTE when changing textFlow property on RichEditableText after clicking link in component
Build 554
	* Fix 2484989 FlowOperations Should Not Assume an interactionManager
	* Fix 2418508 Pending Operations Are not Flushed When Next Operation is Called Directly
Build 553
	* Fix 2471400 Drag Selection Backwards and Linked Containers With Overflow in Last Container Fails
Build 552
	* PARB Changes
	- rename UndefineFormatOnElementOperation ClearFormatOnElementOperation
	- rename UndefineFormatOperation ClearFormatOperation
	- rename IEditManager.undefineFormat to clearFormat
	- rename IEditManager.undefineFormatOnElement to clearFormatOnElement
	* Fix 2470595 - StandardFlowComposer.findControllerIndexAtPosition returning incorrect results around zero length containers
	* Rounding changes to APPROXIMATE_TEXTFIELD line spacing
	* Fix 2482280 [SDK-24231] If text field has underline or strikethrough but no text, you get an RTE
	* Fix 2482243 [SDK-24227] RTE When drag selecting TextArea text
	* Fix 2482538 [SDK-24236] Setting boolean TextLayoutFormat properties to "false" makes them true
Build 551
	* Fix 2458310 getCommon*Format should take an optional caller specified range 
	* Fix 2406136 Documentation for concat and concatInHeritOnly on TextLayoutFormat and TabStopFormat is incorrect
	* Fix 2470317 FlowOperationBeginEvent Ignores Operation Modification
	* Add FlowOperationEvent "flowOperationComplete" - sent when an operation or a composite operation has finished
	* Add FlowOperationEvent.level property to indicate when in a composite operation
	* Fix 2468919: Support id on <IMG/> in HTML importer/exporter
Build 550
	* Introduced a new leading model APPROXIMATE_TEXTFIELD which approximates the line spacing behavior of TextField
	* Changed HTML importer so that it does not address the mismatch between TextField and TLF defaults. The client can do so through textFlowInitialFormat 
	* Fix 2472647 HTML exporter should display nicely formatted #RRGGBB color values
	* Fix 2472526 textFlowInitialFormat not being honored by the HTML importer
Build 549
	* Fix 2474053 RTE when using END key when there is an IMG at the end of a TextFlow
	* PARB Changes
	+ GlobalConfiguration changes
	- renamed to GlobalSettings
	- getString renamed to getResourceStringFunction
	- fontMapper renamed to fontMapperFunction
	+ Configuration and IConfiguration changes
	- inlineGraphicResolver renamed to inlineGraphicResolverFunction
Build 548
	* Fix 2477763 Inserting link to text that is not displayed fails.
	* Fix 2477778 Undo or redo on TextFlow with no controllers causes exception
	* Fix (flex issue - no bug #) Make TCM.setText and TCM.setTextFlow focus preserving by calling focusHandler when _hasFocus is true
	* Fix 2412959 No Operation to "undefine" a format.
	- added operations UndefineFormatOperation and UndefineFormatOnElementOperation
	- added IEditManager APIs undefineFormat and undefineFormatOnElement
	* Fix 2475201 Increase maximum allowed values for trackingLeft and trackingRight 
Build 547
	* Fix 2474050 Underline adornment should be on right when locale is Chinese.
	* Fix 2472372 Adornments are lost when lines scroll out of view.
	* Fix 2462178 [SDK-23782] TLF error messages shoud be localizable
	* Fix 2476491 Hitting a select all with more than one container, and then typing sometimes makes text go to the wrong container.
Build 546
	* Fix for 2469708, data binding issue with TLF SpanElement since 0-length spans are pruned from ParagraphElement. Solution is to not merge spans, links, or tcy elements that were added via set mxmlChildren, since they may have data binding applied. Note that zero-length elements left in the text may cause problems when editing; inserted text may appear in the wrong format, for example. This seems preferable to not supporting the feature. 
Build 545
	* Fix 2469183 paddingRight not applied in contentBounds in vertical measured text
	* Fix 2458351 [SDK-23668] TextFlow class marked as final
	* Fix 2464448 Rename package flash.textLayout.acc flash.textLayout.accessibility
	* Fix 2365702 [SDK-22011] Setting TextFlow attributes with out of range values should generate an RTE
	 -When an error is detected the format will no longer be changed.
	 -A number or int format setting will be in error if parseFloat (or parseInt) returns NaN.
	 - Out of range number or int properties will be an error
	 - Invalid enumeration settings will be an error
	 - Property class will have a global “errorCallback” function.  This will default to throwing on error. 
	 - The TLF ITextImporter implementers (for HTML and TLF markup) have a throwOnError setting.  If false the change will be to collect the errors in the errors array along with the other import errors as currently done.  If true then the importer will throw on the first error.  During an import the importers may temporarily replace the errorCallback function
	 - Clients may replace the global errorCallback function.
	 - Properties now treat null as undefined - this is to support flex data binding which sets properties to null with great frequency
	* Extended fix for 2365702 to HTML markup attributes that don't directly map to TLF formats. Also ensured malformed tags and text in HTML markup are not silently ignored.
Build 544
	* Fix underline offset for small point sizes.
Build 541
	* Fix 2448613 Perform truncation even if using explicit lineBreak, or measuring width
Build 540
	* Fix 2469885 Linked Containers Update Failures With Large Changes
Build 539
	* Fix 2468477 SelectionManager.menuSelectHandler should update menu.clipboardItems.delete based on the editingMode.
	* Fix Additional memory leak - the shared TextFlowTetLineFactory was holding on to references to the last flow composed
	* Fix 1874257 Typing always causes a redraw of the entire container
	- ContainerController no longer updates transparent background or scrollRect unless they have changed.
Build 538
	* Fix 2400856 Underline truncated on vertical orientation with default baseline shift.
	* Fix 2467390 composeToController always returns true and is not functioning
	* Fix 2448945 Changing character properties after entering text edit mode can produce mixed results unexpectedly in TLF Text containers.
Build 537
	* Fix 2464521 New paragraph always has default formatting when typing "Enter" at the start of a paragraph
	* Revised HTML importer/exporter to be more compatible with TextField.htmlText. It is more tolerant of malformed input, adds support for some new attributes (letterspacing, kerning, leading, tabstops etc.),
	  and relative font sizes, handles children of unknown elements (instead of completely stripping them out), preserves whitespace, accounts for the difference between TextField and TLF defaults 
	  (e.g., "Times Roman" vs. "Arial" fontFamily), and exports markup that is similar to that returned by TextField.htmlText.
Build 536
	* Fix 2350091 Tab stop positions shift when center and right aligning paragraphs.
	- in FlashPlayer 10.1 and later ONLY a TextLine with tabs on it will not be center or non-start aligned
	- this allows client to setup tabs with alignment as needed and for tabs in all lines to line up
Build 535
	* Fix 2457166 - Underline & strikethru adornments re-added to reused lines.  Adornments are now only added to damaged or new lines.
	* Fix 2363026 - Request to make dominant Baseline Auto value resolution for 270 Rotated text be Ideographic Center. 
	* Fix 2347988 - TCY canceled overriding image with TCY by text.
	* Fix 2384296 ContentBounds Incorrect for right/center aligned text in narrow containers with explicit lineBreaks
Build 534
	* Fix infinite loop deleting and pasting text in multiple containers.
	* Fix 2460189 ContentBounds Incorrect for left/start/center aligned text in containers of RL content with "toFit" lineBreaks
Build 533
	* Fix Modifying InlineGraphic with source set to a DisplayObject doesn't update
Build 532
	* Fix for 2445788 - getTextInRange did not properly return text when text spanned multiple paragraphs.  New code performs proper calculations and returns expected text.
Build 531
	* Fix for 2458403 - TLF default TextLayoutFormat fontFamily is now Arial rather than Times New Roman.
Build 530
	* Fixing bug in how link formats are exported, so colors will be exported in "#" format. 
Build 527
	* Additional fix for 2447819 - ComposeState was also holding onto references - now fixed
	* Performance improvement for flows with multiple containers.  StandardFlowComposer now quickly skips to the first damaged container during compose.
Build 525
	* Redefined IMEStatus constants from simple, raw, converted, etc, to compounds such as SELECTED_RAW, NOT_SELECTED_RAW, SELECTED_CONVERTED and NOT_SELECTED_CONVERTED.
Build 524
	* Fix 2446258 Cursor for first line of bottom aligned text container is incorrect.
	* Fix 2443549 Assertion error when placing graphic after another graphic in TCY.
	* Re-adjustment to Underline and Strikethrough code.  Positioning is more consistent than previous implementation.
	* Fix 2397598 Delete/Clear context menu commands don't work in Vellum containers.  New code properly supports action.
	* API CHANGE: Rename TextConverter HTML_FORMAT to TEXT_FIELD_HTML_FORMAT to better reflect the fact that this is based on the TextField htmlText property.
	* API CHANGE: Removed FXG_FORMAT from TextConverter. This was an old format, it is no longer supported. Use TEXT_LAYOUT_FORMAT instead.
Build 523
	* Integrated first pass implementation of Inline IME support.
Build 522
	* Fix 2441993 tcy improperly rotated in horizontal text.  Issue caused by failure of code to apply rotation of 0 under certain, unknown race conditions.  New code handles all cases and has unified rotation into single, private API.
	* Fix 2446323 paddingRight not taken into account when calculating the contentWidth of measured container
	* Fix for mis-alignment of underline and strikethrough on text.  Placement of UL and ST was inconsistent based on baseline alignment.  New code properly calculates UL/ST on runs of text.  Note that there are still inconsistencies between fonts due to reported values in FontMetrics which cannot be overcome.  However, relative placement within a single font face match regardless of baseline.
	* Fix case in links format where colors that came in as "0x" syntax were also exported via TLF markup as "0x". Now they are normalized to "#" syntax.
	* Fix 2437033 better worded exception when EditManager.deleteNextCharacter called on invalid text (e.g., when called from a FlowOperationEvent).
	* Fix 2434028 Tab key moving focus out of the editor after inserting tab.
	- API change added IInteractionEventHandler.keyFocusChangeHandler
	- TLF no longer sets tabEnabled flag to Containers passed to DisplayObjectController or TextContainerManager.  Client must manage that flag.
	- WinIE requires additional special handling in html wrapper.  See http://ats.macromedia.com/Players/ATS/ATS9AS2/Staging/html/browserHTML/SeamlessTabbing/SeamlessTabbingFalse7.htm
	* Fix 2447482 [SDK-23540] Make flashx.textLayout.container.ContainerController.attachTransparentBackgroundForHit()  public (made it tlf_internal)
	* Fix 2447819 ParcelList keeps reference to controller of last edited component preventing garbage collection
Build 521
	* Fix 2445581 FMR: [SDK-23517] RTE in ParagraphElement (and SpanElement) when setting null mxmlChildren
	* Fix 2432300 Geometry Left not included in contentBounds in vertical text
	* Fix (no bug #) FlowComposeBase.findLineAtPosition was ignoring preferPrevious parameter
	* MARKUP CHANGES: 
	     (1) linkNormalFormat, linkActiveFormat, and linkHoverFormat elements now expect to find the attributes on a child element called TextLayoutFormat. Here's an example of how it looks now: <a><linkActiveFormat><TextLayoutFormat textDecoration="underline"/></linkActiveFormat>Anchor</a>
	     (2) the named <format> element has been removed. You should apply the attributes directly to the element instead.
	* Fix SDK-22792 TLF SelectionManager.computeSelectionIndex runtime error
	* Updated the way color values are exported in TLF markup and FXG to use "#" format instead of "0x". 
Build 519
	* Fix 2431183 FlowElementMouseEvent variables should not be public
	* Fix 2431182 TextLayoutEvent needs a clone function.
	* Fix 2441765 Calling updateToController on uncomposed content generates an error
	* Fix 2420904 Autoscrolling with explicit lineBreaks
	* Fix 2428141 Insertion point should not show when text is scrolled so insertion pt no longer visible (lineBreak=explicit)
Build 518
	* Implementation of code needed to support inline IME (though not the actual implementation of inline IME), searchability and certain missing API's needed to support
	  future accessibility functionality.
	* Fix 2437575 Argument Error in TextBlock.releaseLines when changing NumContainers
	* Fix 2394529 When paddingLeft and paddingRight are set, at the container controller sometimes returns different content widths.
Build 517
	* Fix 2414442 ElementFormat.getFontMetrics needs to be called in proper context
	  replace ITextLineCreator with ISWFContext.  ISWFContext has one method callInContext similar to flex method of the same name
	  replace textLineCreator setters with swfContext setters in IFlowComposer and TextContainerManager
	  Note: ITextLineCreator remains so that TLF test apps compile.  It's completely unused.
Build 516
	* Add new manifest entry for TextLayoutFormat, and remove entries for format, linkNormalFormat, linkActiveFormat, linkHoverFormat, EditManager, SelectionManager, and StandardFlowComposer. 
	  Updated build scripts so the manifest for textLayout_edit is removed. Removed the stub objects for linkActiveFormat, linkNormalFormat and linkHoverFormat, 
	  these are now handled as standard properties in MXMLC. Dynamic import of markup unchanged. Fixed use of ${forkValue} to be consistent in Ant build scripts.
	* Fix 2391771, data from one import is carried over into the following import. The bug happens because of how we are handling the id property. 
	  Problem is that clearing the array does not remove the dynamic properties of the array. Updating the code so that it allocates a bindingArray only if it is used, 
	  instead of allocating once at construction, and clear() now nulls out the previous bindingArray. 
	* Fix 2425075 MAX: When you have multiple containers that a flow goes through, the text will sometimes disappear.
Build 511
	* Fix 2429543: Text doesn't recompose with a change to dominantBaseline... - Issue caused by use of auto value in cached element formats. New code properly resolves auto values for dominantBaseline.
	* Fix 2375158 MAX: Character attributes revert to their default settings when you delete all text.
	* Fix 2424847 MAX: Certain formatting operations in linked flows can result in FlowElement.deleteContainerText getting caught in an infinite loop.
	* Fix 2393374 MAX: If you delete a newline at the end of a text flow and then Undo, TLF has an error.
Build 510
	* Fix 2417461 MAX: Text selection is difficult and flickers in TCM if there is scrolling text
Build 509
	* Fix 2425242 ContentWidth is reported incorrectly for linked containers.
Build 507
	* Fix 2412931 Doc bug - fontSize (and other TextLayoutFormat properties) do not specify the type (number, int, unit etc.)
	* Partial fix 2355904 Scrolling Performance (its improved but there's still a larger piece of work to fully resolve this issue)
	* Fix 2414731 - Reopened with request to make ContainerController attachAllContainers and detachAllContainers tlf_internal
Build 506
	* Fix 2414871 Inconsistent defaults for LinkElement target vs legacy TextField target
	* Fix 2411686 Add a CopyOperation
	* Fix 2413911 Error on Drag Scroll in Empty Container Attached to Vertical TextFlow
	* Fix 2414745 Support class attribute on <p> and <span> tags in HTML_FORMAT. This attribute is mapped to the styleName property.
Build 504
	* Fix 2414833 Honor <TextFormat> settings for implied paragraphs
Build 503
	* Fix 2404882 [SDK-22695] RTE in ContainerController when calling scrollToRange() with int.MAX_VALUE
	* Fix 2414731 make _rootElement property of StandardFlowComposer either protected or tlf_internal
Build 502
	* Fix 2376037 Empty spans with formatting are lost on import
	* Fix 2402561 Change to IFlowComposer.composeToPosition
	- composeToPosition - previously 0 meant compose to the end.  Now <= 0 means not specified.  Any value >= textFlow.textLength means compose to the end.  Default value changed to int.MAX_VALUE
	- updateToController and composeToController are also updated.  <= 0 means not specified.  Any value >= numControllers means compose to the end.  Default value changed to int.MAX_VALUE
Build 501
	* Fix 2395427 HTML importer is adding paragraph breaks for every <B>, <I>, <U>, and <FONT> tag that is not nested in a <P> tag. Implied paragraphs should be shared to the extent possible.
	* Fix 1905291 Workaround for redundant text input events fired after ctrl(cmd)+z and ctrl(cmd)+y
	* Fix 2375077 Container alignment isn't applied correctly to linked containers.
	* Fix 2399806 FMR: TextContainerManager bug and enhancements
	    - TCM.invalidateUndoManager() does not recreate the edit manager if interactionManager.editingMode == EditingMode.READ_WRITE.
	    - EditManager.keyUpHandler should check isDefaultPrevented() and return immediately if true.
	    - Make convertToTextFlowWithComposer() have tlf_internal access?
	* Fix 2380818 Factory/TextFlow Line Placement Mismatch With Vertical Text and Measured Height
	* Fix 2404896 [SDK-22698] TextContainerManager doesnt scroll to range when calling scrollToRange() even though target text isnt visible
	* Fix 2401112 composeToPostion return value can be incorrect.
Build 75
	* Fix 2405832 Right and center aligned text is cueuing off of the longest line of the text container instead of the container itself.
	* Fix 2407287 Drag Selection Can Cause Invalid Reference in ScrollTImerHandler
	* Fix 2344107 Link With Custom EventListener Will Merge
Build 73
	* Fix 2385752 mxmlChildren property in FlowElement classes needs to be read-write in order to work with MXML states
Build 72
	* Fix 2388614 Typo in TEXT_LAYOUT_MARKUP const in TextClipboard.as
Build 54
	* Fix 2380949 Double-click text selection is unpredictable
	* Fix 2380962 Text disappears after resizing Flow app
Build 53
	* Fix 2384595 [SDK-22356] Odd text selection behavior on center and right aligned text in TextContainerManager
	* Fix 2383173 EditManager/deletePreviousCharacter() infinite loop
	* Fix 2383432 SDK-22313 Problem when switching TextLineCreators
	* Fix 2382991 Scrolling container with large image at top doesn't scroll all the way to the top after scrolling all the way to the bottom
Build 51
	* Fix 2331867 2354621 Provide a way to configure the TLF display object hierarchy, allowing selective application of filters etc.
Build 48
	* PARB Remove TextFlowLine.GEOMETRY_DAMAGED.  Rename FlowDamageType.GEOMETRY_DAMAGED to FlowDamageType.GEOMETRY
Build 47
	* Fix 2375340 Deletion of text, followed by splitting of paragraph leads to generation number mismatches and inability to undo actions
	* Fix 2361186 Consistent exporting of a TextFlow
	* PARB Expose FlowDamageType class
	* PARB container.ISandboxSupport mouseMoveSomewhere() and mouseUpSomewhere(), the argument renamed to 'event'.
	* PARB container.ContainerController scrollToPosition renamed to scrollToRange
	* PARB container.TextContainerManager scrollToPosition renamed to scrollToRange
	* PARB edit.ISelectionManager arguments renamed to 'anchorPosition' and 'activePosition'
	* PARB edit.SelectionManager arguments renamed to 'anchorPosition' and 'activePosition'
	* PARB LinkElement constants for linkHoverFormat, linkNormalFormat and linkActiveFormat made tlf_internal
	* PARB events.StatusChangeEvent fix constructor argument names to match property names
	* PARB events.StatusChangeEvent string literal for INLINE_GRAPHIC_STATUS_CHANGE changed to "inlineGraphicStatusChange" from "inlineGraphicsStatusChanged".
	* PARB operations.ApplyTCYOperation rename the property to tcyON
	* PARB operations.ModifyInlineGraphicOperation options:Object defaults to null
	* Fix 2361154 Added defines of events for Links in FlowElementMouseEvent as per bug report.  Defines are identical to MouseEvent defines. Updated comments in LinkElement to reflect updates and location of event defines.
	* Fix 2374243 InlineGraphic Crash with Explicit Height/Width and No Source
Build 46
	* Fix 2356650 Pasted more than 2 consecutive graphics with text won't be rendered when pasted.
Build 44
	* Fix 2373030: Import filters can throw even when throwOnError is false
	* Fix 2373050, 2373040: Disallow nesting of sub-paragraph group elements of the same kind (e.g., link in a link), even indirectly (e.g., link in a TCY in a link)
Build 43
	* Fix 2371905 Final Empty Paragraph Shows No Selection When Block Selected
	* Fix 2361762 SelectionManager and EditManager keyDownHandlers should check if isDefaultPrevented and if yes, do nothing
	* Marshall plan and security sandbox bug fixes were added - TLF now works in a security sandbox and can support flex's marshall plan
	* Fix 2365787 Selecting text with shift-down breaks on last line when its an empty paragraph
	* Fix 2366203 HTML import/export uses <image> tag instead of <img> (inconsistent with TextField)
Build 40
	* Fix 2354673 Provide callback for resolving an inline graphic element. This lets the source for the element to be determined at compose time rather than upfront.
	* Fix 2363394 [SDK-21904] Spark TextArea exports different TextFlow depending on whether it received focus or not.
	* Fix 2342917 [SDK-21362] Erratic scrollbar sizing in TextFlow when using uneven lines and dragging the scroll thumb
	* PARB - Renamed TextFilter to TextConverter
	* PARB - IEditManager.as/EditManager.as - replaced float:String parameter with option:Object.  Updated comments.
Build 39
	* Fix fix 2366728 EditManager.applyFormatToElement ignores targetElement and always applies changes to the TextFlow
Build 38
	* PARB - TextFilter.as - TEXT_LAYOUT_FORMAT:String = "textLayoutformat" now defined as "textLayoutFormat"
	* PARB - TextFlowLine/TextFlowLineLocation - now defined in flashx.textLayout.compose package and not flashx.textLayout.elements.
	* PARB - IVJLine - renamed IVerticalJustificationLine
	* PARB - IFlowComposer.as - removed hide/showSelection.  Code moved to SelectionManager
	* PARB - StandardFlowComposer.as - removed implementation of hide/showSelection.
	* PARB - IConfiguration.as/Configuration.as Link[XXX]FormatDefault are all now renamed defaultLink[XXX]Format.
	 scrollDragDelay, scrollDragPixels,  scrollMouseWheelMultiplier are now all of type Number vs int
	* PARB - FlowElement.as - FlowElement implements ITextLayoutFormat.  Renamed variables and comments as per PARB requirements.
	* PARB - FlowGroupElement.as - renamed getChildAtIndex with getChildAt. addChild/ addChildAt/removeChild/removeChildAt all now return a FlowElement.
	* PARB - InlineGraphicElement - float property now tlf_internal.
	* PARB - LinkElement - link[XXX]FormatName constants are now declared in standard Flex/Flash format of LINK_XXX_FORMAT_NAME.
	* PARB - ParagraphElement.as - removed terminator parameter from getText on paragraph.
		 Updated relativePos references to relativePosition.
	* PARB - LinkActiveFormat, LinkHoverFormat, and LinkNormalFormat now descend from TextLayoutFormat rather than TextLayoutFormatValueHolder.
	* PARB - StatusChangeEvent.as - INLINE_GRAPHIC_STATUS_CHANGE now defined as "inlineGraphicStatusChanged"
	* PARB - TextLineFactoryBase.as - contentBounds now called getContentBounds
	* PARB - IEditManager/EditManager.as - insertInlineGraphic now takes an options:Object rather than a float:String. Updated comments to reflect change.  
		ApplyLink first parameter is now href vs uriString.
	* PARB - ParaEdit.as - createImage now takes options:Object rather than a float:String.  Default is NULL.  Updated comments to read "options - none supported"
	* PARB - ISelectionManager/SelectionManager - renamed setSelection to selectRange and  removed default values.  
		Added selectAll method which calls into selectRange.  Replaced all references to TextRangeUtil with NavigationUtil.
	* PARB - ChangeElementIDOperation - renamed ApplyElementIDOperation
	* PARB - ChangeElementStyleNameOperation - renamed ApplyElementStyleNameOperation
	* PARB - SetUserStyleOperation - renamed ApplyElementUserStyleOperation
	* PARB - ApplyFormatToElementOperation.as - reduced char/para/cont formats down to single format which is applied once.  Removed unneeded code to apply separately and replaced with single call.
	* PARB - ApplyLinkOperation.as - added getters/setters for constructor parameters
	* PARB - ApplyTCYOperation.as - added getters/setters for constructor parameters.  Renamed tcyOnValue to tcyValue.
	* PARB - CutOperation.as - added getters/setters for constructor parameters
	* PARB - DeleteTextOperation.as - added deleteSelectionState member var as well as getter/setter methods
	* PARB - FlowElementOperation.as - added getters/setters for constructor parameters as well as storage member variables where needed.
	* PARB - FlowOperation.as - added set method for textFlow member
	* PARB - InsertInlineGraphicOperation/ModifyInlineGraphicOperation.as - replace all references to float with options and updated ASDoc comments.
	* PARB - PasteOperation.as - added getters/setters for constructor parameter textScrap.
	* Fix 2365281, 2365287 content bounds way off  (problem with logic to skip empty columns)
Build 36
	* PARB - Modify TextLayoutFormat/nullTabStopFormat.defaults(): make this be a static getter, rename it to defaultFormat, improve doc to make it clear it returns the same object repeatedly
	* Fix 2362126 TLF SWCs should include debugging information (missing code hints for parameters)
	* PARB - Rename nullTextLayoutFormat/nullTabStopFormat to emptyTextLayoutFormat/emptyTabStopFormat, move to tlf_internal
	* Fix 2361076 Contents bounds appears offset for graphic in vertical direction. 
	* Fix 2360045 Content Bound is not drawn properly in the second container with multiple columns. 
	* Fix 2359786 Content Bounds need to resize with specified text alignment. 
	* Fix 2358780 When verticalAlign is "justify", the content bounds are wrong 
	* Fix 2357611 ContentBounds Open Issues (except for performance optimization)
	* Fix 2359840 Scroll works only once by Dragging mouse or using arrow key.
	* Fix SDK-21899 RTE on Spark TextArea when deleting text, setting text, and focusing TextArea
	* Candidate fix for "Enter key problem"
Build 33
	* Fix 2358923 stripDiscretionaryHyphens being ignored by PlainTextExporter
	* Fix 2358921 A final "\n" is being appended when exporting PLAIN_TEXT_FORMAT 
	* Rework fix for 2355912 to work with new plain text export behavior
	* Fix 2356890 ContainerController.isDamaged always returns true
	* Fix 2355912 Text copied from a TextFlow always has a newline at the end, even if the originally selected text did not
	* Partial fix for  2357611 ContentBounds Open Issues (continued)
	- RTL text incorrectly includes the paragraph terminator in its left side width in lineBreak="explicit" mode
	* Fix 2357732 FlowComposer no longer swallows errors
	* Partial fix for 2357611 ContentBounds Open Issues
	- paragraphIndent “gap” changes missing from explicit.  In lineBreak=”toFit” changes were made to account for the paragraph indents.  They aren’t in the explicit case.
	- No lines in parcel test (fix for bug 2523538) will incorrectly assume that a parcel containing zero height lines is empty.
	* Change how scrolling & vertical alignment work together so that when scrolling is on, if there is more text than fits in the container, vertical alignment will use TOP even if MIDDLE or BOTTOM is specified. Behavior when the text fits or scrolling is off remains unchanged.
	* Fix for 2343041, "[SDK-18884] scrolling issue when flow contains an image." Image was not being correctly included in the content area.
	* Fix for 2353258, "[Flex SDK-21019] TextFlowTextLineFactory with columnCount=2 produces incorrect width." 
	* Fix compilation issue in ContextMenu example (update import statement for UndoManager to reflect its new namespace)
	* Fix 2354401 TextContainerManager.getText doesn't clear _textDamaged
	* Fix bug, "The mouse-wheel handler should cancel the event if the text is scrollable, even if you can't scroll any further." Now we cancel the mouse wheel event if the content in the scrolling direction exceeds the composition bounds. This allows an outer scrolling context to work correctly.
	* Fix 2352535 RTE In ScrollTimer Handler
Build 30
	* Fix 2322061: Superscript/subscript doesn't work correctly with background color
Build 26
Build 450
	* Fix bug 330941 BackgroundColor and Color export differently
	- backgroundColor now exports in 0x hex format
Build 449
	* Eliminate IInternalFlowComposer interface
	* Fix 2328573 - remove textLine from BackgroundManager's cache when calling recreateTextLine() with recycled line.
	* Fix 2347701 SelectionManager and EditManager keyDownHandlers should call event.preventDefault() if they handle the key
Build 25
	* Changing behavior of vertical alignment of bottom or middle when content height exceeds container height with scrolling on. Now it will act as top aligned. 
Build 447
	* Rename TextFlow.getElementById to getElementByID
Build 446
	* Review changes - TextContainerManager 
	- 1) setText parameter named text 2) setTextFlow parameter named textFlow 3)hasScrollRect should be private
Build 445
	* Fix 2340553 Insert of "auto" sized InlineGraphics don't undo
	* Fix 2331720 TextContainerManager.getText - the parameter is a separator and is not added after the last paragraph
	* Fix the width of the paragraph terminator should not be included as part of the content width in lineBreak=explicit mode.


	* Fix 2349586: Sharing of computed TextLayoutFormats between leaf elements is highly susceptible to effects of garbage collection.
	* Ensure that the cache of element formats is cleared whenever the font mapper callback is modified, and whenever invalidateAllFormats is called when the font mapper callback is set.
Build 21
	* Fix the width of the paragraph terminator should not be included as part of the content width in lineBreak=explicit mode.
	* Fix cursor blinks in read-select mode, it should not blink. Now check the interactionManager's editingMode before setting the blinkRate.
	* Fix links at the end of the TextFlow don't cause the cursor to change to a hand cursor when the mouse passes over the link.Build 443
	* Fix 2297125 Vertical adjustment now adds height proportional to exisiting line spacing, even when lines are created using the text line factory
	* Fix 2305477 Added support for compliation of linkNormalFormat, linkActiveFormat and linkHoverFormat in mxml
	* Added an sdk example for context menu
Build 11
	* Added support for font mapping. Clients can set GlobalConfiguration.fontMapper, a callback for font mapping which takes a FontDescription object and updates it as needed.
	* Fix bug where marginRight was being ignored for paragraph alignment purposes in vertical text
	* Merge following fixes from v1 branch
Build 443
	* Fix crash when ILG is in a LinkElement
	* Fix 2338944 The case of an initially empty TextContainerManager should be optimized so that no TextLine is created
	- line creation may or may not happen depending on what results are cached.  getLineAt will always return a line.
Build 441
	* rename StatusChangeEvent INLINE_GRAPHIC_STATUS_CHANGED to INLINE_GRAPHIC_STATUS_CHANGE
	* Fix 2300102 Spans with attached event listeners should not merge
Build 439
	* API and markup Changes (Fix 2339174) 
	-- marginTop, marginBottom, marginLeft and marginRight formats have been renamed to paragraphSpaceBefore, paragraphSpaceAfter, paragraphStartIndent and paragraphEndIndent respectively
	-- paragraphStartIndent and paragraphEndIndent are direction-sensitive. For example, the former applies to the paragraph's left edge for left-to-right text, and to the right edge otherwise
	-- These formats now inherit values from parent flow element if undefined during cascade
	-- The previous names continue to be supported on import of FXG markup (but not TLF markup). FXG export uses the new names.
	* UndoManager and IUndoManager moved from flashx.textLayout.edit into flashx.undo namespace (actually done in build 436)
Build 438
	* add [RichTextContent] metadata to TextFlow and ParagraphElement mxmlChildren properties
Build 437
	* remove flashx.textLayout.edit.UndoManager and flashx.textLayout.IUndoManager per PARB
	* Fix 2330964 BackgroundColor Placed incorrectly from TextLineFactory.  Actually was in 436.
	* Fix 2326588 TextContainerManager Does Not Support Background Color.  Complete the fix with Argo specific fixes.
	* Fix 2330946 Remove TextContainerManager.trunctationOptions property
	* Fix 2337918 Please expose the scrollToPosition() API in TextContainerManager
	* Fix 2336672 Preserve selection when switching editingMode in TextContainerManager
	* Setting editingMode to the current editingMode should do nothing in TextContainerManager
Build 436
	* Fix 2331711 TextContainerManager now sends a DamageEvent from setText().
	* Fix 2326543 bug where selection wasn't being extended on mouse drag.
	* add [RichTextContent] metadata to SpanElement and FlowGroupElement mxmlChildren properties
	* Fix 2337740 Flex bug SDK-20964 TCM rcycling bug
	* Partial fix 2330964 background color placed incorrectly from TextLineFactory - Still will fail in Argo.
	* Remove vestigal experiment with Tables code 
	* Fix 2321538. On the Mac, the keyboard shortcuts for cmd-A,C,V,X were not working.
	* Fix 2326543, "drag select of scrolling flows doesn't expand selection".
	* Fix 2329527. Content bounds being reported was slightly different between the factory and TextFlow composer.
	* Fix 2328695 TextContainerManager Stops Receiving FocusIn Events.  This is a complete fix - previously this bug was worked around in v1.
	* Added TextLineFactoryBase.isTruncated
	* Fix 2315119  - Graphic will be redrawn when link applied.
Build 434
	* Fix 2323921: RichText truncation doesn't work in all cases (Approved for Flex Beta)
	-- Fixed regression that broke truncation feature
	-- Added TextLineFactoryBase.isTruncated
	-- Changed text line factory behavior such that scrolling is turned off when truncation options are set
Build 10
	* TextContainerManager now sends a DamageEvent from setText().
	* Fix bug where selection wasn't being extended on mouse drag.
Build 427
	* Fix bug 2330094  - RTE in computeSelectionIndexInContainer
	* Namespace change -- mxml namespace for TLF was "library:adobe/flashx/textLayout". Now it is: library://ns.adobe.com/flashx/textLayout".
	* Fix bug 2330227  - Scrolled TextContainerManager Can be Difficult To Create Point Selection 
Build 426
	* Fix bug 2329480 - TextFlow double-deletes text when pressing the backspace or delete key
Build 422
   	* API Changes: TextContainerManager now has a getContentBounds function, in place of individual getters for contentLeft, contentTop, etc. ContainerController also now has a getContentBounds function, in place of individual getters. Added functions to TextContainerManager to support custom classes for ISelectionManager and IEditManager (see createSelectionManager and createEditManager).
   	* API changes for TextContainerManager:
	   - getInteractionManager renamed to beginInteraction(), and added a new function endInteraction() which clients should use after beginInteraction() to signal that they are done with selecting/editing. This tells the TextContainerManager that it can go back to factory mode, which is more efficient.
	   - invalidateInteractionManager() removed and replaced with two new functions, invalidateSelectionFormats() which clients should called when SelectionFormats have changed, and invalidateUndoManager which clients should call to change the undo manager.
   	* API Changes for InputManager
	   InputManager renamed as TextContainerManager
	   IInputManagerClient removed, now you can subclass InputManager and override its methods
   	* API Changes:
	   InputManager
	       damaged property renamed to isDamaged() function
	       focusSelectionFormat renamed to focusedSelectionFormat
	       container retyped to Sprite
	       compositionWidth and compositionHeight removed as constructor parameters, now you need to set the properties on the InputManager you create
	    ContainerController
	       container retyped to Sprite
	    ISelectionManager
	       focusSelectionFormat renamed to focusedSelectionFormat
	    IConfiguration & Configuration
	       focusSelectionFormat renamed to focusedSelectionFormat
	* API Changes: 
		ISelectionManager
			setSelection deselects if negative numbers are passed in. 
			selectAll removed, you can call ISelection.setSelection() to get the same behavior, if you need to redraw the selection, call ISelectionManager.textFlow.flowComposer.updateAllControllers(). 
			flushPendingEvents moved to IInteractionHandler
			notifyInsertOrDelete moved to IInteractionHandler
		IUndoManager
			clear renamed to clearAll(). 
			undoLastOperation renamed to undo()
			redoLastOperation renamed to redo()
	* API Change: SelectionEvent now contains a SelectionState, not an ElementRange; this is much cheaper for us to provide. ElementRange is now tlf_internal. ElementRange.firstLeafPosition renamed to absoluteStart, ElementRange.lastLeafPosition renamed to absoluteEnd.
	* API Change: TextScrap.copyTextScrap renamed to clone. 
	* API Changes to InputManager. defaultInputManagerConfiguration renamed to defaultConfiguration. composeToController renamed to compose(), and updateToController renamed to updateContainer().
	* API Changes:
		ISelectionManager:
		- Event handling functions moved out of ISelectionManager into new interface, IInteractionHandler
		- selectionFormat renamed to currentSelectionFormat
		- selectionState renamed to function getSelectionState()
		- setSelection now takes default parameters to select the entire flow
		- noFocusSelectionFormat renamed to unfocusedSelectionFormat
		SelectionFormat:
		- blockAlpha reanmed to rangeAlpha
		- blockBlendMode renamed to rangeBlendMode
		- blockColor renamed to rangeColor
		IEditManager
		- added get undoManager()
		- added changeElementID()
		- added changeElementStyleName()
		SelectionManager
		- activeMark and anchorMark are now private
		- selectionChanged is private
		- setSelectionState is tlf_internal
		EditManager
		- stage is private
		ChangeElementIdOperation renamed to ChangeElementIDOperation
Build 420
	* API change: Removed the misleadingly named and superfluous TextFlowLine.textIndent. Documented and ensured consistent use of TextFlowLine.lineOffset as lhe line's offset in pixels from the appropriate container inset (as dictated by paragraph direction and container block progression), prior to alignment of lines in the paragraph.  
	* API change: more changes to the factory classes. ITextLineCreator is now a property of the base class, so instead of passing it in the constructor you construct and then set the property in the factory. bounds property renamed to compositionBounds, and measuredBounds renamed to contentBounds. containerController property is now private.
	* API Change: moved ITextLineCreator interface from the elements package to the compose package.
	* PlainTextExporter is now public and has methods for controlling the paragraphSeparator and whether discretionary hyphens are included in the export. To use it, you can either construct it directly, or via the TextFilter class. Removed the newlineIndicator string from IConfiguration.
	* Fixed a bug where tabs in RTL text were being being offset by textIndent and marginRight values. 
Build 419
	* Once a mouseWheel event has been handled, mark with preventDefault so client applications don't also try to handle it. 
	* Don't start compose if text is already composed. Optimization for callers of composeToPosition.
	* Always call resetContentTopLeft, to give more accurate top left positions, particularly for cases where the text is outdented and left aligned. 
	* API CHANGE: TextLineFactory revised. It is now split into 3 classes, TextLineFactoryBase, StringTextLineFactory, and TextFlowTextLineFactory. Use StringTextLineFactory for creating TextLines from a String. Use TextFlowTextLineFactory for creating TextLines from a TextFlow. Static methods have been removed, so create a new factory in order to create lines. One factory may be reused many times, just resetting the values (text, bounds, truncation options, etc.) in between. See StaticHelloWorld.as for a simple example of how this works for Strings, see StaticTextFlow.as for a simple example of it with TextFlows.
Build 418
	* Fixed Vertical Justification behavior; it now increases the spacing between consecutive lines proportionally rather than spacing lines uniformly.
Build 417
	* API Changes: Renamed DisplayObjectContainerController to ContainerController, and removed IContainerController and IInternalContainerController. Wherever you used to use "IContainerController" or "DisplayObjectContainerController" now just use "ContainerController". 
			Moved some functions that were public into the tlf_internal namespace: effectivePaddingLeft, effectivePaddingTop, effectivePaddingRight, and effectivePaddingBottom.
			ColumnState.createColumnState removed. A ColumnState constructor now takes all the relevant values, so whereever you used to do this:
				var columnState:ColumnState = ColumnState.createColumnState(...your values here...);
			you can now do this:
				var columnState:ColumnState = new ColumnState();
			ColumnState.getColumnAtIndex(index) has been renamed to getColumnAt(index). So, once you have the columnState, you do, for instance:
				var columnRect:Rectangle = getColumnAt(0);
	* Fixed bug where spaces at end of a line would "overflow" into neighboring columns.  New code keeps drawing of cursor at the column boundary and limits block selection drawing to the same bounds.
	* Enhancement to cursor navigation for Right to Left text systems.  Previous code moved cursor according to logical order vs. visual order.  Result was that a right arrow key press in Arabic, Hebrew or other RTL languages meant that the cursor actually moved left.  New code moves cursor according to the visual order of the text based on the direction of the entire text flow.  Note that changing the direction on a paragraph will not alter the behavior of the cursor, nor will the presence of LTR text within a RTL text flow.  This means that if a TextFlow is set to Right to Left and a given paragraph is entirely in English and the paragraph is set to be Left to Right, the cursor will seem to move in the wrong direction.  TLF does not support customization of cursor movement based on the locale or direction of anything except the parent TextFlow.
  	* Fixed a bug that caused undoing an ApplyFormatToElementOperation to have no effect.
Build 416
Build 415
Build 414
	* API Changes:
			DisplayObjectContainer event handling functions renamed:
				processMouseOverEvent -> mouseOverHandler
				processMouseOutEvent -> mouseOutHandler
				processMouseWheelEvent -> mouseWheelHandler
				processMouseDownEvent -> mouseDownHandler
				processMouseUpEvent -> mouseUpHandler
				processMouseMoveEvent -> mouseMoveHandler
				processMouseDoubleClickEvent -> mouseDoubleClickHandler
				processFocusInEvent -> focusInHandler
				processFocusOutEvent -> focusOutHandler
				processActivateEvent -> activateHandler
				processDeactivateEvent -> deactivateHandler
				processKeyDownEvent -> keyDownHandler
				processKeyUpEvent -> keyUpHandler
				processTextInputEvent -> textInputHandler
				processContextMenuSelectHandler -> menuSelectHandler
				eventHandler -> editHandler
			ISelectManager & SelectionManager & EditManager renamings:
				eventHandler -> editHandler
Build 413
  	* API Changes: renamed IContainerController.scrollLines to getScrollDelta, renamed InputManager.scrollLines to getScrollDelta, and removed constants for default container width and height.
Build 412
  	* API CHANGE: DisplayObjectContainerController methods processCopyEvent, processCutEvent, processPasteEvent, processSelectAllEvent collapsed into a single processEvent that handles all these basic events. Added to ISelectionManager a new function, processEvent for handling these same events in the SelectionManager, and removed processSelectAll, which is no longer used. cutTextScrap and pasteTextScrap moved from ISelectionManager to IEditManager, since these are editing operations.
Build 411
  	* Fixed a bug where noFocus selection format was not being set on re-activation
	* API CHANGES. These functions in IFlowComposer were renamed:
  		updateContainer -> updateToController
  		updateAllContainers -> updateControllers
  		composeContainer -> composeToController
  		composePosition -> composeToPosition
  	* API CHANGE: Changing name of TextFlow.hostTextLayoutFormat to hostFormat.
  	* API CHANGE: Added ITextLineCreator interface, TextLineCreator concrete class, and textLineCreator property on IFlowComposer, TLFTextField, factory methods, and InputManager.
Build 410
	* Fix bug where leading info used for composing the next line was being saved prematurely, causing incorrect layout if the current line needed to be composed in multiple passes.
Build 409
	* Fix bug  where clicking on container when height or width NaN doesn't work. When measuring, transparent hit detect region wasn't being redrawn to correct size after composition.
	* API CHANGE: Plain-text import/export changes. Newline indicators exported based on setting in IConfiguration.newLineIndicator. On import, LF/CR/CR+LF are all recognized as new line indicators.
Build 408
	* Compose to container size with scrolling on -- previously was composing to double composer size. This may flush out some invalid line bugs.
	* Fixed a bug with blockProgression="rl" and compositionWidth=NaN, lines were getting improperly clipped out so that no text appeared. 
	* API CHANGE: Renaming functions in IFormatResolver. invalidateAllTargets is now invalidateAll, and invalidateTarget is now invalidate. resolveTextLayoutFormat is now resolveFormat.
	* API CHANGE: eventMirror on FlowLeafElement and SubParagraphGroupElement is now tlf_internal.
	* API CHANGE: Moving TextRange from the edit package to the elements package.
Build 406 (2009/04/02)
	* API CHANGE: Renaming DamageEvent.damageStart to damageAbsoluteStart.
	* API Change: IConfiguration.includePartialLine renamed to overflowPolicy. Defined new class OverflowPolicy that describes the different policies that can be used to control whether lines that fall at the end of the container are included in the container, or not.
Build 405 (2009/04/01)
	* API CHANGE: IFlowComposer.firstDamagePosition renamed to damageStartPosition.
	* API CHANGE: Rename GeometryUtil.getRangeBounds to GeometryUtil.getHighlightBounds.
	* API CHANGE: ParagraphElement.getText now takes an additional optional parameter that specifies the terminator for the paragraph. By default, this is the Unicode paragraph terminator character (\u2029), but you can make it whatever you want, including a simple newline by passing a String for the paragraphTerminator. This change is backwards compatible for current callers of getText().
	* Fix clipping problem when text is placed above the container (6 lines aligned verticalAlign = bottom in a space that fits 4 lines). 
Build 404 (2009/03/31)
	* Updating typgraphic case --Markup and API Change-- Now uses a new class TLFTypographicCase, and has different options. Support for "title" and "caps" dropped. Use TLFTypographicCase with TLF in preference to flash.text.engine.TypographicCase. "smallCaps" renamed to "capsToSmallCaps". "capsAndSmallCaps" renamed to "lowercaseToSmallCaps". Also made AUTO the default setting for kerning, which matches FXG spec.
Build 403 (2009/03/30)
	* format Markup Changes:
		- <TextLayoutFormat> now <format>
		- When referring to a format id, don't use brackets. So this:
			<TextLayoutFormat id="english" locale="en" fontFamily="Minion Pro"/>
			<p marginBottom="15" ><span format="{english}">This text is supposed to be in Minion Pro via a named character attribute</span></p>
		Is now this:
			<format id="english" locale="en" fontFamily="Minion Pro"/>
			<p marginBottom="15" ><span format="english">This text is supposed to be in Minion Pro via a named character attribute</span></p>	
		
		API Changes:
		- Rename FlowElement.textLayoutFormat -> format
		- Rename FlowElement.computedTextLayoutFormat -> computedFormat
		- Rename IContainerController.textLayoutFormat -> format
		- Rename IContainerController.textLayoutFormat -> computedFormat
		- Rename DisplayObjectContainerController.textLayoutFormat -> format
		- Rename DisplayObjectContainerController.textLayoutFormat -> computedFormat	
Build 402 (2009/03/27)
	*	verticalAlign of "middle" or "bottom" will now align to the compositionHeight (or compositionWidth in vertical text) even if the height of the text exceeds the compositionHeight. This means that lines that don't fit may be get pushed above the box, or (for middle) pushed both above and below. It also means that all lines will forced to compose to the end, so it will be quite slow to use verticalAlign in large text flows. Made some corresponding fixes to scrolling to make it work with text off the start of the container. Added some new test cases to exercise this functionality in all the different alignment settings.
	*	Scrolling fixes for next/previous line with arrow keys. Fix a bug where the arrow key would move to the end of the line if the line required composition (e.g., the line was not previously in view). Also fixed a bug when scrolling up by a line where it would scroll down instead.
	*	doOperation used to return an SelectionState, but with the exception of two places that were using it internally, all external callers only checked to see if it was null or not. null was being used to indicate failure, or nothing changed, which means that the operation is not placed on the undo stack. Now it returns a Boolean, true for success, false for failure. There may be further changes in this area to make FlowOperations simpler.
Build 397 (2009/03/20)
	*	Made DisplayObjectContainerController's and FlowElement's TextLayoutFormat properties read/write (used to be write-only).
	*	Merge ContainerControllerBase class into DisplayObjectContainerController.
	*	Mark TextFlow class as final
Build 396 (2009/03/19)
	*	Fix RTE in StandardFlowComposer.releaseLines
	*	Fix possible source of the RTE on null reference from findFirstAndLastVisibleLines in ContainerControllerBase.
Build 394 (2009/03/17)
	*	Fix issue with changes made in StatusChangeEvent to embedded graphics by blocking recursive composition.  Bug 2298043
	*	Add IFlowComposer.composeInProcess property. s
	*	Fixed problem where first part of a link could not be replaced by a new link.  New code allows partial replacement of a link element with a selection which starts at the first character.
	*	Fixed a problem where the cursor was getting set to the I-beam, and wouldn't set back.
Build 393 (2009/03/16)
	*	Fix a bug where keyboard navigation with linked containers was causing a scroll because it was trying to scroll to a position not in the container.
Build 392 (2009/03/13)
	*	Removed optimization that was preventing scrolling in the logical width direction if scrolling in the logical vertical direction was turned off.
	*	Removed the container-level mouseMove and rollOver handlers which were changing the link state. These are now part of the LinkElement, and added only when they are needed. 
Build 390 (2009/03/11)
	*	Fix for application of attributes to a point selection where only the last attribute would be applied.  New code applies all attributes applied to the point.
	*	IContainerController.contentWidth (or contentHeight in vertical text) is now based on the actual text width, not the unjustified text width. This fixes some problems where scrolling wasn't working correctly because the reported width of the text was greater than the compositionWidth, but lines were wrapped. It does mean that to get the unjustified width you will have to set the textAlign to something other than "justify", recompose, and then get the resulting width.
	*	Fix for unintended scroll when at the end of a TextFlow.
	*	Fix for RTE when dragging over text generated from a factory, or non-TLF TextLines.
	*	Changes for alignment and measurement. You can now set NaN for compositionWidth or compositionHeight, and TLF will compose and use the generated contentWidth or contentHeight for alignment, scrolling, etc. The composer now generates a topLeft for the bounds, so you can make a full "content bounds" using contentLeft, contentTop, contentWidth, and contentHeight.Note that this is logical bounds and not inked bounds, so there are some circumstances where ink will not fit in the content bounds.Fixed bugs in how the factory was doing vertical alignment that caused it to be a few pixels off.Fixed some incosistencies between how the standard flow composer worked and how the factory's simple composer works -- composition results should now be more uniform. Added a new test program, MeasurementGrid, for testing all this. It's still a work in progress.
Build 388 (2009/03/09)
	*	Fixed issue where applying link or TCY to the last span of a paragraph caused a dangling span to remain with the para terminator.
	*	Fixed issue where text would go into a link when it was the last element in a paragraph.  Newly typed text now goes into a new span when the selection marker is at the last index.
Build 386 (2009/03/06)
	*	Fixed issue with placement of underline and strikethrough on inline images.
	*	Fixed placement of underline and strikethrough on text which has a baseline shift applied to it.
Build 385 (2009/03/04)
	*	Combined SWC 'textLayout.swc' now included in the libs directory of the build. This includes everything from textLayout_core, textLayout_edit, and textLayout_conversion.
	*	Combined RSLs now included in the rsl directory of the build. Both an unsigned SWF and signed SWZ are created. These include everything from textLayout_core, textLayout_edit, and textLayout_conversion.
Build 382 (2009/03/02)
	*	Fix issue with composing a TextFlow containing just an empty ParagraphElement.
	*	TextLineFactory will generate lines that included InlineGraphics whose source is a "class" - normally an embedded graphic.
	*	Expose eventMirrors - use FlowElement.getEventMirror function to access the eventMirror.
Build 381 (2009/02/27)
	*	Fixed issue with graphic assigned to ILG getting the wrong sizing.
	*	Factory instance functions renamed to textLinesFromString and textLinesFromTextFlow.  Static functions renamin unchanged.
Build 380 (2009/02/26)
	*	Made backgroundColor work with TextLineFactory.  This required an API change - the callback to the factory now must take a DisplayObject as	its parameter, since it won't always be passed TextLines.  Also, the background shapes themselves no longer include leading, so they do not exactly coincide with the selection bounds.  This was another change to support calculating the shapes during composition as opposed to afterward. Also added a snapshot test as part of FactoryImportTest that uses backgroundColor, in addition to updating the existing unit tests.
Build 379 (2009/02/25)
	*	Fixed for multiple containers ( we were getting incorrect textLength in the containers), as well as a fix that forces scrollToPosition to compose if the text isn't composed yet.
	*	Fix so that we scroll to the active position of the selection after we extend the selection with a keyboard event. Also fixed some of the TextRangeUtil functions used for nextLine, etc. to make sure text is composed through selection before processing that depends on composition results.
	*	Plain text import now consistently converts \r to space; previously it was converting only the first one. Still not clear what correct behavior should be.
Build 377 (2009/02/23)
	*	Fix bug with importing trailing empty div elements.
Build 374 (2009/02/18)
	*	Added support for TextField-style leading. A new leading model value allows lineHeight to be interpreted as the distance of line's ascent from the previous line's descent. Further, lineHeight can be negative. which specifies the criteria for truncation, the string used to indicate truncation and the format for this string.
Build 372 (2009/02/16)
	*	Added "enableAccessibility" property to IConfiguration, defaults to false.  Allows clients to avoid paying price for TextAccImpl objects unless needed.
	*	Added support for truncation for text composed using TextLineFactory. The TextLineFactory methods now take a truncation options parameter, which specifies the criteria for truncation, the string used to indicate truncation and the format for this string.
Build 371 (2009/02/13)
	*	Fixed a number of bugs relating to scrolling by line.
	*	Measurement changes. Changed the way contentHeight and contentWidth are calculated, now they reflect the size of the text, regardless of alignment. Eliminated unjustifiedContentHeight and unjustifiedContentWidth; use contentHeight and contentWidth instead.
	*	Fix RTE in damage when we try to damage back one line, for textFlow that doesn't have any leaf nodes.
	*	Changed InlineGraphicElement so that GraphicElements (and the TextBlocks they are part of) don't get released. Fixes RTE on null pointer in places where we access the GraphicElement.
	*	Fix bug deleting all of the last Span of a paragraph, plus some of the following paragraph. 
Build 370 (2009/02/12)
	*	Removed textFlow property from CompositionCompletionEvent.  Use event.target to get to the TextFlow.
Build 369 (2009/02/11)
	*	Fix issues in usage of hostTextLayoutFormat
	*	Fix FXG export to not export styles with value "inherit"
	*	lineBreak property no longer inherits by default
Build 368 (2009/02/10)
	*	Fix for RTE that happens after cancelling an operation (calling preventDefault on a FlowOperationEvent).
Build 367 (2009/02/09)
	*	ported to Flex 4.0.0.4836. All SWCs now build with this SDK.
Build 366 (2009/02/06)
﻿	*	FlowGroupElement addChild, addChildAt and replaceChildren methods now automatically delete new elements from any existing parents.  Previously the code would test for parent on new elements and throw.
	*	mxmlChildren FlowElement property which is normally used for mxml compilation of TextFlow objects now always deletes existing children
	*	Fix a memory leak issue with the TextLayoutFormat cache
	*	Fix cascade bug with non-inheriting attributes getting inherited
Build 365 (2009/02/05)
	*	Changed TextLayoutFormat.backgroundColor to allow setting value of "transparent" (now the default).  Because of this new value for backgroundColor, backgroundAlpha now defaults to 1.
Build 364 (2009/02/04)
	*	Performance improvement for handling of TextFlow.hostTextLayoutFormat.  The code now assumes that once set by the client the supplied object won't be changed.  This avoids a copy.
Build 363 (2009/02/03)
	*	Performance work.  Remove getCanonical from TextLayoutFormat.
	*	Fix for RTE cancelling SplitParagraphOperation.
	*	Fixing some float bugs.
