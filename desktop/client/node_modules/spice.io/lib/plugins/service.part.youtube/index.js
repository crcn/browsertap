var Youtube    = require('./youtube').Youtube;

var youtubeVideoMedia = 
{
	check: [{
		domain:'youtube.com',
		test:[/v=([^&]+)/, /v\/(\w+)/, /u\/1\/(\w+)/] 
	},
	{
		domain:'youtu.be',
		test:[/be\/(\w+)/]
	}],
	//matches in order:    
	//http://www.youtube.com?v=cVONdE1X24M
	//http://www.youtube.com/v/cVONdE1X24M  
	//http://www.youtube.com/user/foodwishes#p/u/1/cVONdE1X24M    
	getMedia: function (matches, url)
	{                                                    
		var id = matches[1],
		embed = 'http://www.youtube.com/embed/' + id,
		
		//the actual video. this is what the user sees when they want to watch the video after seeing the image
		video = {type: 'video', embed: embed, html: '<iframe class="video-player" type="text/html" width="640" height="385" src="' + embed + '" frameborder="0"></iframe>'};
		
		//the cover image for the video. This is what the user sees before selecting the video
		image = {type: 'image', regular: {link: 'http://img.youtube.com/vi/' + id + '/0.jpg', width: 480, height: 360}}

		//return both the image, and the video.
		return [video,image]; 
	},
	augment: function (data, matches, url, callback)
	{
		//for now do NOTHING since the client checks for this shit... Later on we actually want to have a default augmentor
		//for nectars that take heated items and automatically adds the media to the posts.
		callback(true, data);
	}
}


exports.plugin = function(router, params)
{
	var service = new Youtube(params.developerKey),
	auth;
	
	function getNectars(req, res)
	{
		res.end([youtubeVideoMedia]);
	}
	
	function getSocialService(req, res)
	{                 
		function renderYoutubeData(rawData)
		{                  

			/*
			at Object.renderYoutubeData [as renderData] (/home/public_html/node2/plugins/youtube/index.js:85:45)
			slave -     at /home/public_html/node2/plugins/spice/loader.js:941:30
			slave -     at /home/public_html/node2/plugins/youtube/index.js:186:14
			slave -     at /home/public_html/node2/plugins/youtube/youtube.js:30:4
			slave -     at /home/public_html/node2/framework/psk/node/io/net/index.js:497:4
			slave -     at Object.end (/home/public_html/node2/framework/psk/node/io/net/index.js:331:7)
			slave -     at IncomingMessage.<anonymous> (/home/public_html/node2/framework/psk/node/io/net/net_worker.js:134:33)
			slave -     at IncomingMessage.emit (events.js:81:20)
			slave -     at HTTPParser.onMessageComplete (http.js:132:23)
			slave -     at Socket.ondata (http.js:1206:22)
			*/                                                              
			var url    = rawData.link[0].href,
				icon   = rawData.media$group.media$thumbnail && rawData.media$group.media$thumbnail[1] ? rawData.media$group.media$thumbnail[1].url : null,
				stats  = rawData.yt$statistics,
				rating = rawData.gd$rating;

			var ret = {type: 'video',
					label: rawData.title.$t,
					link: url,
					icon: icon,
					text: rawData.content ? rawData.content.$t : '', 
					createdAt: new Date(rawData.published.$t),
					augmented: true};

			if(stats)
			{
				ret.likes = Number(stats.favoriteCount || 1);
			}		
			                                                                                         
			return ret; 
		}

		var searchYoutubeVideo = 
		{
			name: 'Youtube Search',    
			params: {q: {type: 'input' } },
			renderData: renderYoutubeData, 
			ignoreMedia: true,
			identify:
			{
				test:[/youtube.com\/results\?search_query=([\w\+]+)/],
				feed: function (match, callback)
				{
					callback(false, {q:match[1].replace(/\+/g,' ')});
				}
			},
			load: function (data, callback)
			{
				service.search(data.q.replace(/\s/g,'+'), callback)        
			}
		};

		var loadUserVideos = 
		{
			name: 'Youtube User',    
			params: {q: {type: 'input' } },
			renderData: renderYoutubeData,  
			ignoreMedia: true,
			identify:
			{
				test:[/youtube.com\/user\/(\w+)/,
					  /youtube.com\/(\w+)$/],
				feed: function (match, callback)
				{
					callback(false, {q: match[1]});
				}
			},
			load: function (data, callback)
			{
				service.getUserVideos(data.q, callback)        
			}
		}

		var loader = 
		{
			name: 'YouTube',
			type: 'graph',
			loaders:
			{
				videos:
				{
					search: searchYoutubeVideo,
					user: loadUserVideos
				},
				default:
				{
					search: searchYoutubeVideo,  
					user: loadUserVideos
				}	
			}
		}

		res.end(loader)
	}		
	
	function getSuggestionHandler(req, res)
	{
		var handler = {
			name: 'youtube',
			findSuggestions: function(q, callback)
			{
				var channels = [];
				
				service.findChannels(q, function(err, channels)
				{
					var ch = [];
					
					channels.forEach(function(a)
					{
						ch.push({
							type: 'youtube',
							label: (a.title || {}).$t || 'Untitled',
							text: (a.summary || {}).$t,
							url: a.link[0].href,
							numVideos: a.gd$feedLink[0].countHint
						})
					});
					
					callback(ch);
				})
			}
		}
		
		res.end(handler);
	}

	function getFeedPuller(req, res)
	{
		res.end({
			type: 'youtube',
			service: 'google',
			load: function(account, delegate)
			{
				service.getSubscriptions(account, function(err, feed)
				{
					var feeds = [];

					if(feed)
					{
						(feed.feed.entry || []).forEach(function(entry)
						{
							feeds.push({ feed: entry.yt$username.$t, feedId: entry.id.$t, group: 'subscriptions' });
						})
					}

					delegate.finish(feeds);
				});
			},
			unsubscribe: function(account, feed, callback)
			{
				service.unsubscribe(account, feed, callback);
			},
			subscribe: function(account, feed, callback)
			{
				service.subscribe(account, feed, callback);
			}
		});
	}
	
	
	router.on({

		'push init': function()
		{
			//TO UPDATE
			return;

			router.request('connect/auth/google').success(function(auth)
			{
				service.auth = auth;
			}).pull();
		},

		'collect feed/puller': getFeedPuller,
		
		//augments links into youtube video media
		'collect nectar': getNectars,
		
		//returns handlers for social.core
		'collect social/service': getSocialService,
		
		//suggests youtube users to subscribe to 
		'collect suggestion/handler': getSuggestionHandler
	})
}






