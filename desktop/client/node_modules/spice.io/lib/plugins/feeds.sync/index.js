var vine = require('vine'),
Puller = require('./delegate'),
_ = require('underscore');

/**
 * syncronizes feeds with the service. Twitter lists, google reader feeds, facebook friends, etc.
 */

exports.plugin = function(router)
{
	var delegate, ttl = 1000 * 60 * 60 * 24; 
	
	//TODO
	return;

	function fetchCursor(request, callback)
	{
		var $in = [];


		for(var i = request.accounts.length; i--;)
		{
			$in.push(request.accounts[i]._id.toString());
		}


		delegate.find({ account: { $in: $in }}, { page: request.data.page, count: request.data.count }, callback);
	}

	function inAccounts(request)
	{
		var $in = [];
		for(var i = request.accounts.length; i--;)         
		{
			$in.push(request.accounts[i]._id.toString());
		}
		return $in;
	}


	router.on({

		/**
		 */

		'push \
		mongodb': function(db)
		{

			delegate = new Puller(db);

			router.request('feed/puller').
			success(function(puller) {
				delegate.addPuller(puller);
			}).collect();

		},


		/**
		 */

		'pull \
		-hook -method=GET \
		cache/subscriptions/3600/accessToken+feed -> \
			social/accounts/:serviceOrAccountId -> \
				subscriptions/all/exists OR 
				accounts/:serviceOrAccountId/subscriptions/exists': function(req, res)
		{

			var feeds = (this.data('feed') || '').split(',');

			var search = { account: { $in: inAccounts(req) }, feed: { $in: feeds } };



			delegate.collection.find(search, { limit: 100 }, function(err, cursor)
			{
				var details = [];

				cursor.toArray(function(err, items)
				{
					var subscribed = _.pluck(items, 'feed');

					for(var i = feeds.length; i--;)
					{
						details.push({
							feed: feeds[i],
							subscribed: subscribed.indexOf(feeds[i]) > -1
						})	
					}

					vine.list(details).end(request);		
				})

			});
		},

		/**
		 */

		'pull -hook -method=GET cache/subscriptions/3600/accessToken+page+count -> social/accounts/:serviceOrAccountId -> (subscriptions or accounts/:serviceOrAccountId/subscriptions)': function(request)
		{
			delegate.find({ account: { $in: inAccounts(request) }}, { page: request.data.page, count: request.data.count }, function(err, cursor)
			{
				if(err) return vine.error('unable to fetch subscriptions').end(request);


				cursor.toArray(function(err, items)
				{
					vine.list(items).end(request);
				})
			});
		},

		/**
		 */

		'pull -hook -method=GET cache/subscriptions/3600/accessToken -> social/accounts/:serviceOrAccountId -> (subscriptions/all/stats or accounts/:serviceOrAccountId/subscriptions/stats)': function(request)
		{
			var stats = [],
			numRunning = request.accounts.length;

			request.accounts.forEach(function(account)
			{
				delegate.collection.find({ account: account._id.toString() }, function(err, cursor)
				{
					if(err) return vine.error('unable to fetch subscriptions').end(request);

					cursor.count(function(err, n)
					{
						 stats.push({
						 	account: {
						 		displayName: account.displayName,
						 		type: account.type,
						 		_id: account._id
						 	},
						 	total: n
						 })

						if(!(--numRunning)) return vine.list(stats).end(request);
					})
				});	
			})
			
		},

		/**
		 */

		'pull social/accounts/:serviceOrAccountId -> remove/cache/subscriptions/accessToken -> thru/update/subscriptions': function(request)
		{
			request.next();
		},


		/**
		 */

		'pull -hook -method=POST thru/update/subscriptions -> (subscriptions or accounts/:serviceOrAccountId/subscriptions or subscriptions/all/add or accounts/:serviceOrAccountId/subscriptions/add)': function(request)
		{
			var feeds = (request.data.feed || '').split(',');

			/**


			delegate.subscribe(feeds, function(result)
			{
				vine.result(result).end(request);
			})
			 */


			return "ADD";
		},

		/**
		 */

		'pull -hook -method=DELETE thru/update/subscriptions -> (subscriptions or subscriptions/:subscriptionId or subscriptions/:subscriptionId/remove or accounts/:serviceOrAccountId/subscriptions/:subscriptionId/remove)': function(request)
		{

			delegate.model.findOne({ _id: request.data.subscriptionId }, function(err, item)
			{
				if(!item) return vine.error('Item does not exist').end(request);

				var account = _.detect(request.accounts || [], function(account){ return account._id == item.account });

				//shouldn't happen but we
				if(!account) return vine.error('Feed not owned by any accounts').end(request);

				delegate.unsubscribe(account, item, function(err, result)
				{
					vine.result(true).end(request);
				});
			})
			/**


			delegate.subscribe(feeds, function(result)
			{
				vine.result(result).end(request);
			})
			 */


			return "ADD";
		},

		/**
		 */

		'push account/created or account/updated': function(info)
		{
			console.log("Synchronizing %s feeds", info.account.type);


			router.pull('remove/cache/subscriptions/accessToken');

			router.push('thyme/job', { _id: info.account._id.toString(), path: 'pull/feed', data: { _id:  info.account._id.toString(), accessToken: info.accessToken }, /*sendAt: new Date(new Date().getTime() + ttl )*/ })
		},

		/**
		 */

		'push init/slave' : function()
		{
			router.push('thyme/worker', { path: 'pull/feed', num: 30, tries: -1 });
			
			router.on({
				'pull -public remove/cache/subscriptions/accessToken -> social/accounts/:_id -> pull/feed': function(request)
				{
					if(request.account) delegate.load(request.account);

					return { sendAt: new Date(new Date().getTime() + ttl )};
				}
			})
		}
	});



	/*

	var numRunning = request.identifiedFeeds.length+1,
			groups = [];

			function tryNext()
			{
				if(!(--numRunning))
				{
					request.pulledGroups = groups;

					if(!request.next()) return vine.list(groups).end(request);
				}
			}

			request.identifiedFeeds.forEach(function(feed)
			{
				feed.target.load(feed, function(g)
				{
					// g.account = feed.data.account;

					for(var groupName in g)
					{
						g[groupName].account = feed.data.account;
					}

					groups = groups.concat(g);

					tryNext();
				});
			});

			tryNext();

		*/
}