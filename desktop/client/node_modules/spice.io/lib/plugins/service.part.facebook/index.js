var FacebookAuthHandler = require('./auth').FacebookAuthHandler,
net = require('psk/node/io/net'),
URLRequest = net.Request,
loadRequest = net.loadRequest,
Url = require('url'),
utils = require('sk/node/utils'),
Structr = require('structr'),
payments = require('./payments'),
logger = require('winston').loggers.get('service.part.facebook'),
sprintf = require('sprintf').sprintf;



exports.plugin = function(router, params)
{

	//'user_photos,user_videos,friends_photos,friends_videos,read_friendlists,user_groups,read_stream,publish_stream,user_likes'
	if(!params.perms) params.perms = [];


	payments.plugin(router, params);
	
	var accountParams = { account: { type: 'list', list: '/connect/accounts/facebook' } },
		auth = new FacebookAuthHandler(params);
		   
	
	var service = new (function()
	{          
		this.auth = auth;
		var host = 'https://graph.facebook.com/',
			self = this;

		function getAccessToken(data)
		{
			return data.account.secret.accessToken;
		}             
		
		this.like = function(data, callback)
		{                         
			this.private('POST','/' + data.value + '/likes', data, callback);
		}

		this.loadHome = function(data,callback)
		{                      
			this.private('GET','me/home',data,callback)
		}

		this.loadMyPosts = function(data,callback)
		{                       
			this.private('GET','me/feed',data,callback)
		}    

		this.loadFriendsPosts = function(data,callback)
		{
			this.private('GET',data.q+'/feed',data,callback);
		}

		this.updateStatus = function(data,callback)
		{
			this.private('POST','me/feed',{ message: data.status, account: data.account }, function(err,result)
			{
				callback();
			});
		}                          

		this.private = function(method,uri,data,callback)
		{                      
			if(data.account && data.account.secret) uri += '?access_token='+getAccessToken(data);         

			self.request(method, uri, data, callback);
		}

		this.request = function(method,uri,data,callback)
		{                   
			if(!callback)
			{
				callback = data;
				data = undefined;
			}            
			var url = host+uri;    

			var r = new URLRequest(url);
			r.method = method;
			r.data = data;


			var buffer = '';

			loadRequest(r,function(result)
			{
				var data = JSON.parse(result);   
				console.log(result)

				if(!data || data.error) return callback(true,[]);       
				return callback(!data.data,data.data);
			});


		}
	})(); 

	function getSocialService(req, res)
	{

		function renderFacebookStreamData(rawData)
		{                                

			var media = [];


			var info = {
				type: 'post'               

				//do NOT augment content unless it's a link. most of this stuff is private.
				,augment:false
				,icon: 'http://graph.facebook.com/'+rawData.from.id+'/picture'
				,label: rawData.from.name
				,text: rawData.message
				,createdAt: new Date(rawData.created_time)
			};

			if(rawData.picture)
			{
				var picParts = Url.parse(rawData.picture,true),
					picUrl = picParts.query && picParts.query.url ? picParts.query.url : rawData.picture;


				media.push({ type: 'image',
				regular: { link: picUrl }});
			}

			if(rawData.type == 'photo')
			{
				info.type = 'image';     
				var url = rawData.picture || '';      


				//_n _s _q _b _t _o
				var image = {       
					type:'image'
					,link:rawData.link || url                                      
					,regular:{link:url.replace(/_[^_]\./,'_a.')}
					,large:{link:url.replace(/_[^_]\./,'_n.')}    //probably use _o for original...
					,small:{link:url.replace(/_[^_]\./,'_s.')}   
				};         

				media.push(image)
			}   
			else
			if(rawData.type == 'link')
			{                         
				//type = article?   
				if(rawData.link && !rawData.picture) info.augment = rawData.link.indexOf('facebook.com') == -1;  

				//this is the snippet from the article pulled by facebook.        
				if(rawData.description) info.description = rawData.description;
			}   
			else
			if(rawData.type == 'video')
			{
				//nothing important here
			}

			//link of the article, OR facebook page.              
			if(rawData.link) info.link = rawData.link;              
			if(rawData.likes) info.likes = rawData.likes.count;  
			if(rawData.name) info.label = rawData.name;  
			if(media.length) info.media = media;   

			return info;
		}

		var info = 
		{
			type:'graph'
			,name:'Facebook'
			,service: service
			,loaders:
			{
				wall:
				{
					post: 
					{
						name:'Post to Wall',
						params: { status: 1, account: 1 },
						load: function(data, callback)
						{
							this.service.updateStatus(data, callback);
						}
					}
				},
				feeds:
				{
					pull: 
					{
						name: 'Sync facebook friends',
						params: { account: 1 },
						load: function(data, callback)
						{
							
						}
					}
				},
				posts:
				{
					home: 
					{
						name:'Home'
						,renderData:renderFacebookStreamData
						,params:{ account: 'text' }     
						,identify:{ 
							test:[/^http(s)?:\/\/(www.)?facebook.com\/?$/,]
							,feed:function(result, callback)
							{           
								var feeds = [];
								for(var i = result.accounts.length; i--;)
								{
									feeds.push({account:result.accounts[i]._id})
								}           
								callback(false, feeds)
							}
						}
						,load: function(data,callback)
						{                     
							this.service.loadHome(data,callback);            
						}
					},
					me:
					{
						name:'My Posts'
						,renderData:renderFacebookStreamData
						,params:accountParams
						,load:function(data,callback)
						{                     
							this.service.loadMyPosts(data,callback);    
						}
					}
					,feed:
					{                                          
						//http://www.facebook.com/profile.php?id=1202138733
						name: 'Friend Posts'
						,renderData: renderFacebookStreamData
						,params: { account: {type: 'text', optional: true }, q: {type: 'input' } }   
						,identify:{ 
							test:[/facebook.com\/profile\.php\?id=(\d+)$/,
								  /facebook.com\/([^?#\/]+)$/,
								  /facebook.com\/pages\/([^#?\/]+)/]
							,feed:function(result,callback)
							{           
								var feeds = [];

								if(result.accounts && result.accounts.length)
								{
									for(var i = result.accounts.length; i--;)
									{                                                         
										feeds.push({ account: result.accounts[i]._id, q: result[1]})
									}
								}
								else
								{
									feeds = {q: result[1]}
								}                    

								callback(false, feeds)
							}
						}
						,load:function(data,callback)
						{
							this.service.loadFriendsPosts(data,callback);
						}
					}
				}
			}
		}

		info.loaders.default = info.loaders.posts;


		res.end(info);
	}
	
	function getPromotionFinder(req, res)
	{
		res.end({
			service:'facebook'
			,test:function()
			{
				return true;
			}
			,find:function(item,callback)
			{
				loadRequest('http://graph.facebook.com/' + escape(item.link), function (data)
				{
					try
					{
						var result = JSON.parse(data);
						callback(result.shares);
					}
					catch(e)
					{
						logger.error(sprintf('cannot fetch facebook influence for %s', item.link));
						callback(null);
					}
				});
			}
		})
	}
	
		
	
	function getSuggestionHandler(req, res)
	{
		var handler = {
			name: 'facebook',
			findSuggestions: function(q, callback)
			{
				loadRequest('https://graph.facebook.com/search?q='+escape(q)+'&type=page', function(result)
				{
					result = JSON.parse(result);
					if(result.error) return callback([]);
					
					var pages = [];
					
					result.data.forEach(function(page)
					{
						pages.push({
							
							//name of page
							label: page.name,
							
							//used to identify the service so we know how to display it
							type: 'facebook',
							
							//id of fan page
							id: page.id,
							
							//category of fan page
							category: page.category,
							
							//icon for fan page
							icon: 'http://graph.facebook.com/'+page.id+'/picture',
							
							//used for quick add - easiest to convert
							url: 'http://www.facebook.com/profile.php?id=' + page.id
						});
					})
					
					callback(pages);
				})
			}
		}
		
		res.end(handler);
	}

	function getAuthHandler(req, res)
	{
		res.end(auth);
	}
	    
	function getSubscribables(req, res)
	{
		var subscribable = {
			type: 'facebook',
			name: 'Facebook',
			auth: 'facebook',
			subscribe: function(data, callback)
			{                      
				service.like({
					value: data.to,
					account: data.account
				}, function(err, result)
				{
					console.log(err);
					console.log(result);
				})
			}
		}  
		
		res.end(subscribable);
	}

	
	router.on({      
		
		'collect connect/auth': getAuthHandler,
		
		//returns the items which are subscribable (following a user)
		'collect subscribable': getSubscribables,
		
		//handles social.core requests for facebook
		'collect social/service': getSocialService,
		
		//finds N likes for given url
		'collect promotion/finder': getPromotionFinder,
		
		//returns suggestions for fan pages
		'collect suggestion/handler': getSuggestionHandler
	})
}

