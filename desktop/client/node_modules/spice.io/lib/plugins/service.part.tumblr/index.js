var loadRequest = require('psk/node/io/net').loadRequest,
standardize = require('psk/node/xml/standardize'),
URLRequest = require('psk/node/io/net').Request;


exports.plugin = function(router)
{
	function getSocialService(req, res)
	{                
		var info = 
		{
			name: 'Tumblr',
			type:'graph',
			service: new (function()
			{				
				function getUri(user)
				{
					return 'http://'+user+'.tumblr.com/api/read/json';
				}

				this.loadAll = _loadPartial();
				this.loadText = _loadPartial('text');
				this.loadVideos = _loadPartial('videos');
				this.loadLinks  = _loadPartial('link');
				this.loadAudio  = _loadPartial('audio');

				function _loadPartial(returned)
				{
					return function(user,callback)
					{
						var request = new URLRequest(getUri(user));
						request.data = {};
						if(returned) request.data.returned = returned;
						request.data.callback = 'v';
						request.method = 'GET';

						loadRequest(request,function(data)
						{
							try
							{
								data = data.replace(/^v\((.*)\);/,'$1')

								var feeds = JSON.parse(data).posts;

								callback(feeds);
							}
							catch(e)
							{
								console.error('e.stack');
								callback(null)
							}
						})
					}
				}

				this.searchTags = function(q,callback)
				{
					load('tags/'+q+'/media/recent',function(data)
					{
						callback(data ? data.data : null)
					})
				}


			}
			)(),
			loaders:
			{
				default:
				{
					posts: 
					{
						name: 'Tumblr User',    
						params: {q: {type: 'input'}},
						renderData: function (data)
						{
							var item = {
								label: data['link-text'],
								createdAt: new Date(data.date),
								link: data['url-with-slug']
							};

							switch(data.type)
							{

								case 'photo':
									item.text  = data['photo-caption'];
									item.type  = 'image'
									var width  = new Number(data.width),
										height = new Number(data.height);

									var largeW = Math.min(1280,width),
										medW   = Math.min(400,width),
										regW   = Math.min(250,width),
										smW    = Math.min(100,width)

									var image = {
										type: 'image',
										link: data['photo-link-url'] || data['photo-url-1280'],
										square: {link: data['photo-url-75'], width: 75, height: 75},
										small: {link: data['photo-url-100'], width: smW, height: Math.round(height * (smW/width))},
										large: {link: data['photo-url-1280'], width: largeW, height: Math.round(height * (largeW/width))},
										medium: {link: data['photo-url-400'], width: medW, height: Math.round(height * (medW/width))},
										regular: {link: data['photo-url-250'], width: regW, height: Math.round(height * (regW/width))},
									}

									item.media = [image];
								break;

								case 'video':
									item.type     = 'video';
									item.text     = data['video-caption'];
									var video     = {type: 'video', 'html': data['video-source']};
									item.media = [video];
								break;

								case 'link':
									item.text = data['link-description'];
									item.type = 'link';
								break; 
							}

							return item;
						}, 
						identify:
						{
							test: [{value: /(\w+)\.tumblr\.com/, not: /www.tumblr.com/}],
							feed: function (match, callback)
							{
								callback(false, {q:match[1]});
							}
						},
						load: function (data, callback)
						{
							this.service.loadAll(data.q, function (data)
							{
								callback(!data,data);
							})    
						}
					}

				}	
			}
		}


		res.end(info)
	}
	
	function getContentStandardizer(req, res)
	{
		res.end({ standardize: standardize.standardizeFromHtml, service: 'tumblr' });
	}
	
	router.on({
		'collect social/service': getSocialService,
		'collect content/standardizer': getContentStandardizer
	})
}

