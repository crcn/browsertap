var vine = require('vine'),
	SavedArticlesDelegate = require('./delegates').SavedArticlesDelegate,
	Url = require('url'),
	cashew = require('cashew');



exports.plugin = function(router, params) {

	var savedArticleDelegate;
	
	
	function onMongoDb(mongoose) {
		savedArticleDelegate = new SavedArticlesDelegate(router, params, mongoose.db, mongoose.collection('saved.articles'));
	}



	router.on({
			
			
		/**!
		 * Returns a list of curated articles under the given group
		 * @param groupId the groupId, or "bucket" where the articles are saved
		 * @collection saved items   
		 * @displayName getAllSavedItems
		 */

		'pull \
		-hook -method=GET -ttl=20 \
		groups/:group/articles': function(req, res) {

			           
			var afterDate = req.query.afterDate;

			console.log('get group %s articles', req.params.group);

			savedArticleDelegate.getSavedArticles(req.group._id, {afterDate: afterDate instanceof Date ? afterDate.getTime() : Number(req.query.afterDate), 
				page: req.query.page, 
				count: req.query.count, 
				returnRawCached: false }, function(apiOrCached) {


				console.log('return group %s articles', req.params.group);
				
				apiOrCached.method('list').end(res);
			});

		},

		/**!
		 * Returns a single curated article
		 * @param groupId the group that contains the article
		 * @param articleId
		 * @collection saved items  
		 * @displayName getSavedItem
		 */

		'pull \
		 -hook -method=GET -ttl=5  \
		groups/:group/articles/:article': function(req, res) {
	    
		 	       
			savedArticleDelegate.getArticle(req.group._id, req.params.article, function(apiOrCached) {


				apiOrCached.end(res);
			});
		},

		/**!
		 * Adds an article to the target group
		 * @param groupId
		 * @collection saved items   
		 * @displayName saveItem
		 */

		'pull \
		-hook -method=POST -perm=USER|SAVE_ARTICLE \
		remove/cache/savedArticles -> \
			groups/:group/articles OR \
			groups/:group/articles/save': function(req, res) {

				

			var url;

			if(req.query.url) {

				url = decodeURIComponent(req.query.url);

			} else {


				return vine.error('A url must be provided').end();
			}
			

			function saveItem(item) {


				savedArticleDelegate.saveArticle(req.group._id, item, function(api) {


					api.end(res);

				});
			}

			//we want to save a url     
			if(url.indexOf('://') > -1) {
	   

				var urlParts = Url.parse(url);

				if(urlParts.pathname) {


					var ext = urlParts.pathname.split('.').pop();

					//eh..
					if(ext.search(/jpeg|jpg|gif|png|tif|pdf|mov/) > -1) {


						return saveItem({ type: 'article', link: url, label: url, text: 'media' });

					}
				}

				//passively check promotions to see if the url already exists. this is optional
				//considering the promotions plugin is nota requirement...
				router.request('find/promotion').
				query(url).
				response(function(err, item) {

					//it does? Just copy it. 
					if(!err) return saveItem(item);
						
					router.request('scrape/article').
					query(url).
					success(function(response) {

						if(response.errors) {

							return vine.combine(response).end(res);
						}
						
						var article = response.result;
						
						
						saveItem({
							type: 'article',
							link: article.url || url,
							label: article.title,
							text: article.text,
							media: article.media
						});

					}).pull();

				}).pull();
				                                    
			} else {


				vine.error('Please provide the URL to the item you want to save.').end(res);

			}   
		},

		/**!
		 * Updates the an article
		 * @param groupId
		 * @param articleId
		 * @collection saved items
		 * @displayName updateSavedItem
		 */

		'pull \
		-hook -method=PUT -perm=USER \
		remove/cache/savedArticles -> \
			groups/:group/articles/:article': function(req, res) {
	    
				                
			console.log('Updating saved item');

			savedArticleDelegate.updateArticle(req.params.group, req.params.article, req.query, function (api) {

				api.end(res);

			});

		},

		/**!
		 * Removes an article
		 * @param groupId
		 * @param articleId                                                                
		 * @collection saved items  
		 * @displayName removeSavedItem
		 */

		'pull \
		-hook -method=DELETE -perm=USER \
		remove/cache/savedArticles -> \
			groups/:group/articles/:article': function(req, res) {
	    
				                          
			console.log('Removing saved item');
			
			savedArticleDelegate.unsaveArticle(req.group._id, req.params.article, function (api) {


				api.end(res);

			});	
		}
	});
	
	router.on({


		/**
		 */
		 
		'push \
		mongodb': onMongoDb,

		
		
		/**
		 * 
		 */
		
		'pull \
		groups/:group -> \
			groups/:group/articles/update/sent': function() {

			
		}
	});
}