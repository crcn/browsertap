var qs   = require('querystring'),
	smart = require('sk/core/smart').smart,
	request = require("request"),
	logger = require('winston').loggers.get('search.part.twitter'),
	sprintf = require('sprintf').sprintf;
	
exports.Twitter = Twitter;

function Twitter(auth)
{
	var rateLimitMessage;
	
	var loadJSON = function(url, data, callback) {

		if(!callback)
		{
			callback = data;
			data     = null;
		}
		
		if(rateLimitMessage) return callback(rateLimitMessage);    
			

		request.get({ url: url + '?' + qs.stringify(data), json: true }, function(e, r, body) { 

			if(body && body.error) {
				
				logger.error(sprintf('twitter response: %s', body.error));
			}

			if(body && body.error && body.error.toLowerCase().indexOf('rate limit') > -1)
			{
				calmDown(body);
			}

			callback(body); 


		});
	}	

	function calmDown(data)
	{
		rateLimitMessage = data;
		
		smart.timeout(function ()
		{
			rateLimitMessage = null;
		}, 1000 * 60);//1 minute
	}

	this.search = function (data, callback)
	{
		loadJSON('http://search.twitter.com/search.json', data, callback);
	}
	
	this.getUserTimeline = function (data, callback)
	{
		loadJSON('http://api.twitter.com/1/statuses/user_timeline.json', data, callback);
	}
	
	this.getAccountLists = function (account, callback)
	{
		auth.get('http://api.twitter.com/1/' + account.displayName + '/lists.json', account, null, function (err, data)
		{
			callback(JSON.parse(data));
		})
	}
	
	this.verifyCredentials = function(account, callback)
	{
		auth.get('http://api.twitter.com/1/account/verify_credentials.json',account, null, function(err, data)
		{
			try
			{
				callback(JSON.parse(data));
			}catch(e)
			{
				callback(false)
			}
		});
	}   
	
	
	this.followUser = function(account, user, callback)
	{
		auth.post('http://api.twitter.com/1/friendships/create.json', account, { screen_name: user }, function(err, data)
		{              
			
			if(err) return callback(err);
			                      
			try
			{
				callback(false, JSON.parse(data));
			}catch(e)
			{
				callback(false);
			}
		})
	}       
	
	this.unfollowUser = function(account, user, callback)
	{
		auth.post('http://api.twitter.com/1/friendships/destroy.json', account, { screen_name: user }, function(err, data)
		{              
			
			if(err) return callback(err);
			                      
			try
			{
				callback(false, JSON.parse(data));
			}catch(e)
			{
				callback(false);
			}
		})
	}   
	
	this.followingUser = function(account, user, callback)
	{                           
		auth.get('http://api.twitter.com/1/friendships/exists.json?screen_name_a='+account.displayName.toString()+'&screen_name_b='+user, account, null, function(err, result)
		{                                              
			return callback(false, result == 'true');
		})
	}

	this.unfollow = function(account, screenName, callback)
	{
		auth.post('http://api.twitter.com/1/friendships/destroy.json?screen_name='+screenName, account, null, callback)
	}

	this.follow = function(account, screenName, callback)
	{
		auth.post('http://api.twitter.com/1/friendships/create.json?screen_name='+screenName, account, null, callback)
	}

	this.getFollowing = function(account, callback)
	{
		auth.get('http://api.twitter.com/1/friends/ids.json', account, null, function(err, data)
		{
			callback(JSON.parse(data));
		})
	}

	this.userLookup = function(account, userids, callback)
	{
		auth.get('http://api.twitter.com/1/users/lookup.json?user_id=' + userids, account, null, function(err, data)
		{
			if(err) console.warn(err);
			if(err) return callback([]);

			callback(JSON.parse(data));
		})
	}
	
	this.loadDailyTrending = function(callback)
	{
		loadJSON('http://api.twitter.com/1/trends/daily.json',callback);
	}
	
	this.getPrivateListMembers = function(list, account, callback)
	{
		auth.get('http://api.twitter.com/1/' + list.user.screen_name + '/' + list.id_str + '/members.json', account, null, function(err, data)
		{
			callback(JSON.parse(data).users);
		});
	}

	this.updateStatus = function(data, callback)
	{
		auth.post('http://api.twitter.com/1/statuses/update.json', data.account, {status: data.status }, function (err, data)
		{                        
			callback(err,data ? JSON.parse(data) : null);  
		});
	}
	
	
}