var CacheDelegate  = require('./delegate'),
vine = require('vine');

exports.plugin = function(router) {


	var delegate;


	//FIXME
	return;
	
	router.on({

		/**
		 */

		'push mongodb': function(db) {

			delegate = new CacheDelegate(db);

		},
		
		/**!
		 * Caches the end path for the given duration. This is used as a pass-thru route.
		 * @param group the cache group - used for triggering a dump 
		 * @optional ttl the time to cache the item. Blank = forever until a trigger happens.
		 * @keys the additional data to use as a key for removing the group. Could be http query data
		 */

		'pull \
		cache OR \
		cache/:group OR \
		cache/:group/:ttl OR \
		cache/:group/:ttl/:keys': function(req, res, mw) {

			delegate.get(req, function(reader) {


				//reader exists? it's cached.
				if(reader) {

					console.log('Serving cached version of %s', req.path);

					return reader.pipe(request);
				}


				//cache for selected time, or for a day
				delegate.cache(req, mw.data('ttl') || (3600 * 24));

				if(!mw.next()) vine.error('Cannot call cacher directly').end(res);
			});
		},

		/**!
		 * Removes cached data.
		 * @param group the cache group to dump
		 * @param keys the additional keys to search for when dumping
		 */

		'pull \
		remove/cache/:group OR \
		remove/cache/:group/:keys': function(req, res, mw) {

			delegate.remove(req, function() {

				if(!mw.next()) return vine.message('success!').end(res);

			})
		}
	})
}