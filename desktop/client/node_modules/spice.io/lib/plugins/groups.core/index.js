var GroupDelegate = require('./delegate'),
	models = require('./models'),
	vine = require('vine'),
	Structr = require('structr'),
	logger = require('winston').loggers.get('groups.core'),
	sprintf = require('sprintf').sprintf;

exports.plugin = function(router)
{
	var delegate,
	GroupModel;



	function getSearch(publicNameOrId, search) {
		if(!search) search = {};

		//group id is not 24 characters long? It's a public name then
		if(publicNameOrId.length != 24 || !publicNameOrId.match(/^\w+$/)) {
			
			search.publicName = publicNameOrId;

		} else {
			
			search._id = publicNameOrId;

		} 

		return search;
	}
	
	        
	function loadGroups(req, res, mw, search) {      
	                    
		var data = mw.data(),
		sanitized = req.sanitized || {};
		     
		if(!search) search = {};     

		
		publicNameOrId = data.publicNameOrId || data.publicName || data.group || data._id,
		parent = sanitized.parent ? sanitized.parent._id.toString() : data.parent,
		type = data.type;             

		//one or the other, not both.
		if(publicNameOrId) {

			getSearch(publicNameOrId, search);

		} else {

			if(parent) {

				search.parent = parent;

			}  

			if(type) search.type = type;
		}


		//no properties defined? then return root.
		if(!parent && !publicNameOrId && !type) search.type = 'root';

		delegate.getGroups(search, function(err, items, watchable) {

			logger.verbose('loaded groups, nexting');

			req.groupWatchable = watchable;

			if(err) return vine.error(new Error('Unable to fetch groups')).end(res);     
			               
			req.groups = items;                                      
			
			if(search.publicName || search._id) req.group = items[0];
			if(!mw.next()) vine.result(items).end(res);

		});
	}


	/**
	 * groups
	 */

	router.on({


		/**
		 */

		'validate -optional -key=publicName groupName': function(req, next) {

			
			if(req.value > 23) throw new Error('Group public name is too long');

			logger.verbose('validated group is < 24 characters long');
					
			next();
		},

		/**
		 */

		'validate -key=group|parent -assign=group publicGroup': function(req, next) {

			logger.verbose('loading group');

			var search = getSearch(req.value);

			//profile provided? must be private.
			if(req.sanitized.access) {
				search.profile = { $in: req.sanitized.access.owners };
			}


			GroupModel.findOne(search, function(err, item) {

				if(!item) return next(new Error('Group does not exist'));

				next(null, item);
			});
		},


		/**
		 * checks if the group is owned by the given profile. This is required for granting
		 * users access to a particular item
		 */

		'pull owns/group/:group': function(req, res) {

			GroupModel.findOne({ profile: req.query.owner, _id: req.params.group }, res.success(function(group) {

				logger.verbose('checking if group is owned: ' + !!group);

				res.end(!!group);

			}))
		},

		/**
		 */
		
		'push \
		mongodb': function(db) {

			GroupModel = models(db).Group;                 
			delegate = new GroupDelegate(router, GroupModel);

		},

		/**
		 */
		
		'pull \
		-hook -perm -item=group -method=GET \
		groups': function(req, res, mw) {    

			logger.verbose('get groups');

			loadGroups(req, res, mw, { $or: [ { profile: req.access.owners.query }, {_id: req.access.collections.group.query }] });      
			              
		},

		/**
		 */

		'pull \
		-hook -method -item=group -unfilterable \
			validate/publicGroup -> \
				groups/:group/**': function(req, res, mw) {      

			logger.verbose('adding group from sanitized');

 			req.group = req.sanitized.group;
		                               
			if(!mw.next()) vine.result(req.group).end(res);     

		}, 
		
		/**!
		 * Returns the given group
		 * @param group either group ID, or public name
		 * @displayName getGroup
		 * @collection groups
		 * @example my/groups/{group}
		 */
		
		'pull \
		-hook -method OR -method=GET \
			groups/:group': function(req, res, mw) {      

			
			logger.verbose('groups endpoint');

 			req.group = req.sanitized.group;
		                               
			if(!mw.next()) vine.result(req.group).end(res);     

		},  
		   
		/**!
		 * Returns the ID of the given group.
		 * @param publicNameOrId
		 * @collection groups 
		 * @displayName getGroupId
		 * @example groups/{group name here}/id
		 */
		
		'pull \
		-hook -method=GET \
			groups/:group/id': function(req, res, mw) {

 			req.groupId = req.sanitized.group._id.toString();  
 
 			if(!mw.next()) {
 				vine.result(req.groupId).end(res);
 			}
		},


		/**!
		 * Creates a new group
		 * @see groups/:publicName/save
		 * @collection groups  
		 * @displayName createGroup
		 */

		'pull \
		-hook -perm -method=POST \
			validate/groupName -> \
				groups': function(req, res) { 
		                        
			logger.verbose("creating group");      
			
			var d = req.query;
			
			if(!d.name) d.name = 'Untitled';
			     
			var group = new GroupModel(d);   
			group.profile = req.sanitized.profile._id.toString();
			
			group.save(function(err) {

				if(err) return vine.error(err).end(res);
				
				vine.result(group).end(res);
			}) 
		},

		/**!
		 * Saves a group
		 * @param name the name of the group
		 * @param publicName the public name of the group. This unique in the database.
		 * @param parent the parent of the group
		 * @collection groups   
		 * @displayName updateGroup
		 */

		'pull \
		-hook -perm -item=group -method=PUT \
			validate/groupName -> \
				groups/:group': function(req, res) {
		               
		   logger.verbose("updating group");                
			          
			var group = req.group, api = vine.api(res);

			group.save(function(err) {

				if(err) return vine.error(err).end(res);
				
				vine.result(group).end(res);
			});
		},

		/**!
		 * Returns the children of the target group.
		 * @param parent public name or ID 
		 * @collection groups 
		 * @displayName getGroupChildren
		 */

		'pull \
		-hook -method=GET \
		groups/:parent/children': function(req, res, mw) {   
		                                          
			loadGroups(req, res, mw);
		},

		/**!
		 * Removes a group.
		 * @param publicNameOrId
		 * @collection groups  
		 * @displayName removeGroupChild
		 */

		'pull \
		-hook -perm -item=group -method=DELETE \
			groups/:group': function(req, res) {

			var group = req.group;
			                                
			logger.verbose(sprintf('Deleting group %s', group.publicName));

			group.remove(function() {

				vine.api().result(true).end(res);

			}); 
		}
	});
}