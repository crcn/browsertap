

module.exports = function(db)
{
	var Schema = db.base.Schema,
	ObjectId = Schema.ObjectId;

	var SpiceAppGroup = new Schema({
	
		//path to the group
		path: String,
		
		//the parent group
		parent: String, 
		
		//the owner of this group
		profile: String, 
		
		//name of group
		name: String,      
		
		//description of the group
		description: String,
		
		//the public name for the group
		publicName: { type: String, index: { unique: true } },
		
		//root,scene,group
		type: String,
		
		createdAt: Date,
		
		//last time owner loaded by group. change tis
		lastReadByOwner: Date,
		
		//additonal stuff we can attach to the group such as description, among other things
		media: {}
	}, { strict: true });

	SpiceAppGroup.pre('remove', function (next)
	{
		var doc = this,
			Model = this.constructor,
			self = this;
			
		Model.remove({ path: new RegExp('^' + doc.path) }, function (err, result)
		{
			next();
		});
	});

	SpiceAppGroup.path('parent').set(function (v)
	{
		return v;
	});


	SpiceAppGroup.pre('save', function (next)
	{
		var doc = this,
			profile = doc.profile,
			Model = this.constructor,
			self = this;


		if(!this.publicName) this.publicName = this._id.toString();

		function save(path)
		{		
			if(!doc.createdAt) doc.createdAt = new Date();
			doc.path = path+doc._id+',';
			next();
		}

		function saveNew()
		{
			var rootGroupSearch = { profile: profile, type: 'root'};

			Model.findOne(rootGroupSearch, function (err, root)
			{

				function onRoot(root)
				{
					//one level down from root, we have scenes
					doc.type = 'scene';
					doc.parent = root._id.toString();
					save(root.path)
				}

				if(root)
				{
					//always happens second time around, but there should only be ONE root. Yeah I was thinking
					//of doing a unique key with mongo, but gnfkagndgnakln.
					if(doc.type == 'root')
					{
						next(new Error('A root group already exists.'))
					}
					else
					{
						onRoot(root);
					}
				}
				else
				if(doc.type == 'root')
				{
					next();
				}
				else
				{
					root = new Model(rootGroupSearch);
					root.path = root._id+',';
					root.type = 'root';

					root.save(function(e)
					{
						onRoot(root);
					});
				}
			});
		}



		//parent exists? find it, then save the group
		if(doc.parent)
		{
			Model.findOne({ profile: profile, _id: doc.parent }, function(err, parent)
			{
				//NO parent. probably null, so set to root
				// if(!parent) return next(new Error('The parent '+doc.parent+' does not exist.'));
				if(!parent)
				{
					if(!self.isNew) save(''); else saveNew();

					return;
				}

				save(parent.path);
			});
		}
		else
		if(!this.isNew)
		{
			save('');
		}
		else
		{
			saveNew();
		}
	});

	return {
		Group: db.model('groups', SpiceAppGroup)
	}
}

