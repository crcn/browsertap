#!/usr/bin/env node

var cli = require('optimist').
usage("Usage: $0 [targets] -i=[target] --arg=[value]").
alias('i','input').
default('i',"./package.json"),
argv = cli.argv,
capirona = require('capirona'),
path     = require('path'),
step     = require('stepc'),
outcome  = require('outcome'),
fs       = require('fs'),
structr  = require('structr');

if(argv.h || argv.help) {
	cli.showHelp();
	process.exit();
}

function fixPath(path) {
	return path.replace('~', process.env.HOME).replace('./', process.cwd() + "/")
}

var makeTarget = fixPath(argv.i);


argv.cwd          = path.dirname(makeTarget);


var on = outcome.error(function(e) {
	
	console.error(e.message);

});

step(

	/**
	 */

	function() {

		path.exists(makeTarget, this);

	},

	/**
	 */

	function(exists) {

		if(exists) {

			fs.readFile(makeTarget, "utf8", this);

		} else {

			this();

		}
	},

	/**
	 */

	on.success(function(content) {

		if(!content) return this(null, {  mesh: {} });
		this(null, JSON.parse(content));

	}),

	/**
	 */

	on.success(function(pkg) {

		pkg.cwd = argv.cwd;

		var mesh = pkg.mesh;
		delete pkg.mesh;

		capirona.
		make().
		load(__dirname + "/../default/config.js").
		load(fixPath('~/.mesh/config.json')).
		load(mesh).
		run(argv._, structr.copy(argv, pkg), this);

	}),

	/**
	 */

	on.success(function() {

		//console.log('done without errors');

	})
)

