//
// Autogenerated by Thrift Compiler (0.8.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};
var MouseCommand = module.exports.MouseCommand = function(args) {
  this.x = null;
  this.y = null;
  this.code = null;
  this.data = null;
  if (args) {
    if (args.x !== undefined) {
      this.x = args.x;
    }
    if (args.y !== undefined) {
      this.y = args.y;
    }
    if (args.code !== undefined) {
      this.code = args.code;
    }
    if (args.data !== undefined) {
      this.data = args.data;
    }
  }
};
MouseCommand.prototype = {};
MouseCommand.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.x = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.y = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.data = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MouseCommand.prototype.write = function(output) {
  output.writeStructBegin('MouseCommand');
  if (this.x) {
    output.writeFieldBegin('x', Thrift.Type.I32, 1);
    output.writeI32(this.x);
    output.writeFieldEnd();
  }
  if (this.y) {
    output.writeFieldBegin('y', Thrift.Type.I32, 2);
    output.writeI32(this.y);
    output.writeFieldEnd();
  }
  if (this.code) {
    output.writeFieldBegin('code', Thrift.Type.I32, 3);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.data) {
    output.writeFieldBegin('data', Thrift.Type.I32, 4);
    output.writeI32(this.data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var KeyboardCommand = module.exports.KeyboardCommand = function(args) {
  this.key = null;
  this.modifiers = null;
  this.dwFlags = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.modifiers !== undefined) {
      this.modifiers = args.modifiers;
    }
    if (args.dwFlags !== undefined) {
      this.dwFlags = args.dwFlags;
    }
  }
};
KeyboardCommand.prototype = {};
KeyboardCommand.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.key = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.modifiers = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.dwFlags = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KeyboardCommand.prototype.write = function(output) {
  output.writeStructBegin('KeyboardCommand');
  if (this.key) {
    output.writeFieldBegin('key', Thrift.Type.I32, 1);
    output.writeI32(this.key);
    output.writeFieldEnd();
  }
  if (this.modifiers) {
    output.writeFieldBegin('modifiers', Thrift.Type.I32, 2);
    output.writeI32(this.modifiers);
    output.writeFieldEnd();
  }
  if (this.dwFlags) {
    output.writeFieldBegin('dwFlags', Thrift.Type.I32, 3);
    output.writeI32(this.dwFlags);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RecordContext = module.exports.RecordContext = function(args) {
  this.left = 0;
  this.right = 0;
  this.top = 0;
  this.bottom = 0;
  this.width = 0;
  this.height = 0;
  this.frameRate = 24;
  this.gopSize = 12;
  this.bitRate = 15360000;
  this.qmin = 1;
  this.qmax = 11;
  this.bit_rate_tolerance = -1;
  this.qcompress = -1;
  this.qblur = -1;
  this.max_qdiff = -1;
  this.max_b_frames = -1;
  this.b_quant_factor = -1;
  this.luma_elim_threshold = -1;
  this.chroma_elim_threshold = -1;
  this.b_quant_offset = -1;
  this.rc_qsquish = -1;
  this.rc_eq = -1;
  this.rc_max_rate = -1;
  this.rc_min_rate = -1;
  this.rc_buffer_aggressivity = -1;
  this.i_quant_factor = -1;
  this.i_quant_offset = -1;
  this.rc_initial_cplx = -1;
  this.luma_masking = -1;
  this.temporal_cplx_masking = -1;
  this.spatial_cplx_masking = -1;
  this.p_kasing = -1;
  this.dark_masking = -1;
  this.dsp_mask = -1;
  this.bits_per_coded_sample = -1;
  this.prediction_method = -1;
  this.me_cmp = -1;
  this.me_sub_cmp = -1;
  this.dia_size = -1;
  this.pre_me = -1;
  this.pre_dia_size = -1;
  this.me_subpel_quality = -1;
  this.me_range = -1;
  this.intra_quant_bias = -1;
  this.global_quality = -1;
  this.coder_type = -1;
  this.mb_decision = -1;
  this.lmin = -1;
  this.lmax = -1;
  this.scenechange_threshold = -1;
  this.noise_reduction = -1;
  this.inter_threshold = -1;
  this.quantizer_noise_shaping = -1;
  this.me_threshold = -1;
  this.mb_threshold = -1;
  this.intra_dc_precision = -1;
  this.nsse_weight = -1;
  this.profile = -1;
  this.level = -1;
  this.mb_lmin = -1;
  this.mb_lmax = -1;
  this.me_penalty_compensation = -1;
  this.bidir_refine = -1;
  this.brd_scale = -1;
  this.crf = -1;
  this.cqp = -1;
  this.keyint_min = -1;
  this.refs = -1;
  this.chromaoffset = -1;
  this.bframebias = -1;
  this.trellis = -1;
  this.complexityblur = -1;
  this.deblockalpha = -1;
  this.deblockbeta = -1;
  this.partitions = -1;
  this.directpred = -1;
  this.scenechange_factor = -1;
  this.b_sensitivity = -1;
  this.compression_level = -1;
  this.use_lpc = -1;
  this.lpc_coeff_precision = -1;
  this.min_prediction_order = -1;
  this.max_prediction_order = -1;
  this.prediction_order_method = -1;
  this.min_partiion_order = -1;
  this.max_partition_order = -1;
  this.min_partition_order = -1;
  this.aq_mode = -1;
  this.psyd_rd = -1;
  this.psy_trellis = -1;
  this.captureTimeout = 1;
  this.qscale = 2;
  if (args) {
    if (args.left !== undefined) {
      this.left = args.left;
    }
    if (args.right !== undefined) {
      this.right = args.right;
    }
    if (args.top !== undefined) {
      this.top = args.top;
    }
    if (args.bottom !== undefined) {
      this.bottom = args.bottom;
    }
    if (args.width !== undefined) {
      this.width = args.width;
    }
    if (args.height !== undefined) {
      this.height = args.height;
    }
    if (args.frameRate !== undefined) {
      this.frameRate = args.frameRate;
    }
    if (args.gopSize !== undefined) {
      this.gopSize = args.gopSize;
    }
    if (args.bitRate !== undefined) {
      this.bitRate = args.bitRate;
    }
    if (args.qmin !== undefined) {
      this.qmin = args.qmin;
    }
    if (args.qmax !== undefined) {
      this.qmax = args.qmax;
    }
    if (args.bit_rate_tolerance !== undefined) {
      this.bit_rate_tolerance = args.bit_rate_tolerance;
    }
    if (args.qcompress !== undefined) {
      this.qcompress = args.qcompress;
    }
    if (args.qblur !== undefined) {
      this.qblur = args.qblur;
    }
    if (args.max_qdiff !== undefined) {
      this.max_qdiff = args.max_qdiff;
    }
    if (args.max_b_frames !== undefined) {
      this.max_b_frames = args.max_b_frames;
    }
    if (args.b_quant_factor !== undefined) {
      this.b_quant_factor = args.b_quant_factor;
    }
    if (args.luma_elim_threshold !== undefined) {
      this.luma_elim_threshold = args.luma_elim_threshold;
    }
    if (args.chroma_elim_threshold !== undefined) {
      this.chroma_elim_threshold = args.chroma_elim_threshold;
    }
    if (args.b_quant_offset !== undefined) {
      this.b_quant_offset = args.b_quant_offset;
    }
    if (args.rc_qsquish !== undefined) {
      this.rc_qsquish = args.rc_qsquish;
    }
    if (args.rc_eq !== undefined) {
      this.rc_eq = args.rc_eq;
    }
    if (args.rc_max_rate !== undefined) {
      this.rc_max_rate = args.rc_max_rate;
    }
    if (args.rc_min_rate !== undefined) {
      this.rc_min_rate = args.rc_min_rate;
    }
    if (args.rc_buffer_aggressivity !== undefined) {
      this.rc_buffer_aggressivity = args.rc_buffer_aggressivity;
    }
    if (args.i_quant_factor !== undefined) {
      this.i_quant_factor = args.i_quant_factor;
    }
    if (args.i_quant_offset !== undefined) {
      this.i_quant_offset = args.i_quant_offset;
    }
    if (args.rc_initial_cplx !== undefined) {
      this.rc_initial_cplx = args.rc_initial_cplx;
    }
    if (args.luma_masking !== undefined) {
      this.luma_masking = args.luma_masking;
    }
    if (args.temporal_cplx_masking !== undefined) {
      this.temporal_cplx_masking = args.temporal_cplx_masking;
    }
    if (args.spatial_cplx_masking !== undefined) {
      this.spatial_cplx_masking = args.spatial_cplx_masking;
    }
    if (args.p_kasing !== undefined) {
      this.p_kasing = args.p_kasing;
    }
    if (args.dark_masking !== undefined) {
      this.dark_masking = args.dark_masking;
    }
    if (args.dsp_mask !== undefined) {
      this.dsp_mask = args.dsp_mask;
    }
    if (args.bits_per_coded_sample !== undefined) {
      this.bits_per_coded_sample = args.bits_per_coded_sample;
    }
    if (args.prediction_method !== undefined) {
      this.prediction_method = args.prediction_method;
    }
    if (args.me_cmp !== undefined) {
      this.me_cmp = args.me_cmp;
    }
    if (args.me_sub_cmp !== undefined) {
      this.me_sub_cmp = args.me_sub_cmp;
    }
    if (args.dia_size !== undefined) {
      this.dia_size = args.dia_size;
    }
    if (args.pre_me !== undefined) {
      this.pre_me = args.pre_me;
    }
    if (args.pre_dia_size !== undefined) {
      this.pre_dia_size = args.pre_dia_size;
    }
    if (args.me_subpel_quality !== undefined) {
      this.me_subpel_quality = args.me_subpel_quality;
    }
    if (args.me_range !== undefined) {
      this.me_range = args.me_range;
    }
    if (args.intra_quant_bias !== undefined) {
      this.intra_quant_bias = args.intra_quant_bias;
    }
    if (args.global_quality !== undefined) {
      this.global_quality = args.global_quality;
    }
    if (args.coder_type !== undefined) {
      this.coder_type = args.coder_type;
    }
    if (args.mb_decision !== undefined) {
      this.mb_decision = args.mb_decision;
    }
    if (args.lmin !== undefined) {
      this.lmin = args.lmin;
    }
    if (args.lmax !== undefined) {
      this.lmax = args.lmax;
    }
    if (args.scenechange_threshold !== undefined) {
      this.scenechange_threshold = args.scenechange_threshold;
    }
    if (args.noise_reduction !== undefined) {
      this.noise_reduction = args.noise_reduction;
    }
    if (args.inter_threshold !== undefined) {
      this.inter_threshold = args.inter_threshold;
    }
    if (args.quantizer_noise_shaping !== undefined) {
      this.quantizer_noise_shaping = args.quantizer_noise_shaping;
    }
    if (args.me_threshold !== undefined) {
      this.me_threshold = args.me_threshold;
    }
    if (args.mb_threshold !== undefined) {
      this.mb_threshold = args.mb_threshold;
    }
    if (args.intra_dc_precision !== undefined) {
      this.intra_dc_precision = args.intra_dc_precision;
    }
    if (args.nsse_weight !== undefined) {
      this.nsse_weight = args.nsse_weight;
    }
    if (args.profile !== undefined) {
      this.profile = args.profile;
    }
    if (args.level !== undefined) {
      this.level = args.level;
    }
    if (args.mb_lmin !== undefined) {
      this.mb_lmin = args.mb_lmin;
    }
    if (args.mb_lmax !== undefined) {
      this.mb_lmax = args.mb_lmax;
    }
    if (args.me_penalty_compensation !== undefined) {
      this.me_penalty_compensation = args.me_penalty_compensation;
    }
    if (args.bidir_refine !== undefined) {
      this.bidir_refine = args.bidir_refine;
    }
    if (args.brd_scale !== undefined) {
      this.brd_scale = args.brd_scale;
    }
    if (args.crf !== undefined) {
      this.crf = args.crf;
    }
    if (args.cqp !== undefined) {
      this.cqp = args.cqp;
    }
    if (args.keyint_min !== undefined) {
      this.keyint_min = args.keyint_min;
    }
    if (args.refs !== undefined) {
      this.refs = args.refs;
    }
    if (args.chromaoffset !== undefined) {
      this.chromaoffset = args.chromaoffset;
    }
    if (args.bframebias !== undefined) {
      this.bframebias = args.bframebias;
    }
    if (args.trellis !== undefined) {
      this.trellis = args.trellis;
    }
    if (args.complexityblur !== undefined) {
      this.complexityblur = args.complexityblur;
    }
    if (args.deblockalpha !== undefined) {
      this.deblockalpha = args.deblockalpha;
    }
    if (args.deblockbeta !== undefined) {
      this.deblockbeta = args.deblockbeta;
    }
    if (args.partitions !== undefined) {
      this.partitions = args.partitions;
    }
    if (args.directpred !== undefined) {
      this.directpred = args.directpred;
    }
    if (args.scenechange_factor !== undefined) {
      this.scenechange_factor = args.scenechange_factor;
    }
    if (args.b_sensitivity !== undefined) {
      this.b_sensitivity = args.b_sensitivity;
    }
    if (args.compression_level !== undefined) {
      this.compression_level = args.compression_level;
    }
    if (args.use_lpc !== undefined) {
      this.use_lpc = args.use_lpc;
    }
    if (args.lpc_coeff_precision !== undefined) {
      this.lpc_coeff_precision = args.lpc_coeff_precision;
    }
    if (args.min_prediction_order !== undefined) {
      this.min_prediction_order = args.min_prediction_order;
    }
    if (args.max_prediction_order !== undefined) {
      this.max_prediction_order = args.max_prediction_order;
    }
    if (args.prediction_order_method !== undefined) {
      this.prediction_order_method = args.prediction_order_method;
    }
    if (args.min_partiion_order !== undefined) {
      this.min_partiion_order = args.min_partiion_order;
    }
    if (args.max_partition_order !== undefined) {
      this.max_partition_order = args.max_partition_order;
    }
    if (args.min_partition_order !== undefined) {
      this.min_partition_order = args.min_partition_order;
    }
    if (args.aq_mode !== undefined) {
      this.aq_mode = args.aq_mode;
    }
    if (args.psyd_rd !== undefined) {
      this.psyd_rd = args.psyd_rd;
    }
    if (args.psy_trellis !== undefined) {
      this.psy_trellis = args.psy_trellis;
    }
    if (args.captureTimeout !== undefined) {
      this.captureTimeout = args.captureTimeout;
    }
    if (args.qscale !== undefined) {
      this.qscale = args.qscale;
    }
  }
};
RecordContext.prototype = {};
RecordContext.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.left = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.right = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.top = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.bottom = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.width = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.height = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.frameRate = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.gopSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.bitRate = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.qmin = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.qmax = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.bit_rate_tolerance = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.DOUBLE) {
        this.qcompress = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.DOUBLE) {
        this.qblur = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I32) {
        this.max_qdiff = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I32) {
        this.max_b_frames = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.DOUBLE) {
        this.b_quant_factor = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I32) {
        this.luma_elim_threshold = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.I32) {
        this.chroma_elim_threshold = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.DOUBLE) {
        this.b_quant_offset = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.DOUBLE) {
        this.rc_qsquish = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.I32) {
        this.rc_eq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.I32) {
        this.rc_max_rate = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.I32) {
        this.rc_min_rate = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.DOUBLE) {
        this.rc_buffer_aggressivity = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.DOUBLE) {
        this.i_quant_factor = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.DOUBLE) {
        this.i_quant_offset = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.DOUBLE) {
        this.rc_initial_cplx = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 29:
      if (ftype == Thrift.Type.DOUBLE) {
        this.luma_masking = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.DOUBLE) {
        this.temporal_cplx_masking = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.DOUBLE) {
        this.spatial_cplx_masking = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.DOUBLE) {
        this.p_kasing = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 33:
      if (ftype == Thrift.Type.DOUBLE) {
        this.dark_masking = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 34:
      if (ftype == Thrift.Type.I32) {
        this.dsp_mask = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 35:
      if (ftype == Thrift.Type.I32) {
        this.bits_per_coded_sample = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 36:
      if (ftype == Thrift.Type.I32) {
        this.prediction_method = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 37:
      if (ftype == Thrift.Type.I32) {
        this.me_cmp = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 38:
      if (ftype == Thrift.Type.I32) {
        this.me_sub_cmp = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 39:
      if (ftype == Thrift.Type.I32) {
        this.dia_size = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.I32) {
        this.pre_me = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 41:
      if (ftype == Thrift.Type.I32) {
        this.pre_dia_size = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 42:
      if (ftype == Thrift.Type.I32) {
        this.me_subpel_quality = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 43:
      if (ftype == Thrift.Type.I32) {
        this.me_range = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 44:
      if (ftype == Thrift.Type.I32) {
        this.intra_quant_bias = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 45:
      if (ftype == Thrift.Type.I32) {
        this.global_quality = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 46:
      if (ftype == Thrift.Type.I32) {
        this.coder_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 47:
      if (ftype == Thrift.Type.I32) {
        this.mb_decision = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 48:
      if (ftype == Thrift.Type.I32) {
        this.lmin = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 49:
      if (ftype == Thrift.Type.I32) {
        this.lmax = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 50:
      if (ftype == Thrift.Type.I32) {
        this.scenechange_threshold = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 51:
      if (ftype == Thrift.Type.I32) {
        this.noise_reduction = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 52:
      if (ftype == Thrift.Type.I32) {
        this.inter_threshold = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 53:
      if (ftype == Thrift.Type.I32) {
        this.quantizer_noise_shaping = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 54:
      if (ftype == Thrift.Type.I32) {
        this.me_threshold = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 55:
      if (ftype == Thrift.Type.I32) {
        this.mb_threshold = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 56:
      if (ftype == Thrift.Type.I32) {
        this.intra_dc_precision = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 57:
      if (ftype == Thrift.Type.I32) {
        this.nsse_weight = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 58:
      if (ftype == Thrift.Type.I32) {
        this.profile = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 59:
      if (ftype == Thrift.Type.I32) {
        this.level = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 60:
      if (ftype == Thrift.Type.I32) {
        this.mb_lmin = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 61:
      if (ftype == Thrift.Type.I32) {
        this.mb_lmax = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 70:
      if (ftype == Thrift.Type.I32) {
        this.me_penalty_compensation = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 71:
      if (ftype == Thrift.Type.I32) {
        this.bidir_refine = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 72:
      if (ftype == Thrift.Type.I32) {
        this.brd_scale = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 73:
      if (ftype == Thrift.Type.DOUBLE) {
        this.crf = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 74:
      if (ftype == Thrift.Type.DOUBLE) {
        this.cqp = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 75:
      if (ftype == Thrift.Type.I32) {
        this.keyint_min = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 76:
      if (ftype == Thrift.Type.I32) {
        this.refs = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 77:
      if (ftype == Thrift.Type.I32) {
        this.chromaoffset = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 78:
      if (ftype == Thrift.Type.I32) {
        this.bframebias = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 79:
      if (ftype == Thrift.Type.I32) {
        this.trellis = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 80:
      if (ftype == Thrift.Type.DOUBLE) {
        this.complexityblur = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 81:
      if (ftype == Thrift.Type.I32) {
        this.deblockalpha = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 82:
      if (ftype == Thrift.Type.I32) {
        this.deblockbeta = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 83:
      if (ftype == Thrift.Type.I32) {
        this.partitions = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 84:
      if (ftype == Thrift.Type.I32) {
        this.directpred = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 85:
      if (ftype == Thrift.Type.I32) {
        this.scenechange_factor = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 86:
      if (ftype == Thrift.Type.I32) {
        this.b_sensitivity = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 87:
      if (ftype == Thrift.Type.I32) {
        this.compression_level = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 88:
      if (ftype == Thrift.Type.I32) {
        this.use_lpc = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 89:
      if (ftype == Thrift.Type.I32) {
        this.lpc_coeff_precision = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 90:
      if (ftype == Thrift.Type.I32) {
        this.min_prediction_order = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 91:
      if (ftype == Thrift.Type.I32) {
        this.max_prediction_order = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 92:
      if (ftype == Thrift.Type.I32) {
        this.prediction_order_method = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 93:
      if (ftype == Thrift.Type.I32) {
        this.min_partiion_order = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 94:
      if (ftype == Thrift.Type.I32) {
        this.max_partition_order = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 95:
      if (ftype == Thrift.Type.I32) {
        this.min_partition_order = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 96:
      if (ftype == Thrift.Type.DOUBLE) {
        this.aq_mode = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 97:
      if (ftype == Thrift.Type.DOUBLE) {
        this.psyd_rd = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 98:
      if (ftype == Thrift.Type.DOUBLE) {
        this.psy_trellis = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 99:
      if (ftype == Thrift.Type.I32) {
        this.captureTimeout = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 100:
      if (ftype == Thrift.Type.I32) {
        this.qscale = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RecordContext.prototype.write = function(output) {
  output.writeStructBegin('RecordContext');
  if (this.left) {
    output.writeFieldBegin('left', Thrift.Type.I32, 1);
    output.writeI32(this.left);
    output.writeFieldEnd();
  }
  if (this.right) {
    output.writeFieldBegin('right', Thrift.Type.I32, 2);
    output.writeI32(this.right);
    output.writeFieldEnd();
  }
  if (this.top) {
    output.writeFieldBegin('top', Thrift.Type.I32, 3);
    output.writeI32(this.top);
    output.writeFieldEnd();
  }
  if (this.bottom) {
    output.writeFieldBegin('bottom', Thrift.Type.I32, 4);
    output.writeI32(this.bottom);
    output.writeFieldEnd();
  }
  if (this.width) {
    output.writeFieldBegin('width', Thrift.Type.I32, 5);
    output.writeI32(this.width);
    output.writeFieldEnd();
  }
  if (this.height) {
    output.writeFieldBegin('height', Thrift.Type.I32, 6);
    output.writeI32(this.height);
    output.writeFieldEnd();
  }
  if (this.frameRate) {
    output.writeFieldBegin('frameRate', Thrift.Type.I32, 7);
    output.writeI32(this.frameRate);
    output.writeFieldEnd();
  }
  if (this.gopSize) {
    output.writeFieldBegin('gopSize', Thrift.Type.I32, 8);
    output.writeI32(this.gopSize);
    output.writeFieldEnd();
  }
  if (this.bitRate) {
    output.writeFieldBegin('bitRate', Thrift.Type.I32, 9);
    output.writeI32(this.bitRate);
    output.writeFieldEnd();
  }
  if (this.qmin) {
    output.writeFieldBegin('qmin', Thrift.Type.I32, 10);
    output.writeI32(this.qmin);
    output.writeFieldEnd();
  }
  if (this.qmax) {
    output.writeFieldBegin('qmax', Thrift.Type.I32, 11);
    output.writeI32(this.qmax);
    output.writeFieldEnd();
  }
  if (this.bit_rate_tolerance) {
    output.writeFieldBegin('bit_rate_tolerance', Thrift.Type.I32, 12);
    output.writeI32(this.bit_rate_tolerance);
    output.writeFieldEnd();
  }
  if (this.qcompress) {
    output.writeFieldBegin('qcompress', Thrift.Type.DOUBLE, 13);
    output.writeDouble(this.qcompress);
    output.writeFieldEnd();
  }
  if (this.qblur) {
    output.writeFieldBegin('qblur', Thrift.Type.DOUBLE, 14);
    output.writeDouble(this.qblur);
    output.writeFieldEnd();
  }
  if (this.max_qdiff) {
    output.writeFieldBegin('max_qdiff', Thrift.Type.I32, 15);
    output.writeI32(this.max_qdiff);
    output.writeFieldEnd();
  }
  if (this.max_b_frames) {
    output.writeFieldBegin('max_b_frames', Thrift.Type.I32, 16);
    output.writeI32(this.max_b_frames);
    output.writeFieldEnd();
  }
  if (this.b_quant_factor) {
    output.writeFieldBegin('b_quant_factor', Thrift.Type.DOUBLE, 17);
    output.writeDouble(this.b_quant_factor);
    output.writeFieldEnd();
  }
  if (this.luma_elim_threshold) {
    output.writeFieldBegin('luma_elim_threshold', Thrift.Type.I32, 18);
    output.writeI32(this.luma_elim_threshold);
    output.writeFieldEnd();
  }
  if (this.chroma_elim_threshold) {
    output.writeFieldBegin('chroma_elim_threshold', Thrift.Type.I32, 19);
    output.writeI32(this.chroma_elim_threshold);
    output.writeFieldEnd();
  }
  if (this.b_quant_offset) {
    output.writeFieldBegin('b_quant_offset', Thrift.Type.DOUBLE, 20);
    output.writeDouble(this.b_quant_offset);
    output.writeFieldEnd();
  }
  if (this.rc_qsquish) {
    output.writeFieldBegin('rc_qsquish', Thrift.Type.DOUBLE, 21);
    output.writeDouble(this.rc_qsquish);
    output.writeFieldEnd();
  }
  if (this.rc_eq) {
    output.writeFieldBegin('rc_eq', Thrift.Type.I32, 22);
    output.writeI32(this.rc_eq);
    output.writeFieldEnd();
  }
  if (this.rc_max_rate) {
    output.writeFieldBegin('rc_max_rate', Thrift.Type.I32, 23);
    output.writeI32(this.rc_max_rate);
    output.writeFieldEnd();
  }
  if (this.rc_min_rate) {
    output.writeFieldBegin('rc_min_rate', Thrift.Type.I32, 24);
    output.writeI32(this.rc_min_rate);
    output.writeFieldEnd();
  }
  if (this.rc_buffer_aggressivity) {
    output.writeFieldBegin('rc_buffer_aggressivity', Thrift.Type.DOUBLE, 25);
    output.writeDouble(this.rc_buffer_aggressivity);
    output.writeFieldEnd();
  }
  if (this.i_quant_factor) {
    output.writeFieldBegin('i_quant_factor', Thrift.Type.DOUBLE, 26);
    output.writeDouble(this.i_quant_factor);
    output.writeFieldEnd();
  }
  if (this.i_quant_offset) {
    output.writeFieldBegin('i_quant_offset', Thrift.Type.DOUBLE, 27);
    output.writeDouble(this.i_quant_offset);
    output.writeFieldEnd();
  }
  if (this.rc_initial_cplx) {
    output.writeFieldBegin('rc_initial_cplx', Thrift.Type.DOUBLE, 28);
    output.writeDouble(this.rc_initial_cplx);
    output.writeFieldEnd();
  }
  if (this.luma_masking) {
    output.writeFieldBegin('luma_masking', Thrift.Type.DOUBLE, 29);
    output.writeDouble(this.luma_masking);
    output.writeFieldEnd();
  }
  if (this.temporal_cplx_masking) {
    output.writeFieldBegin('temporal_cplx_masking', Thrift.Type.DOUBLE, 30);
    output.writeDouble(this.temporal_cplx_masking);
    output.writeFieldEnd();
  }
  if (this.spatial_cplx_masking) {
    output.writeFieldBegin('spatial_cplx_masking', Thrift.Type.DOUBLE, 31);
    output.writeDouble(this.spatial_cplx_masking);
    output.writeFieldEnd();
  }
  if (this.p_kasing) {
    output.writeFieldBegin('p_kasing', Thrift.Type.DOUBLE, 32);
    output.writeDouble(this.p_kasing);
    output.writeFieldEnd();
  }
  if (this.dark_masking) {
    output.writeFieldBegin('dark_masking', Thrift.Type.DOUBLE, 33);
    output.writeDouble(this.dark_masking);
    output.writeFieldEnd();
  }
  if (this.dsp_mask) {
    output.writeFieldBegin('dsp_mask', Thrift.Type.I32, 34);
    output.writeI32(this.dsp_mask);
    output.writeFieldEnd();
  }
  if (this.bits_per_coded_sample) {
    output.writeFieldBegin('bits_per_coded_sample', Thrift.Type.I32, 35);
    output.writeI32(this.bits_per_coded_sample);
    output.writeFieldEnd();
  }
  if (this.prediction_method) {
    output.writeFieldBegin('prediction_method', Thrift.Type.I32, 36);
    output.writeI32(this.prediction_method);
    output.writeFieldEnd();
  }
  if (this.me_cmp) {
    output.writeFieldBegin('me_cmp', Thrift.Type.I32, 37);
    output.writeI32(this.me_cmp);
    output.writeFieldEnd();
  }
  if (this.me_sub_cmp) {
    output.writeFieldBegin('me_sub_cmp', Thrift.Type.I32, 38);
    output.writeI32(this.me_sub_cmp);
    output.writeFieldEnd();
  }
  if (this.dia_size) {
    output.writeFieldBegin('dia_size', Thrift.Type.I32, 39);
    output.writeI32(this.dia_size);
    output.writeFieldEnd();
  }
  if (this.pre_me) {
    output.writeFieldBegin('pre_me', Thrift.Type.I32, 40);
    output.writeI32(this.pre_me);
    output.writeFieldEnd();
  }
  if (this.pre_dia_size) {
    output.writeFieldBegin('pre_dia_size', Thrift.Type.I32, 41);
    output.writeI32(this.pre_dia_size);
    output.writeFieldEnd();
  }
  if (this.me_subpel_quality) {
    output.writeFieldBegin('me_subpel_quality', Thrift.Type.I32, 42);
    output.writeI32(this.me_subpel_quality);
    output.writeFieldEnd();
  }
  if (this.me_range) {
    output.writeFieldBegin('me_range', Thrift.Type.I32, 43);
    output.writeI32(this.me_range);
    output.writeFieldEnd();
  }
  if (this.intra_quant_bias) {
    output.writeFieldBegin('intra_quant_bias', Thrift.Type.I32, 44);
    output.writeI32(this.intra_quant_bias);
    output.writeFieldEnd();
  }
  if (this.global_quality) {
    output.writeFieldBegin('global_quality', Thrift.Type.I32, 45);
    output.writeI32(this.global_quality);
    output.writeFieldEnd();
  }
  if (this.coder_type) {
    output.writeFieldBegin('coder_type', Thrift.Type.I32, 46);
    output.writeI32(this.coder_type);
    output.writeFieldEnd();
  }
  if (this.mb_decision) {
    output.writeFieldBegin('mb_decision', Thrift.Type.I32, 47);
    output.writeI32(this.mb_decision);
    output.writeFieldEnd();
  }
  if (this.lmin) {
    output.writeFieldBegin('lmin', Thrift.Type.I32, 48);
    output.writeI32(this.lmin);
    output.writeFieldEnd();
  }
  if (this.lmax) {
    output.writeFieldBegin('lmax', Thrift.Type.I32, 49);
    output.writeI32(this.lmax);
    output.writeFieldEnd();
  }
  if (this.scenechange_threshold) {
    output.writeFieldBegin('scenechange_threshold', Thrift.Type.I32, 50);
    output.writeI32(this.scenechange_threshold);
    output.writeFieldEnd();
  }
  if (this.noise_reduction) {
    output.writeFieldBegin('noise_reduction', Thrift.Type.I32, 51);
    output.writeI32(this.noise_reduction);
    output.writeFieldEnd();
  }
  if (this.inter_threshold) {
    output.writeFieldBegin('inter_threshold', Thrift.Type.I32, 52);
    output.writeI32(this.inter_threshold);
    output.writeFieldEnd();
  }
  if (this.quantizer_noise_shaping) {
    output.writeFieldBegin('quantizer_noise_shaping', Thrift.Type.I32, 53);
    output.writeI32(this.quantizer_noise_shaping);
    output.writeFieldEnd();
  }
  if (this.me_threshold) {
    output.writeFieldBegin('me_threshold', Thrift.Type.I32, 54);
    output.writeI32(this.me_threshold);
    output.writeFieldEnd();
  }
  if (this.mb_threshold) {
    output.writeFieldBegin('mb_threshold', Thrift.Type.I32, 55);
    output.writeI32(this.mb_threshold);
    output.writeFieldEnd();
  }
  if (this.intra_dc_precision) {
    output.writeFieldBegin('intra_dc_precision', Thrift.Type.I32, 56);
    output.writeI32(this.intra_dc_precision);
    output.writeFieldEnd();
  }
  if (this.nsse_weight) {
    output.writeFieldBegin('nsse_weight', Thrift.Type.I32, 57);
    output.writeI32(this.nsse_weight);
    output.writeFieldEnd();
  }
  if (this.profile) {
    output.writeFieldBegin('profile', Thrift.Type.I32, 58);
    output.writeI32(this.profile);
    output.writeFieldEnd();
  }
  if (this.level) {
    output.writeFieldBegin('level', Thrift.Type.I32, 59);
    output.writeI32(this.level);
    output.writeFieldEnd();
  }
  if (this.mb_lmin) {
    output.writeFieldBegin('mb_lmin', Thrift.Type.I32, 60);
    output.writeI32(this.mb_lmin);
    output.writeFieldEnd();
  }
  if (this.mb_lmax) {
    output.writeFieldBegin('mb_lmax', Thrift.Type.I32, 61);
    output.writeI32(this.mb_lmax);
    output.writeFieldEnd();
  }
  if (this.me_penalty_compensation) {
    output.writeFieldBegin('me_penalty_compensation', Thrift.Type.I32, 70);
    output.writeI32(this.me_penalty_compensation);
    output.writeFieldEnd();
  }
  if (this.bidir_refine) {
    output.writeFieldBegin('bidir_refine', Thrift.Type.I32, 71);
    output.writeI32(this.bidir_refine);
    output.writeFieldEnd();
  }
  if (this.brd_scale) {
    output.writeFieldBegin('brd_scale', Thrift.Type.I32, 72);
    output.writeI32(this.brd_scale);
    output.writeFieldEnd();
  }
  if (this.crf) {
    output.writeFieldBegin('crf', Thrift.Type.DOUBLE, 73);
    output.writeDouble(this.crf);
    output.writeFieldEnd();
  }
  if (this.cqp) {
    output.writeFieldBegin('cqp', Thrift.Type.DOUBLE, 74);
    output.writeDouble(this.cqp);
    output.writeFieldEnd();
  }
  if (this.keyint_min) {
    output.writeFieldBegin('keyint_min', Thrift.Type.I32, 75);
    output.writeI32(this.keyint_min);
    output.writeFieldEnd();
  }
  if (this.refs) {
    output.writeFieldBegin('refs', Thrift.Type.I32, 76);
    output.writeI32(this.refs);
    output.writeFieldEnd();
  }
  if (this.chromaoffset) {
    output.writeFieldBegin('chromaoffset', Thrift.Type.I32, 77);
    output.writeI32(this.chromaoffset);
    output.writeFieldEnd();
  }
  if (this.bframebias) {
    output.writeFieldBegin('bframebias', Thrift.Type.I32, 78);
    output.writeI32(this.bframebias);
    output.writeFieldEnd();
  }
  if (this.trellis) {
    output.writeFieldBegin('trellis', Thrift.Type.I32, 79);
    output.writeI32(this.trellis);
    output.writeFieldEnd();
  }
  if (this.complexityblur) {
    output.writeFieldBegin('complexityblur', Thrift.Type.DOUBLE, 80);
    output.writeDouble(this.complexityblur);
    output.writeFieldEnd();
  }
  if (this.deblockalpha) {
    output.writeFieldBegin('deblockalpha', Thrift.Type.I32, 81);
    output.writeI32(this.deblockalpha);
    output.writeFieldEnd();
  }
  if (this.deblockbeta) {
    output.writeFieldBegin('deblockbeta', Thrift.Type.I32, 82);
    output.writeI32(this.deblockbeta);
    output.writeFieldEnd();
  }
  if (this.partitions) {
    output.writeFieldBegin('partitions', Thrift.Type.I32, 83);
    output.writeI32(this.partitions);
    output.writeFieldEnd();
  }
  if (this.directpred) {
    output.writeFieldBegin('directpred', Thrift.Type.I32, 84);
    output.writeI32(this.directpred);
    output.writeFieldEnd();
  }
  if (this.scenechange_factor) {
    output.writeFieldBegin('scenechange_factor', Thrift.Type.I32, 85);
    output.writeI32(this.scenechange_factor);
    output.writeFieldEnd();
  }
  if (this.b_sensitivity) {
    output.writeFieldBegin('b_sensitivity', Thrift.Type.I32, 86);
    output.writeI32(this.b_sensitivity);
    output.writeFieldEnd();
  }
  if (this.compression_level) {
    output.writeFieldBegin('compression_level', Thrift.Type.I32, 87);
    output.writeI32(this.compression_level);
    output.writeFieldEnd();
  }
  if (this.use_lpc) {
    output.writeFieldBegin('use_lpc', Thrift.Type.I32, 88);
    output.writeI32(this.use_lpc);
    output.writeFieldEnd();
  }
  if (this.lpc_coeff_precision) {
    output.writeFieldBegin('lpc_coeff_precision', Thrift.Type.I32, 89);
    output.writeI32(this.lpc_coeff_precision);
    output.writeFieldEnd();
  }
  if (this.min_prediction_order) {
    output.writeFieldBegin('min_prediction_order', Thrift.Type.I32, 90);
    output.writeI32(this.min_prediction_order);
    output.writeFieldEnd();
  }
  if (this.max_prediction_order) {
    output.writeFieldBegin('max_prediction_order', Thrift.Type.I32, 91);
    output.writeI32(this.max_prediction_order);
    output.writeFieldEnd();
  }
  if (this.prediction_order_method) {
    output.writeFieldBegin('prediction_order_method', Thrift.Type.I32, 92);
    output.writeI32(this.prediction_order_method);
    output.writeFieldEnd();
  }
  if (this.min_partiion_order) {
    output.writeFieldBegin('min_partiion_order', Thrift.Type.I32, 93);
    output.writeI32(this.min_partiion_order);
    output.writeFieldEnd();
  }
  if (this.max_partition_order) {
    output.writeFieldBegin('max_partition_order', Thrift.Type.I32, 94);
    output.writeI32(this.max_partition_order);
    output.writeFieldEnd();
  }
  if (this.min_partition_order) {
    output.writeFieldBegin('min_partition_order', Thrift.Type.I32, 95);
    output.writeI32(this.min_partition_order);
    output.writeFieldEnd();
  }
  if (this.aq_mode) {
    output.writeFieldBegin('aq_mode', Thrift.Type.DOUBLE, 96);
    output.writeDouble(this.aq_mode);
    output.writeFieldEnd();
  }
  if (this.psyd_rd) {
    output.writeFieldBegin('psyd_rd', Thrift.Type.DOUBLE, 97);
    output.writeDouble(this.psyd_rd);
    output.writeFieldEnd();
  }
  if (this.psy_trellis) {
    output.writeFieldBegin('psy_trellis', Thrift.Type.DOUBLE, 98);
    output.writeDouble(this.psy_trellis);
    output.writeFieldEnd();
  }
  if (this.captureTimeout) {
    output.writeFieldBegin('captureTimeout', Thrift.Type.I32, 99);
    output.writeI32(this.captureTimeout);
    output.writeFieldEnd();
  }
  if (this.qscale) {
    output.writeFieldBegin('qscale', Thrift.Type.I32, 100);
    output.writeI32(this.qscale);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OpenAppCommand = module.exports.OpenAppCommand = function(args) {
  this.name = null;
  this.path = null;
  this.arguments = null;
  this.ctx = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.path !== undefined) {
      this.path = args.path;
    }
    if (args.arguments !== undefined) {
      this.arguments = args.arguments;
    }
    if (args.ctx !== undefined) {
      this.ctx = args.ctx;
    }
  }
};
OpenAppCommand.prototype = {};
OpenAppCommand.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.arguments = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new ttypes.RecordContext();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenAppCommand.prototype.write = function(output) {
  output.writeStructBegin('OpenAppCommand');
  if (this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.path) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 2);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  if (this.arguments) {
    output.writeFieldBegin('arguments', Thrift.Type.STRING, 3);
    output.writeString(this.arguments);
    output.writeFieldEnd();
  }
  if (this.ctx) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 4);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

