//
// Autogenerated by Thrift Compiler (0.8.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./DesktopController_types');
//HELPER FUNCTIONS AND STRUCTURES

var Desktop_invokeMouse_args = function(args) {
  this.mouse = null;
  if (args) {
    if (args.mouse !== undefined) {
      this.mouse = args.mouse;
    }
  }
};
Desktop_invokeMouse_args.prototype = {};
Desktop_invokeMouse_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.mouse = new ttypes.MouseCommand();
        this.mouse.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Desktop_invokeMouse_args.prototype.write = function(output) {
  output.writeStructBegin('Desktop_invokeMouse_args');
  if (this.mouse) {
    output.writeFieldBegin('mouse', Thrift.Type.STRUCT, 1);
    this.mouse.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Desktop_invokeMouse_result = function(args) {
};
Desktop_invokeMouse_result.prototype = {};
Desktop_invokeMouse_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Desktop_invokeMouse_result.prototype.write = function(output) {
  output.writeStructBegin('Desktop_invokeMouse_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Desktop_invokeKeyboard_args = function(args) {
  this.keyboard = null;
  if (args) {
    if (args.keyboard !== undefined) {
      this.keyboard = args.keyboard;
    }
  }
};
Desktop_invokeKeyboard_args.prototype = {};
Desktop_invokeKeyboard_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.keyboard = new ttypes.KeyboardCommand();
        this.keyboard.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Desktop_invokeKeyboard_args.prototype.write = function(output) {
  output.writeStructBegin('Desktop_invokeKeyboard_args');
  if (this.keyboard) {
    output.writeFieldBegin('keyboard', Thrift.Type.STRUCT, 1);
    this.keyboard.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Desktop_invokeKeyboard_result = function(args) {
};
Desktop_invokeKeyboard_result.prototype = {};
Desktop_invokeKeyboard_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Desktop_invokeKeyboard_result.prototype.write = function(output) {
  output.writeStructBegin('Desktop_invokeKeyboard_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Desktop_openProgram_args = function(args) {
  this.command = null;
  if (args) {
    if (args.command !== undefined) {
      this.command = args.command;
    }
  }
};
Desktop_openProgram_args.prototype = {};
Desktop_openProgram_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.command = new ttypes.OpenAppCommand();
        this.command.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Desktop_openProgram_args.prototype.write = function(output) {
  output.writeStructBegin('Desktop_openProgram_args');
  if (this.command) {
    output.writeFieldBegin('command', Thrift.Type.STRUCT, 1);
    this.command.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Desktop_openProgram_result = function(args) {
};
Desktop_openProgram_result.prototype = {};
Desktop_openProgram_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Desktop_openProgram_result.prototype.write = function(output) {
  output.writeStructBegin('Desktop_openProgram_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Desktop_updateRecordContext_args = function(args) {
  this.context = null;
  if (args) {
    if (args.context !== undefined) {
      this.context = args.context;
    }
  }
};
Desktop_updateRecordContext_args.prototype = {};
Desktop_updateRecordContext_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.context = new ttypes.RecordContext();
        this.context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Desktop_updateRecordContext_args.prototype.write = function(output) {
  output.writeStructBegin('Desktop_updateRecordContext_args');
  if (this.context) {
    output.writeFieldBegin('context', Thrift.Type.STRUCT, 1);
    this.context.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Desktop_updateRecordContext_result = function(args) {
};
Desktop_updateRecordContext_result.prototype = {};
Desktop_updateRecordContext_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Desktop_updateRecordContext_result.prototype.write = function(output) {
  output.writeStructBegin('Desktop_updateRecordContext_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DesktopClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
DesktopClient.prototype = {};
DesktopClient.prototype.invokeMouse = function(mouse, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_invokeMouse(mouse);
};

DesktopClient.prototype.send_invokeMouse = function(mouse) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('invokeMouse', Thrift.MessageType.CALL, this.seqid);
  var args = new Desktop_invokeMouse_args();
  args.mouse = mouse;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DesktopClient.prototype.recv_invokeMouse = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Desktop_invokeMouse_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
DesktopClient.prototype.invokeKeyboard = function(keyboard, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_invokeKeyboard(keyboard);
};

DesktopClient.prototype.send_invokeKeyboard = function(keyboard) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('invokeKeyboard', Thrift.MessageType.CALL, this.seqid);
  var args = new Desktop_invokeKeyboard_args();
  args.keyboard = keyboard;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DesktopClient.prototype.recv_invokeKeyboard = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Desktop_invokeKeyboard_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
DesktopClient.prototype.openProgram = function(command, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_openProgram(command);
};

DesktopClient.prototype.send_openProgram = function(command) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('openProgram', Thrift.MessageType.CALL, this.seqid);
  var args = new Desktop_openProgram_args();
  args.command = command;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DesktopClient.prototype.recv_openProgram = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Desktop_openProgram_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
DesktopClient.prototype.updateRecordContext = function(context, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_updateRecordContext(context);
};

DesktopClient.prototype.send_updateRecordContext = function(context) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateRecordContext', Thrift.MessageType.CALL, this.seqid);
  var args = new Desktop_updateRecordContext_args();
  args.context = context;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DesktopClient.prototype.recv_updateRecordContext = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Desktop_updateRecordContext_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
var DesktopProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
DesktopProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

DesktopProcessor.prototype.process_invokeMouse = function(seqid, input, output) {
  var args = new Desktop_invokeMouse_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Desktop_invokeMouse_result();
  this._handler.invokeMouse(args.mouse, function (success) {
    result.success = success;
    output.writeMessageBegin("invokeMouse", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

DesktopProcessor.prototype.process_invokeKeyboard = function(seqid, input, output) {
  var args = new Desktop_invokeKeyboard_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Desktop_invokeKeyboard_result();
  this._handler.invokeKeyboard(args.keyboard, function (success) {
    result.success = success;
    output.writeMessageBegin("invokeKeyboard", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

DesktopProcessor.prototype.process_openProgram = function(seqid, input, output) {
  var args = new Desktop_openProgram_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Desktop_openProgram_result();
  this._handler.openProgram(args.command, function (success) {
    result.success = success;
    output.writeMessageBegin("openProgram", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

DesktopProcessor.prototype.process_updateRecordContext = function(seqid, input, output) {
  var args = new Desktop_updateRecordContext_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Desktop_updateRecordContext_result();
  this._handler.updateRecordContext(args.context, function (success) {
    result.success = success;
    output.writeMessageBegin("updateRecordContext", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

