.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "FFPROBE 1"
.TH FFPROBE 1 "2012-11-15" " " " "
.SH "NAME"
ffprobe \- ffprobe media prober
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
ffprobe [options] [\fIinput_file\fR]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
ffprobe gathers information from multimedia streams and prints it in
human\- and machine-readable fashion.
.PP
For example it can be used to check the format of the container used
by a multimedia stream and the format and type of each media stream
contained in it.
.PP
If a filename is specified in input, ffprobe will try to open and
probe the file content. If the file cannot be opened or recognized as
a multimedia file, a positive exit code is returned.
.PP
ffprobe may be employed both as a standalone application or in
combination with a textual filter, which may perform more
sophisticated processing, e.g. statistical processing or plotting.
.PP
Options are used to list some of the formats supported by ffprobe or
for specifying which information to display, and for setting how
ffprobe will show it.
.PP
ffprobe output is designed to be easily parsable by a textual filter,
and consists of one or more sections of a form defined by the selected
writer, which is specified by the \fBprint_format\fR option.
.PP
Metadata tags stored in the container or in the streams are recognized
and printed in the corresponding \*(L"\s-1FORMAT\s0\*(R" or \*(L"\s-1STREAM\s0\*(R" section.
.SH "OPTIONS"
.IX Header "OPTIONS"
All the numerical options, if not specified otherwise, accept in input
a string representing a number, which may contain one of the
International System number postfixes, for example 'K', 'M', 'G'.
If 'i' is appended after the postfix, powers of 2 are used instead of
powers of 10. The 'B' postfix multiplies the value for 8, and can be
appended after another postfix or used alone. This allows using for
example '\s-1KB\s0', 'MiB', 'G' and 'B' as postfix.
.PP
Options which do not take arguments are boolean options, and set the
corresponding value to true. They can be set to false by prefixing
with \*(L"no\*(R" the option name, for example using \*(L"\-nofoo\*(R" in the
command line will set to false the boolean option with name \*(L"foo\*(R".
.Sh "Stream specifiers"
.IX Subsection "Stream specifiers"
Some options are applied per\-stream, e.g. bitrate or codec. Stream specifiers
are used to precisely specify which stream(s) does a given option belong to.
.PP
A stream specifier is a string generally appended to the option name and
separated from it by a colon. E.g. \f(CW\*(C`\-codec:a:1 ac3\*(C'\fR option contains
\&\f(CW\*(C`a:1\*(C'\fR stream specifier, which matches the second audio stream. Therefore it
would select the ac3 codec for the second audio stream.
.PP
A stream specifier can match several streams, the option is then applied to all
of them. E.g. the stream specifier in \f(CW\*(C`\-b:a 128k\*(C'\fR matches all audio
streams.
.PP
An empty stream specifier matches all streams, for example \f(CW\*(C`\-codec copy\*(C'\fR
or \f(CW\*(C`\-codec: copy\*(C'\fR would copy all the streams without reencoding.
.PP
Possible forms of stream specifiers are:
.IP "\fIstream_index\fR" 4
.IX Item "stream_index"
Matches the stream with this index. E.g. \f(CW\*(C`\-threads:1 4\*(C'\fR would set the
thread count for the second stream to 4.
.IP "\fIstream_type\fR\fB[:\fR\fIstream_index\fR\fB]\fR" 4
.IX Item "stream_type[:stream_index]"
\&\fIstream_type\fR is one of: 'v' for video, 'a' for audio, 's' for subtitle,
\&'d' for data and 't' for attachments. If \fIstream_index\fR is given, then
matches stream number \fIstream_index\fR of this type. Otherwise matches all
streams of this type.
.IP "\fBp:\fR\fIprogram_id\fR\fB[:\fR\fIstream_index\fR\fB]\fR" 4
.IX Item "p:program_id[:stream_index]"
If \fIstream_index\fR is given, then matches stream number \fIstream_index\fR in
program with id \fIprogram_id\fR. Otherwise matches all streams in this program.
.IP "\fB#\fR\fIstream_id\fR" 4
.IX Item "#stream_id"
Matches the stream by format-specific \s-1ID\s0.
.Sh "Generic options"
.IX Subsection "Generic options"
These options are shared amongst the av* tools.
.IP "\fB\-L\fR" 4
.IX Item "-L"
Show license.
.IP "\fB\-h, \-?, \-help, \-\-help [\fR\fIarg\fR\fB]\fR" 4
.IX Item "-h, -?, -help, --help [arg]"
Show help. An optional parameter may be specified to print help about a specific
item.
.Sp
Possible values of \fIarg\fR are:
.RS 4
.IP "\fBdecoder=\fR\fIdecoder_name\fR" 4
.IX Item "decoder=decoder_name"
Print detailed information about the decoder named \fIdecoder_name\fR. Use the
\&\fB\-decoders\fR option to get a list of all decoders.
.IP "\fBencoder=\fR\fIencoder_name\fR" 4
.IX Item "encoder=encoder_name"
Print detailed information about the encoder named \fIencoder_name\fR. Use the
\&\fB\-encoders\fR option to get a list of all encoders.
.IP "\fBdemuxer=\fR\fIdemuxer_name\fR" 4
.IX Item "demuxer=demuxer_name"
Print detailed information about the demuxer named \fIdemuxer_name\fR. Use the
\&\fB\-formats\fR option to get a list of all demuxers and muxers.
.IP "\fBmuxer=\fR\fImuxer_name\fR" 4
.IX Item "muxer=muxer_name"
Print detailed information about the muxer named \fImuxer_name\fR. Use the
\&\fB\-formats\fR option to get a list of all muxers and demuxers.
.RE
.RS 4
.RE
.IP "\fB\-version\fR" 4
.IX Item "-version"
Show version.
.IP "\fB\-formats\fR" 4
.IX Item "-formats"
Show available formats.
.Sp
The fields preceding the format names have the following meanings:
.RS 4
.IP "\fBD\fR" 4
.IX Item "D"
Decoding available
.IP "\fBE\fR" 4
.IX Item "E"
Encoding available
.RE
.RS 4
.RE
.IP "\fB\-codecs\fR" 4
.IX Item "-codecs"
Show all codecs known to libavcodec.
.Sp
Note that the term 'codec' is used throughout this documentation as a shortcut
for what is more correctly called a media bitstream format.
.IP "\fB\-decoders\fR" 4
.IX Item "-decoders"
Show available decoders.
.IP "\fB\-encoders\fR" 4
.IX Item "-encoders"
Show all available encoders.
.IP "\fB\-bsfs\fR" 4
.IX Item "-bsfs"
Show available bitstream filters.
.IP "\fB\-protocols\fR" 4
.IX Item "-protocols"
Show available protocols.
.IP "\fB\-filters\fR" 4
.IX Item "-filters"
Show available libavfilter filters.
.IP "\fB\-pix_fmts\fR" 4
.IX Item "-pix_fmts"
Show available pixel formats.
.IP "\fB\-sample_fmts\fR" 4
.IX Item "-sample_fmts"
Show available sample formats.
.IP "\fB\-layouts\fR" 4
.IX Item "-layouts"
Show channel names and standard channel layouts.
.IP "\fB\-loglevel\fR \fIloglevel\fR \fB| \-v\fR \fIloglevel\fR" 4
.IX Item "-loglevel loglevel | -v loglevel"
Set the logging level used by the library.
\&\fIloglevel\fR is a number or a string containing one of the following values:
.RS 4
.IP "\fBquiet\fR" 4
.IX Item "quiet"
.PD 0
.IP "\fBpanic\fR" 4
.IX Item "panic"
.IP "\fBfatal\fR" 4
.IX Item "fatal"
.IP "\fBerror\fR" 4
.IX Item "error"
.IP "\fBwarning\fR" 4
.IX Item "warning"
.IP "\fBinfo\fR" 4
.IX Item "info"
.IP "\fBverbose\fR" 4
.IX Item "verbose"
.IP "\fBdebug\fR" 4
.IX Item "debug"
.RE
.RS 4
.PD
.Sp
By default the program logs to stderr, if coloring is supported by the
terminal, colors are used to mark errors and warnings. Log coloring
can be disabled setting the environment variable
\&\fB\s-1AV_LOG_FORCE_NOCOLOR\s0\fR or \fB\s-1NO_COLOR\s0\fR, or can be forced setting
the environment variable \fB\s-1AV_LOG_FORCE_COLOR\s0\fR.
The use of the environment variable \fB\s-1NO_COLOR\s0\fR is deprecated and
will be dropped in a following FFmpeg version.
.RE
.IP "\fB\-report\fR" 4
.IX Item "-report"
Dump full command line and console output to a file named
\&\f(CW\*(C`\f(CIprogram\f(CW\-\f(CI\s-1YYYYMMDD\s0\f(CW\-\f(CI\s-1HHMMSS\s0\f(CW.log\*(C'\fR in the current
directory.
This file can be useful for bug reports.
It also implies \f(CW\*(C`\-loglevel verbose\*(C'\fR.
.Sp
Note: setting the environment variable \f(CW\*(C`FFREPORT\*(C'\fR to any value has the
same effect.
.IP "\fB\-cpuflags flags (\fR\fIglobal\fR\fB)\fR" 4
.IX Item "-cpuflags flags (global)"
Allows setting and clearing cpu flags. This option is intended
for testing. Do not use it unless you know what you're doing.
.Sp
.Vb 3
\&        ffmpeg -cpuflags -sse+mmx ...
\&        ffmpeg -cpuflags mmx ...
\&        ffmpeg -cpuflags 0 ...
.Ve
.Sh "AVOptions"
.IX Subsection "AVOptions"
These options are provided directly by the libavformat, libavdevice and
libavcodec libraries. To see the list of available AVOptions, use the
\&\fB\-help\fR option. They are separated into two categories:
.IP "\fBgeneric\fR" 4
.IX Item "generic"
These options can be set for any container, codec or device. Generic options
are listed under AVFormatContext options for containers/devices and under
AVCodecContext options for codecs.
.IP "\fBprivate\fR" 4
.IX Item "private"
These options are specific to the given container, device or codec. Private
options are listed under their corresponding containers/devices/codecs.
.PP
For example to write an ID3v2.3 header instead of a default ID3v2.4 to
an \s-1MP3\s0 file, use the \fBid3v2_version\fR private option of the \s-1MP3\s0
muxer:
.PP
.Vb 1
\&        ffmpeg -i input.flac -id3v2_version 3 out.mp3
.Ve
.PP
All codec AVOptions are obviously per\-stream, so the chapter on stream
specifiers applies to them
.PP
Note \fB\-nooption\fR syntax cannot be used for boolean AVOptions,
use \fB\-option 0\fR/\fB\-option 1\fR.
.PP
Note2 old undocumented way of specifying per-stream AVOptions by prepending
v/a/s to the options name is now obsolete and will be removed soon.
.Sh "Codec AVOptions"
.IX Subsection "Codec AVOptions"
.IP "\fB\-b[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,audio,video\fR\fB)\fR" 4
.IX Item "-b[:stream_specifier] integer (output,audio,video)"
set bitrate (in bits/s)
.IP "\fB\-ab[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,audio\fR\fB)\fR" 4
.IX Item "-ab[:stream_specifier] integer (output,audio)"
set bitrate (in bits/s)
.IP "\fB\-bt[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-bt[:stream_specifier] integer (output,video)"
Set video bitrate tolerance (in bits/s). In 1\-pass mode, bitrate tolerance specifies how far ratecontrol is willing to deviate from the target average bitrate value. This is not related to min/max bitrate. Lowering tolerance too much has an adverse effect on quality.
.IP "\fB\-flags[:stream_specifier]\fR \fIflags\fR \fB(\fR\fIinput/output,audio,video,subtitles\fR\fB)\fR" 4
.IX Item "-flags[:stream_specifier] flags (input/output,audio,video,subtitles)"
Possible values:
.RS 4
.IP "\fBmv4\fR" 4
.IX Item "mv4"
use four motion vector by macroblock (mpeg4)
.IP "\fBqpel\fR" 4
.IX Item "qpel"
use 1/4 pel motion compensation
.IP "\fBloop\fR" 4
.IX Item "loop"
use loop filter
.IP "\fBqscale\fR" 4
.IX Item "qscale"
use fixed qscale
.IP "\fBgmc\fR" 4
.IX Item "gmc"
use gmc
.IP "\fBmv0\fR" 4
.IX Item "mv0"
always try a mb with mv=<0,0>
.IP "\fBinput_preserved\fR" 4
.IX Item "input_preserved"
.PD 0
.IP "\fBpass1\fR" 4
.IX Item "pass1"
.PD
use internal 2pass ratecontrol in first  pass mode
.IP "\fBpass2\fR" 4
.IX Item "pass2"
use internal 2pass ratecontrol in second pass mode
.IP "\fBgray\fR" 4
.IX Item "gray"
only decode/encode grayscale
.IP "\fBemu_edge\fR" 4
.IX Item "emu_edge"
don't draw edges
.IP "\fBpsnr\fR" 4
.IX Item "psnr"
error[?] variables will be set during encoding
.IP "\fBtruncated\fR" 4
.IX Item "truncated"
.PD 0
.IP "\fBnaq\fR" 4
.IX Item "naq"
.PD
normalize adaptive quantization
.IP "\fBildct\fR" 4
.IX Item "ildct"
use interlaced dct
.IP "\fBlow_delay\fR" 4
.IX Item "low_delay"
force low delay
.IP "\fBglobal_header\fR" 4
.IX Item "global_header"
place global headers in extradata instead of every keyframe
.IP "\fBbitexact\fR" 4
.IX Item "bitexact"
use only bitexact stuff (except (i)dct)
.IP "\fBaic\fR" 4
.IX Item "aic"
h263 advanced intra coding / mpeg4 ac prediction
.IP "\fBcbp\fR" 4
.IX Item "cbp"
Deprecated, use mpegvideo private options instead
.IP "\fBqprd\fR" 4
.IX Item "qprd"
Deprecated, use mpegvideo private options instead
.IP "\fBilme\fR" 4
.IX Item "ilme"
interlaced motion estimation
.IP "\fBcgop\fR" 4
.IX Item "cgop"
closed gop
.RE
.RS 4
.RE
.IP "\fB\-sub_id[:stream_specifier]\fR \fIinteger\fR \fB()\fR" 4
.IX Item "-sub_id[:stream_specifier] integer ()"
.PD 0
.IP "\fB\-me_method[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-me_method[:stream_specifier] integer (output,video)"
.PD
set motion estimation method
.Sp
Possible values:
.RS 4
.IP "\fBzero\fR" 4
.IX Item "zero"
zero motion estimation (fastest)
.IP "\fBfull\fR" 4
.IX Item "full"
full motion estimation (slowest)
.IP "\fBepzs\fR" 4
.IX Item "epzs"
\&\s-1EPZS\s0 motion estimation (default)
.IP "\fBesa\fR" 4
.IX Item "esa"
esa motion estimation (alias for full)
.IP "\fBtesa\fR" 4
.IX Item "tesa"
tesa motion estimation
.IP "\fBdia\fR" 4
.IX Item "dia"
dia motion estimation (alias for epzs)
.IP "\fBlog\fR" 4
.IX Item "log"
log motion estimation
.IP "\fBphods\fR" 4
.IX Item "phods"
phods motion estimation
.IP "\fBx1\fR" 4
.IX Item "x1"
X1 motion estimation
.IP "\fBhex\fR" 4
.IX Item "hex"
hex motion estimation
.IP "\fBumh\fR" 4
.IX Item "umh"
umh motion estimation
.IP "\fBiter\fR" 4
.IX Item "iter"
iter motion estimation
.RE
.RS 4
.RE
.IP "\fB\-extradata_size[:stream_specifier]\fR \fIinteger\fR \fB()\fR" 4
.IX Item "-extradata_size[:stream_specifier] integer ()"
.PD 0
.IP "\fB\-time_base[:stream_specifier]\fR \fIrational number\fR \fB()\fR" 4
.IX Item "-time_base[:stream_specifier] rational number ()"
.IP "\fB\-g[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-g[:stream_specifier] integer (output,video)"
.PD
set the group of picture size
.IP "\fB\-ar[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput/output,audio\fR\fB)\fR" 4
.IX Item "-ar[:stream_specifier] integer (input/output,audio)"
set audio sampling rate (in Hz)
.IP "\fB\-ac[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput/output,audio\fR\fB)\fR" 4
.IX Item "-ac[:stream_specifier] integer (input/output,audio)"
set number of audio channels
.IP "\fB\-cutoff[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,audio\fR\fB)\fR" 4
.IX Item "-cutoff[:stream_specifier] integer (output,audio)"
set cutoff bandwidth
.IP "\fB\-frame_size[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,audio\fR\fB)\fR" 4
.IX Item "-frame_size[:stream_specifier] integer (output,audio)"
.PD 0
.IP "\fB\-frame_number[:stream_specifier]\fR \fIinteger\fR \fB()\fR" 4
.IX Item "-frame_number[:stream_specifier] integer ()"
.IP "\fB\-delay[:stream_specifier]\fR \fIinteger\fR \fB()\fR" 4
.IX Item "-delay[:stream_specifier] integer ()"
.IP "\fB\-qcomp[:stream_specifier]\fR \fIfloat\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-qcomp[:stream_specifier] float (output,video)"
.PD
video quantizer scale compression (\s-1VBR\s0). Constant of ratecontrol equation. Recommended range for default rc_eq: 0.0\-1.0
.IP "\fB\-qblur[:stream_specifier]\fR \fIfloat\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-qblur[:stream_specifier] float (output,video)"
video quantizer scale blur (\s-1VBR\s0)
.IP "\fB\-qmin[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-qmin[:stream_specifier] integer (output,video)"
min video quantizer scale (\s-1VBR\s0)
.IP "\fB\-qmax[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-qmax[:stream_specifier] integer (output,video)"
max video quantizer scale (\s-1VBR\s0)
.IP "\fB\-qdiff[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-qdiff[:stream_specifier] integer (output,video)"
max difference between the quantizer scale (\s-1VBR\s0)
.IP "\fB\-bf[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-bf[:stream_specifier] integer (output,video)"
use 'frames' B frames
.IP "\fB\-b_qfactor[:stream_specifier]\fR \fIfloat\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-b_qfactor[:stream_specifier] float (output,video)"
qp factor between p and b frames
.IP "\fB\-rc_strategy[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-rc_strategy[:stream_specifier] integer (output,video)"
ratecontrol method
.IP "\fB\-b_strategy[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-b_strategy[:stream_specifier] integer (output,video)"
strategy to choose between I/P/B\-frames
.IP "\fB\-ps[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-ps[:stream_specifier] integer (output,video)"
rtp payload size in bytes
.IP "\fB\-mv_bits[:stream_specifier]\fR \fIinteger\fR \fB()\fR" 4
.IX Item "-mv_bits[:stream_specifier] integer ()"
.PD 0
.IP "\fB\-header_bits[:stream_specifier]\fR \fIinteger\fR \fB()\fR" 4
.IX Item "-header_bits[:stream_specifier] integer ()"
.IP "\fB\-i_tex_bits[:stream_specifier]\fR \fIinteger\fR \fB()\fR" 4
.IX Item "-i_tex_bits[:stream_specifier] integer ()"
.IP "\fB\-p_tex_bits[:stream_specifier]\fR \fIinteger\fR \fB()\fR" 4
.IX Item "-p_tex_bits[:stream_specifier] integer ()"
.IP "\fB\-i_count[:stream_specifier]\fR \fIinteger\fR \fB()\fR" 4
.IX Item "-i_count[:stream_specifier] integer ()"
.IP "\fB\-p_count[:stream_specifier]\fR \fIinteger\fR \fB()\fR" 4
.IX Item "-p_count[:stream_specifier] integer ()"
.IP "\fB\-skip_count[:stream_specifier]\fR \fIinteger\fR \fB()\fR" 4
.IX Item "-skip_count[:stream_specifier] integer ()"
.IP "\fB\-misc_bits[:stream_specifier]\fR \fIinteger\fR \fB()\fR" 4
.IX Item "-misc_bits[:stream_specifier] integer ()"
.IP "\fB\-frame_bits[:stream_specifier]\fR \fIinteger\fR \fB()\fR" 4
.IX Item "-frame_bits[:stream_specifier] integer ()"
.IP "\fB\-codec_tag[:stream_specifier]\fR \fIinteger\fR \fB()\fR" 4
.IX Item "-codec_tag[:stream_specifier] integer ()"
.IP "\fB\-bug[:stream_specifier]\fR \fIflags\fR \fB(\fR\fIinput,video\fR\fB)\fR" 4
.IX Item "-bug[:stream_specifier] flags (input,video)"
.PD
workaround not auto detected encoder bugs
.Sp
Possible values:
.RS 4
.IP "\fBautodetect\fR" 4
.IX Item "autodetect"
.PD 0
.IP "\fBold_msmpeg4\fR" 4
.IX Item "old_msmpeg4"
.PD
some old lavc generated msmpeg4v3 files (no autodetection)
.IP "\fBxvid_ilace\fR" 4
.IX Item "xvid_ilace"
Xvid interlacing bug (autodetected if fourcc==XVIX)
.IP "\fBump4\fR" 4
.IX Item "ump4"
(autodetected if fourcc==UMP4)
.IP "\fBno_padding\fR" 4
.IX Item "no_padding"
padding bug (autodetected)
.IP "\fBamv\fR" 4
.IX Item "amv"
.PD 0
.IP "\fBac_vlc\fR" 4
.IX Item "ac_vlc"
.PD
illegal vlc bug (autodetected per fourcc)
.IP "\fBqpel_chroma\fR" 4
.IX Item "qpel_chroma"
.PD 0
.IP "\fBstd_qpel\fR" 4
.IX Item "std_qpel"
.PD
old standard qpel (autodetected per fourcc/version)
.IP "\fBqpel_chroma2\fR" 4
.IX Item "qpel_chroma2"
.PD 0
.IP "\fBdirect_blocksize\fR" 4
.IX Item "direct_blocksize"
.PD
direct-qpel-blocksize bug (autodetected per fourcc/version)
.IP "\fBedge\fR" 4
.IX Item "edge"
edge padding bug (autodetected per fourcc/version)
.IP "\fBhpel_chroma\fR" 4
.IX Item "hpel_chroma"
.PD 0
.IP "\fBdc_clip\fR" 4
.IX Item "dc_clip"
.IP "\fBms\fR" 4
.IX Item "ms"
.PD
workaround various bugs in microsofts broken decoders
.IP "\fBtrunc\fR" 4
.IX Item "trunc"
trancated frames
.RE
.RS 4
.RE
.IP "\fB\-lelim[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-lelim[:stream_specifier] integer (output,video)"
single coefficient elimination threshold for luminance (negative values also consider dc coefficient)
.IP "\fB\-celim[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-celim[:stream_specifier] integer (output,video)"
single coefficient elimination threshold for chrominance (negative values also consider dc coefficient)
.IP "\fB\-strict[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput/output,audio,video\fR\fB)\fR" 4
.IX Item "-strict[:stream_specifier] integer (input/output,audio,video)"
how strictly to follow the standards
.Sp
Possible values:
.RS 4
.IP "\fBvery\fR" 4
.IX Item "very"
strictly conform to a older more strict version of the spec or reference software
.IP "\fBstrict\fR" 4
.IX Item "strict"
strictly conform to all the things in the spec no matter what consequences
.IP "\fBnormal\fR" 4
.IX Item "normal"
.PD 0
.IP "\fBunofficial\fR" 4
.IX Item "unofficial"
.PD
allow unofficial extensions
.IP "\fBexperimental\fR" 4
.IX Item "experimental"
allow non standardized experimental things
.RE
.RS 4
.RE
.IP "\fB\-b_qoffset[:stream_specifier]\fR \fIfloat\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-b_qoffset[:stream_specifier] float (output,video)"
qp offset between P and B frames
.IP "\fB\-err_detect[:stream_specifier]\fR \fIflags\fR \fB(\fR\fIinput,audio,video\fR\fB)\fR" 4
.IX Item "-err_detect[:stream_specifier] flags (input,audio,video)"
set error detection flags
.Sp
Possible values:
.RS 4
.IP "\fBcrccheck\fR" 4
.IX Item "crccheck"
verify embedded CRCs
.IP "\fBbitstream\fR" 4
.IX Item "bitstream"
detect bitstream specification deviations
.IP "\fBbuffer\fR" 4
.IX Item "buffer"
detect improper bitstream length
.IP "\fBexplode\fR" 4
.IX Item "explode"
abort decoding on minor error detection
.IP "\fBcareful\fR" 4
.IX Item "careful"
consider things that violate the spec and have not been seen in the wild as errors
.IP "\fBcompliant\fR" 4
.IX Item "compliant"
consider all spec non compliancies as errors
.IP "\fBaggressive\fR" 4
.IX Item "aggressive"
consider things that a sane encoder should not do as an error
.RE
.RS 4
.RE
.IP "\fB\-has_b_frames[:stream_specifier]\fR \fIinteger\fR \fB()\fR" 4
.IX Item "-has_b_frames[:stream_specifier] integer ()"
.PD 0
.IP "\fB\-block_align[:stream_specifier]\fR \fIinteger\fR \fB()\fR" 4
.IX Item "-block_align[:stream_specifier] integer ()"
.IP "\fB\-mpeg_quant[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-mpeg_quant[:stream_specifier] integer (output,video)"
.PD
use \s-1MPEG\s0 quantizers instead of H.263
.IP "\fB\-stats_out[:stream_specifier]\fR \fIstring\fR \fB()\fR" 4
.IX Item "-stats_out[:stream_specifier] string ()"
.PD 0
.IP "\fB\-qsquish[:stream_specifier]\fR \fIfloat\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-qsquish[:stream_specifier] float (output,video)"
.PD
how to keep quantizer between qmin and qmax (0 = clip, 1 = use differentiable function)
.IP "\fB\-rc_qmod_amp[:stream_specifier]\fR \fIfloat\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-rc_qmod_amp[:stream_specifier] float (output,video)"
experimental quantizer modulation
.IP "\fB\-rc_qmod_freq[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-rc_qmod_freq[:stream_specifier] integer (output,video)"
experimental quantizer modulation
.IP "\fB\-rc_override_count[:stream_specifier]\fR \fIinteger\fR \fB()\fR" 4
.IX Item "-rc_override_count[:stream_specifier] integer ()"
.PD 0
.IP "\fB\-rc_eq[:stream_specifier]\fR \fIstring\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-rc_eq[:stream_specifier] string (output,video)"
.PD
Set rate control equation. When computing the expression, besides the standard functions defined in the section 'Expression Evaluation', the following functions are available: bits2qp(bits), qp2bits(qp). Also the following constants are available: iTex pTex tex mv fCode iCount mcVar var isI isP isB avgQP qComp avgIITex avgPITex avgPPTex avgBPTex avgTex.
.IP "\fB\-maxrate[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,audio,video\fR\fB)\fR" 4
.IX Item "-maxrate[:stream_specifier] integer (output,audio,video)"
Set max bitrate tolerance (in bits/s). Requires bufsize to be set.
.IP "\fB\-minrate[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,audio,video\fR\fB)\fR" 4
.IX Item "-minrate[:stream_specifier] integer (output,audio,video)"
Set min bitrate tolerance (in bits/s). Most useful in setting up a \s-1CBR\s0 encode. It is of little use elsewise.
.IP "\fB\-bufsize[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,audio,video\fR\fB)\fR" 4
.IX Item "-bufsize[:stream_specifier] integer (output,audio,video)"
set ratecontrol buffer size (in bits)
.IP "\fB\-rc_buf_aggressivity[:stream_specifier]\fR \fIfloat\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-rc_buf_aggressivity[:stream_specifier] float (output,video)"
currently useless
.IP "\fB\-i_qfactor[:stream_specifier]\fR \fIfloat\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-i_qfactor[:stream_specifier] float (output,video)"
qp factor between P and I frames
.IP "\fB\-i_qoffset[:stream_specifier]\fR \fIfloat\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-i_qoffset[:stream_specifier] float (output,video)"
qp offset between P and I frames
.IP "\fB\-rc_init_cplx[:stream_specifier]\fR \fIfloat\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-rc_init_cplx[:stream_specifier] float (output,video)"
initial complexity for 1\-pass encoding
.IP "\fB\-dct[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-dct[:stream_specifier] integer (output,video)"
\&\s-1DCT\s0 algorithm
.Sp
Possible values:
.RS 4
.IP "\fBauto\fR" 4
.IX Item "auto"
autoselect a good one (default)
.IP "\fBfastint\fR" 4
.IX Item "fastint"
fast integer
.IP "\fBint\fR" 4
.IX Item "int"
accurate integer
.IP "\fBmmx\fR" 4
.IX Item "mmx"
.PD 0
.IP "\fBaltivec\fR" 4
.IX Item "altivec"
.IP "\fBfaan\fR" 4
.IX Item "faan"
.PD
floating point \s-1AAN\s0 \s-1DCT\s0
.RE
.RS 4
.RE
.IP "\fB\-lumi_mask[:stream_specifier]\fR \fIfloat\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-lumi_mask[:stream_specifier] float (output,video)"
compresses bright areas stronger than medium ones
.IP "\fB\-tcplx_mask[:stream_specifier]\fR \fIfloat\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-tcplx_mask[:stream_specifier] float (output,video)"
temporal complexity masking
.IP "\fB\-scplx_mask[:stream_specifier]\fR \fIfloat\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-scplx_mask[:stream_specifier] float (output,video)"
spatial complexity masking
.IP "\fB\-p_mask[:stream_specifier]\fR \fIfloat\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-p_mask[:stream_specifier] float (output,video)"
inter masking
.IP "\fB\-dark_mask[:stream_specifier]\fR \fIfloat\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-dark_mask[:stream_specifier] float (output,video)"
compresses dark areas stronger than medium ones
.IP "\fB\-idct[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput/output,video\fR\fB)\fR" 4
.IX Item "-idct[:stream_specifier] integer (input/output,video)"
select \s-1IDCT\s0 implementation
.Sp
Possible values:
.RS 4
.IP "\fBauto\fR" 4
.IX Item "auto"
.PD 0
.IP "\fBint\fR" 4
.IX Item "int"
.IP "\fBsimple\fR" 4
.IX Item "simple"
.IP "\fBsimplemmx\fR" 4
.IX Item "simplemmx"
.IP "\fBlibmpeg2mmx\fR" 4
.IX Item "libmpeg2mmx"
.IP "\fBmmi\fR" 4
.IX Item "mmi"
.IP "\fBarm\fR" 4
.IX Item "arm"
.IP "\fBaltivec\fR" 4
.IX Item "altivec"
.IP "\fBsh4\fR" 4
.IX Item "sh4"
.IP "\fBsimplearm\fR" 4
.IX Item "simplearm"
.IP "\fBsimplearmv5te\fR" 4
.IX Item "simplearmv5te"
.IP "\fBsimplearmv6\fR" 4
.IX Item "simplearmv6"
.IP "\fBsimpleneon\fR" 4
.IX Item "simpleneon"
.IP "\fBsimplealpha\fR" 4
.IX Item "simplealpha"
.IP "\fBh264\fR" 4
.IX Item "h264"
.IP "\fBvp3\fR" 4
.IX Item "vp3"
.IP "\fBipp\fR" 4
.IX Item "ipp"
.IP "\fBxvidmmx\fR" 4
.IX Item "xvidmmx"
.IP "\fBfaani\fR" 4
.IX Item "faani"
.PD
floating point \s-1AAN\s0 \s-1IDCT\s0
.RE
.RS 4
.RE
.IP "\fB\-slice_count[:stream_specifier]\fR \fIinteger\fR \fB()\fR" 4
.IX Item "-slice_count[:stream_specifier] integer ()"
.PD 0
.IP "\fB\-ec[:stream_specifier]\fR \fIflags\fR \fB(\fR\fIinput,video\fR\fB)\fR" 4
.IX Item "-ec[:stream_specifier] flags (input,video)"
.PD
set error concealment strategy
.Sp
Possible values:
.RS 4
.IP "\fBguess_mvs\fR" 4
.IX Item "guess_mvs"
iterative motion vector (\s-1MV\s0) search (slow)
.IP "\fBdeblock\fR" 4
.IX Item "deblock"
use strong deblock filter for damaged MBs
.RE
.RS 4
.RE
.IP "\fB\-bits_per_coded_sample[:stream_specifier]\fR \fIinteger\fR \fB()\fR" 4
.IX Item "-bits_per_coded_sample[:stream_specifier] integer ()"
.PD 0
.IP "\fB\-pred[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-pred[:stream_specifier] integer (output,video)"
.PD
prediction method
.Sp
Possible values:
.RS 4
.IP "\fBleft\fR" 4
.IX Item "left"
.PD 0
.IP "\fBplane\fR" 4
.IX Item "plane"
.IP "\fBmedian\fR" 4
.IX Item "median"
.RE
.RS 4
.RE
.IP "\fB\-aspect[:stream_specifier]\fR \fIrational number\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-aspect[:stream_specifier] rational number (output,video)"
.PD
sample aspect ratio
.IP "\fB\-debug[:stream_specifier]\fR \fIflags\fR \fB(\fR\fIinput/output,audio,video,subtitles\fR\fB)\fR" 4
.IX Item "-debug[:stream_specifier] flags (input/output,audio,video,subtitles)"
print specific debug info
.Sp
Possible values:
.RS 4
.IP "\fBpict\fR" 4
.IX Item "pict"
picture info
.IP "\fBrc\fR" 4
.IX Item "rc"
rate control
.IP "\fBbitstream\fR" 4
.IX Item "bitstream"
.PD 0
.IP "\fBmb_type\fR" 4
.IX Item "mb_type"
.PD
macroblock (\s-1MB\s0) type
.IP "\fBqp\fR" 4
.IX Item "qp"
per-block quantization parameter (\s-1QP\s0)
.IP "\fBmv\fR" 4
.IX Item "mv"
motion vector
.IP "\fBdct_coeff\fR" 4
.IX Item "dct_coeff"
.PD 0
.IP "\fBskip\fR" 4
.IX Item "skip"
.IP "\fBstartcode\fR" 4
.IX Item "startcode"
.IP "\fBpts\fR" 4
.IX Item "pts"
.IP "\fBer\fR" 4
.IX Item "er"
.PD
error recognition
.IP "\fBmmco\fR" 4
.IX Item "mmco"
memory management control operations (H.264)
.IP "\fBbugs\fR" 4
.IX Item "bugs"
.PD 0
.IP "\fBvis_qp\fR" 4
.IX Item "vis_qp"
.PD
visualize quantization parameter (\s-1QP\s0), lower \s-1QP\s0 are tinted greener
.IP "\fBvis_mb_type\fR" 4
.IX Item "vis_mb_type"
visualize block types
.IP "\fBbuffers\fR" 4
.IX Item "buffers"
picture buffer allocations
.IP "\fBthread_ops\fR" 4
.IX Item "thread_ops"
threading operations
.RE
.RS 4
.RE
.IP "\fB\-vismv[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput,video\fR\fB)\fR" 4
.IX Item "-vismv[:stream_specifier] integer (input,video)"
visualize motion vectors (MVs)
.Sp
Possible values:
.RS 4
.IP "\fBpf\fR" 4
.IX Item "pf"
forward predicted MVs of P\-frames
.IP "\fBbf\fR" 4
.IX Item "bf"
forward predicted MVs of B\-frames
.IP "\fBbb\fR" 4
.IX Item "bb"
backward predicted MVs of B\-frames
.RE
.RS 4
.RE
.IP "\fB\-cmp[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-cmp[:stream_specifier] integer (output,video)"
full pel me compare function
.Sp
Possible values:
.RS 4
.IP "\fBsad\fR" 4
.IX Item "sad"
sum of absolute differences, fast (default)
.IP "\fBsse\fR" 4
.IX Item "sse"
sum of squared errors
.IP "\fBsatd\fR" 4
.IX Item "satd"
sum of absolute Hadamard transformed differences
.IP "\fBdct\fR" 4
.IX Item "dct"
sum of absolute \s-1DCT\s0 transformed differences
.IP "\fBpsnr\fR" 4
.IX Item "psnr"
sum of squared quantization errors (avoid, low quality)
.IP "\fBbit\fR" 4
.IX Item "bit"
number of bits needed for the block
.IP "\fBrd\fR" 4
.IX Item "rd"
rate distortion optimal, slow
.IP "\fBzero\fR" 4
.IX Item "zero"
0
.IP "\fBvsad\fR" 4
.IX Item "vsad"
sum of absolute vertical differences
.IP "\fBvsse\fR" 4
.IX Item "vsse"
sum of squared vertical differences
.IP "\fBnsse\fR" 4
.IX Item "nsse"
noise preserving sum of squared differences
.IP "\fBw53\fR" 4
.IX Item "w53"
5/3 wavelet, only used in snow
.IP "\fBw97\fR" 4
.IX Item "w97"
9/7 wavelet, only used in snow
.IP "\fBdctmax\fR" 4
.IX Item "dctmax"
.PD 0
.IP "\fBchroma\fR" 4
.IX Item "chroma"
.RE
.RS 4
.RE
.IP "\fB\-subcmp[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-subcmp[:stream_specifier] integer (output,video)"
.PD
sub pel me compare function
.Sp
Possible values:
.RS 4
.IP "\fBsad\fR" 4
.IX Item "sad"
sum of absolute differences, fast (default)
.IP "\fBsse\fR" 4
.IX Item "sse"
sum of squared errors
.IP "\fBsatd\fR" 4
.IX Item "satd"
sum of absolute Hadamard transformed differences
.IP "\fBdct\fR" 4
.IX Item "dct"
sum of absolute \s-1DCT\s0 transformed differences
.IP "\fBpsnr\fR" 4
.IX Item "psnr"
sum of squared quantization errors (avoid, low quality)
.IP "\fBbit\fR" 4
.IX Item "bit"
number of bits needed for the block
.IP "\fBrd\fR" 4
.IX Item "rd"
rate distortion optimal, slow
.IP "\fBzero\fR" 4
.IX Item "zero"
0
.IP "\fBvsad\fR" 4
.IX Item "vsad"
sum of absolute vertical differences
.IP "\fBvsse\fR" 4
.IX Item "vsse"
sum of squared vertical differences
.IP "\fBnsse\fR" 4
.IX Item "nsse"
noise preserving sum of squared differences
.IP "\fBw53\fR" 4
.IX Item "w53"
5/3 wavelet, only used in snow
.IP "\fBw97\fR" 4
.IX Item "w97"
9/7 wavelet, only used in snow
.IP "\fBdctmax\fR" 4
.IX Item "dctmax"
.PD 0
.IP "\fBchroma\fR" 4
.IX Item "chroma"
.RE
.RS 4
.RE
.IP "\fB\-mbcmp[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-mbcmp[:stream_specifier] integer (output,video)"
.PD
macroblock compare function
.Sp
Possible values:
.RS 4
.IP "\fBsad\fR" 4
.IX Item "sad"
sum of absolute differences, fast (default)
.IP "\fBsse\fR" 4
.IX Item "sse"
sum of squared errors
.IP "\fBsatd\fR" 4
.IX Item "satd"
sum of absolute Hadamard transformed differences
.IP "\fBdct\fR" 4
.IX Item "dct"
sum of absolute \s-1DCT\s0 transformed differences
.IP "\fBpsnr\fR" 4
.IX Item "psnr"
sum of squared quantization errors (avoid, low quality)
.IP "\fBbit\fR" 4
.IX Item "bit"
number of bits needed for the block
.IP "\fBrd\fR" 4
.IX Item "rd"
rate distortion optimal, slow
.IP "\fBzero\fR" 4
.IX Item "zero"
0
.IP "\fBvsad\fR" 4
.IX Item "vsad"
sum of absolute vertical differences
.IP "\fBvsse\fR" 4
.IX Item "vsse"
sum of squared vertical differences
.IP "\fBnsse\fR" 4
.IX Item "nsse"
noise preserving sum of squared differences
.IP "\fBw53\fR" 4
.IX Item "w53"
5/3 wavelet, only used in snow
.IP "\fBw97\fR" 4
.IX Item "w97"
9/7 wavelet, only used in snow
.IP "\fBdctmax\fR" 4
.IX Item "dctmax"
.PD 0
.IP "\fBchroma\fR" 4
.IX Item "chroma"
.RE
.RS 4
.RE
.IP "\fB\-ildctcmp[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-ildctcmp[:stream_specifier] integer (output,video)"
.PD
interlaced dct compare function
.Sp
Possible values:
.RS 4
.IP "\fBsad\fR" 4
.IX Item "sad"
sum of absolute differences, fast (default)
.IP "\fBsse\fR" 4
.IX Item "sse"
sum of squared errors
.IP "\fBsatd\fR" 4
.IX Item "satd"
sum of absolute Hadamard transformed differences
.IP "\fBdct\fR" 4
.IX Item "dct"
sum of absolute \s-1DCT\s0 transformed differences
.IP "\fBpsnr\fR" 4
.IX Item "psnr"
sum of squared quantization errors (avoid, low quality)
.IP "\fBbit\fR" 4
.IX Item "bit"
number of bits needed for the block
.IP "\fBrd\fR" 4
.IX Item "rd"
rate distortion optimal, slow
.IP "\fBzero\fR" 4
.IX Item "zero"
0
.IP "\fBvsad\fR" 4
.IX Item "vsad"
sum of absolute vertical differences
.IP "\fBvsse\fR" 4
.IX Item "vsse"
sum of squared vertical differences
.IP "\fBnsse\fR" 4
.IX Item "nsse"
noise preserving sum of squared differences
.IP "\fBw53\fR" 4
.IX Item "w53"
5/3 wavelet, only used in snow
.IP "\fBw97\fR" 4
.IX Item "w97"
9/7 wavelet, only used in snow
.IP "\fBdctmax\fR" 4
.IX Item "dctmax"
.PD 0
.IP "\fBchroma\fR" 4
.IX Item "chroma"
.RE
.RS 4
.RE
.IP "\fB\-dia_size[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-dia_size[:stream_specifier] integer (output,video)"
.PD
diamond type & size for motion estimation
.IP "\fB\-last_pred[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-last_pred[:stream_specifier] integer (output,video)"
amount of motion predictors from the previous frame
.IP "\fB\-preme[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-preme[:stream_specifier] integer (output,video)"
pre motion estimation
.IP "\fB\-precmp[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-precmp[:stream_specifier] integer (output,video)"
pre motion estimation compare function
.Sp
Possible values:
.RS 4
.IP "\fBsad\fR" 4
.IX Item "sad"
sum of absolute differences, fast (default)
.IP "\fBsse\fR" 4
.IX Item "sse"
sum of squared errors
.IP "\fBsatd\fR" 4
.IX Item "satd"
sum of absolute Hadamard transformed differences
.IP "\fBdct\fR" 4
.IX Item "dct"
sum of absolute \s-1DCT\s0 transformed differences
.IP "\fBpsnr\fR" 4
.IX Item "psnr"
sum of squared quantization errors (avoid, low quality)
.IP "\fBbit\fR" 4
.IX Item "bit"
number of bits needed for the block
.IP "\fBrd\fR" 4
.IX Item "rd"
rate distortion optimal, slow
.IP "\fBzero\fR" 4
.IX Item "zero"
0
.IP "\fBvsad\fR" 4
.IX Item "vsad"
sum of absolute vertical differences
.IP "\fBvsse\fR" 4
.IX Item "vsse"
sum of squared vertical differences
.IP "\fBnsse\fR" 4
.IX Item "nsse"
noise preserving sum of squared differences
.IP "\fBw53\fR" 4
.IX Item "w53"
5/3 wavelet, only used in snow
.IP "\fBw97\fR" 4
.IX Item "w97"
9/7 wavelet, only used in snow
.IP "\fBdctmax\fR" 4
.IX Item "dctmax"
.PD 0
.IP "\fBchroma\fR" 4
.IX Item "chroma"
.RE
.RS 4
.RE
.IP "\fB\-pre_dia_size[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-pre_dia_size[:stream_specifier] integer (output,video)"
.PD
diamond type & size for motion estimation pre-pass
.IP "\fB\-subq[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-subq[:stream_specifier] integer (output,video)"
sub pel motion estimation quality
.IP "\fB\-dtg_active_format[:stream_specifier]\fR \fIinteger\fR \fB()\fR" 4
.IX Item "-dtg_active_format[:stream_specifier] integer ()"
.PD 0
.IP "\fB\-me_range[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-me_range[:stream_specifier] integer (output,video)"
.PD
limit motion vectors range (1023 for DivX player)
.IP "\fB\-ibias[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-ibias[:stream_specifier] integer (output,video)"
intra quant bias
.IP "\fB\-pbias[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-pbias[:stream_specifier] integer (output,video)"
inter quant bias
.IP "\fB\-color_table_id[:stream_specifier]\fR \fIinteger\fR \fB()\fR" 4
.IX Item "-color_table_id[:stream_specifier] integer ()"
.PD 0
.IP "\fB\-global_quality[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,audio,video\fR\fB)\fR" 4
.IX Item "-global_quality[:stream_specifier] integer (output,audio,video)"
.IP "\fB\-coder[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-coder[:stream_specifier] integer (output,video)"
.PD
Possible values:
.RS 4
.IP "\fBvlc\fR" 4
.IX Item "vlc"
variable length coder / huffman coder
.IP "\fBac\fR" 4
.IX Item "ac"
arithmetic coder
.IP "\fBraw\fR" 4
.IX Item "raw"
raw (no encoding)
.IP "\fBrle\fR" 4
.IX Item "rle"
run-length coder
.IP "\fBdeflate\fR" 4
.IX Item "deflate"
deflate-based coder
.RE
.RS 4
.RE
.IP "\fB\-context[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-context[:stream_specifier] integer (output,video)"
context model
.IP "\fB\-slice_flags[:stream_specifier]\fR \fIinteger\fR \fB()\fR" 4
.IX Item "-slice_flags[:stream_specifier] integer ()"
.PD 0
.IP "\fB\-xvmc_acceleration[:stream_specifier]\fR \fIinteger\fR \fB()\fR" 4
.IX Item "-xvmc_acceleration[:stream_specifier] integer ()"
.IP "\fB\-mbd[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-mbd[:stream_specifier] integer (output,video)"
.PD
macroblock decision algorithm (high quality mode)
.Sp
Possible values:
.RS 4
.IP "\fBsimple\fR" 4
.IX Item "simple"
use mbcmp (default)
.IP "\fBbits\fR" 4
.IX Item "bits"
use fewest bits
.IP "\fBrd\fR" 4
.IX Item "rd"
use best rate distortion
.RE
.RS 4
.RE
.IP "\fB\-stream_codec_tag[:stream_specifier]\fR \fIinteger\fR \fB()\fR" 4
.IX Item "-stream_codec_tag[:stream_specifier] integer ()"
.PD 0
.IP "\fB\-sc_threshold[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-sc_threshold[:stream_specifier] integer (output,video)"
.PD
scene change threshold
.IP "\fB\-lmin[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-lmin[:stream_specifier] integer (output,video)"
min lagrange factor (\s-1VBR\s0)
.IP "\fB\-lmax[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-lmax[:stream_specifier] integer (output,video)"
max lagrange factor (\s-1VBR\s0)
.IP "\fB\-nr[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-nr[:stream_specifier] integer (output,video)"
noise reduction
.IP "\fB\-rc_init_occupancy[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-rc_init_occupancy[:stream_specifier] integer (output,video)"
number of bits which should be loaded into the rc buffer before decoding starts
.IP "\fB\-inter_threshold[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-inter_threshold[:stream_specifier] integer (output,video)"
.PD 0
.IP "\fB\-flags2[:stream_specifier]\fR \fIflags\fR \fB(\fR\fIinput/output,audio,video\fR\fB)\fR" 4
.IX Item "-flags2[:stream_specifier] flags (input/output,audio,video)"
.PD
Possible values:
.RS 4
.IP "\fBfast\fR" 4
.IX Item "fast"
allow non spec compliant speedup tricks
.IP "\fBsgop\fR" 4
.IX Item "sgop"
Deprecated, use mpegvideo private options instead
.IP "\fBnoout\fR" 4
.IX Item "noout"
skip bitstream encoding
.IP "\fBlocal_header\fR" 4
.IX Item "local_header"
place global headers at every keyframe instead of in extradata
.IP "\fBchunks\fR" 4
.IX Item "chunks"
Frame data might be split into multiple chunks
.IP "\fBshowall\fR" 4
.IX Item "showall"
Show all frames before the first keyframe
.IP "\fBskiprd\fR" 4
.IX Item "skiprd"
Deprecated, use mpegvideo private options instead
.RE
.RS 4
.RE
.IP "\fB\-error[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-error[:stream_specifier] integer (output,video)"
.PD 0
.IP "\fB\-qns[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-qns[:stream_specifier] integer (output,video)"
.PD
deprecated, use mpegvideo private options instead
.IP "\fB\-threads[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput/output,video\fR\fB)\fR" 4
.IX Item "-threads[:stream_specifier] integer (input/output,video)"
Possible values:
.RS 4
.IP "\fBauto\fR" 4
.IX Item "auto"
detect a good number of threads
.RE
.RS 4
.RE
.IP "\fB\-me_threshold[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-me_threshold[:stream_specifier] integer (output,video)"
motion estimaton threshold
.IP "\fB\-mb_threshold[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-mb_threshold[:stream_specifier] integer (output,video)"
macroblock threshold
.IP "\fB\-dc[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-dc[:stream_specifier] integer (output,video)"
intra_dc_precision
.IP "\fB\-nssew[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-nssew[:stream_specifier] integer (output,video)"
nsse weight
.IP "\fB\-skip_top[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput,video\fR\fB)\fR" 4
.IX Item "-skip_top[:stream_specifier] integer (input,video)"
number of macroblock rows at the top which are skipped
.IP "\fB\-skip_bottom[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput,video\fR\fB)\fR" 4
.IX Item "-skip_bottom[:stream_specifier] integer (input,video)"
number of macroblock rows at the bottom which are skipped
.IP "\fB\-profile[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,audio,video\fR\fB)\fR" 4
.IX Item "-profile[:stream_specifier] integer (output,audio,video)"
Possible values:
.RS 4
.IP "\fBunknown\fR" 4
.IX Item "unknown"
.PD 0
.IP "\fBaac_main\fR" 4
.IX Item "aac_main"
.IP "\fBaac_low\fR" 4
.IX Item "aac_low"
.IP "\fBaac_ssr\fR" 4
.IX Item "aac_ssr"
.IP "\fBaac_ltp\fR" 4
.IX Item "aac_ltp"
.IP "\fBaac_he\fR" 4
.IX Item "aac_he"
.IP "\fBaac_he_v2\fR" 4
.IX Item "aac_he_v2"
.IP "\fBaac_ld\fR" 4
.IX Item "aac_ld"
.IP "\fBaac_eld\fR" 4
.IX Item "aac_eld"
.IP "\fBdts\fR" 4
.IX Item "dts"
.IP "\fBdts_es\fR" 4
.IX Item "dts_es"
.IP "\fBdts_96_24\fR" 4
.IX Item "dts_96_24"
.IP "\fBdts_hd_hra\fR" 4
.IX Item "dts_hd_hra"
.IP "\fBdts_hd_ma\fR" 4
.IX Item "dts_hd_ma"
.RE
.RS 4
.RE
.IP "\fB\-level[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,audio,video\fR\fB)\fR" 4
.IX Item "-level[:stream_specifier] integer (output,audio,video)"
.PD
Possible values:
.RS 4
.IP "\fBunknown\fR" 4
.IX Item "unknown"
.RE
.RS 4
.RE
.PD 0
.IP "\fB\-lowres[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput,audio,video\fR\fB)\fR" 4
.IX Item "-lowres[:stream_specifier] integer (input,audio,video)"
.PD
decode at 1= 1/2, 2=1/4, 3=1/8 resolutions
.IP "\fB\-skip_threshold[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-skip_threshold[:stream_specifier] integer (output,video)"
frame skip threshold
.IP "\fB\-skip_factor[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-skip_factor[:stream_specifier] integer (output,video)"
frame skip factor
.IP "\fB\-skip_exp[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-skip_exp[:stream_specifier] integer (output,video)"
frame skip exponent
.IP "\fB\-skipcmp[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-skipcmp[:stream_specifier] integer (output,video)"
frame skip compare function
.Sp
Possible values:
.RS 4
.IP "\fBsad\fR" 4
.IX Item "sad"
sum of absolute differences, fast (default)
.IP "\fBsse\fR" 4
.IX Item "sse"
sum of squared errors
.IP "\fBsatd\fR" 4
.IX Item "satd"
sum of absolute Hadamard transformed differences
.IP "\fBdct\fR" 4
.IX Item "dct"
sum of absolute \s-1DCT\s0 transformed differences
.IP "\fBpsnr\fR" 4
.IX Item "psnr"
sum of squared quantization errors (avoid, low quality)
.IP "\fBbit\fR" 4
.IX Item "bit"
number of bits needed for the block
.IP "\fBrd\fR" 4
.IX Item "rd"
rate distortion optimal, slow
.IP "\fBzero\fR" 4
.IX Item "zero"
0
.IP "\fBvsad\fR" 4
.IX Item "vsad"
sum of absolute vertical differences
.IP "\fBvsse\fR" 4
.IX Item "vsse"
sum of squared vertical differences
.IP "\fBnsse\fR" 4
.IX Item "nsse"
noise preserving sum of squared differences
.IP "\fBw53\fR" 4
.IX Item "w53"
5/3 wavelet, only used in snow
.IP "\fBw97\fR" 4
.IX Item "w97"
9/7 wavelet, only used in snow
.IP "\fBdctmax\fR" 4
.IX Item "dctmax"
.PD 0
.IP "\fBchroma\fR" 4
.IX Item "chroma"
.RE
.RS 4
.RE
.IP "\fB\-border_mask[:stream_specifier]\fR \fIfloat\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-border_mask[:stream_specifier] float (output,video)"
.PD
increases the quantizer for macroblocks close to borders
.IP "\fB\-mblmin[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-mblmin[:stream_specifier] integer (output,video)"
min macroblock lagrange factor (\s-1VBR\s0)
.IP "\fB\-mblmax[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-mblmax[:stream_specifier] integer (output,video)"
max macroblock lagrange factor (\s-1VBR\s0)
.IP "\fB\-mepc[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-mepc[:stream_specifier] integer (output,video)"
motion estimation bitrate penalty compensation (1.0 = 256)
.IP "\fB\-skip_loop_filter[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput,video\fR\fB)\fR" 4
.IX Item "-skip_loop_filter[:stream_specifier] integer (input,video)"
Possible values:
.RS 4
.IP "\fBnone\fR" 4
.IX Item "none"
.PD 0
.IP "\fBdefault\fR" 4
.IX Item "default"
.IP "\fBnoref\fR" 4
.IX Item "noref"
.IP "\fBbidir\fR" 4
.IX Item "bidir"
.IP "\fBnokey\fR" 4
.IX Item "nokey"
.IP "\fBall\fR" 4
.IX Item "all"
.RE
.RS 4
.RE
.IP "\fB\-skip_idct[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput,video\fR\fB)\fR" 4
.IX Item "-skip_idct[:stream_specifier] integer (input,video)"
.PD
Possible values:
.RS 4
.IP "\fBnone\fR" 4
.IX Item "none"
.PD 0
.IP "\fBdefault\fR" 4
.IX Item "default"
.IP "\fBnoref\fR" 4
.IX Item "noref"
.IP "\fBbidir\fR" 4
.IX Item "bidir"
.IP "\fBnokey\fR" 4
.IX Item "nokey"
.IP "\fBall\fR" 4
.IX Item "all"
.RE
.RS 4
.RE
.IP "\fB\-skip_frame[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput,video\fR\fB)\fR" 4
.IX Item "-skip_frame[:stream_specifier] integer (input,video)"
.PD
Possible values:
.RS 4
.IP "\fBnone\fR" 4
.IX Item "none"
.PD 0
.IP "\fBdefault\fR" 4
.IX Item "default"
.IP "\fBnoref\fR" 4
.IX Item "noref"
.IP "\fBbidir\fR" 4
.IX Item "bidir"
.IP "\fBnokey\fR" 4
.IX Item "nokey"
.IP "\fBall\fR" 4
.IX Item "all"
.RE
.RS 4
.RE
.IP "\fB\-bidir_refine[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-bidir_refine[:stream_specifier] integer (output,video)"
.PD
refine the two motion vectors used in bidirectional macroblocks
.IP "\fB\-brd_scale[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-brd_scale[:stream_specifier] integer (output,video)"
downscales frames for dynamic B\-frame decision
.IP "\fB\-keyint_min[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-keyint_min[:stream_specifier] integer (output,video)"
minimum interval between IDR-frames
.IP "\fB\-refs[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-refs[:stream_specifier] integer (output,video)"
reference frames to consider for motion compensation
.IP "\fB\-chromaoffset[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-chromaoffset[:stream_specifier] integer (output,video)"
chroma qp offset from luma
.IP "\fB\-trellis[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,audio,video\fR\fB)\fR" 4
.IX Item "-trellis[:stream_specifier] integer (output,audio,video)"
rate-distortion optimal quantization
.IP "\fB\-sc_factor[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-sc_factor[:stream_specifier] integer (output,video)"
multiplied by qscale for each frame and added to scene_change_score
.IP "\fB\-mv0_threshold[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-mv0_threshold[:stream_specifier] integer (output,video)"
.PD 0
.IP "\fB\-b_sensitivity[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-b_sensitivity[:stream_specifier] integer (output,video)"
.PD
adjusts sensitivity of b_frame_strategy 1
.IP "\fB\-compression_level[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,audio,video\fR\fB)\fR" 4
.IX Item "-compression_level[:stream_specifier] integer (output,audio,video)"
.PD 0
.IP "\fB\-min_prediction_order[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,audio\fR\fB)\fR" 4
.IX Item "-min_prediction_order[:stream_specifier] integer (output,audio)"
.IP "\fB\-max_prediction_order[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,audio\fR\fB)\fR" 4
.IX Item "-max_prediction_order[:stream_specifier] integer (output,audio)"
.IP "\fB\-timecode_frame_start[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-timecode_frame_start[:stream_specifier] integer (output,video)"
.PD
\&\s-1GOP\s0 timecode frame start number, in non drop frame format
.IP "\fB\-request_channels[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput,audio\fR\fB)\fR" 4
.IX Item "-request_channels[:stream_specifier] integer (input,audio)"
set desired number of audio channels
.IP "\fB\-bits_per_raw_sample[:stream_specifier]\fR \fIinteger\fR \fB()\fR" 4
.IX Item "-bits_per_raw_sample[:stream_specifier] integer ()"
.PD 0
.IP "\fB\-channel_layout[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput/output,audio\fR\fB)\fR" 4
.IX Item "-channel_layout[:stream_specifier] integer (input/output,audio)"
.PD
Possible values:
.RS 4
.RE
.RS 4
.RE
.IP "\fB\-request_channel_layout[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput,audio\fR\fB)\fR" 4
.IX Item "-request_channel_layout[:stream_specifier] integer (input,audio)"
Possible values:
.RS 4
.RE
.RS 4
.RE
.IP "\fB\-rc_max_vbv_use[:stream_specifier]\fR \fIfloat\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-rc_max_vbv_use[:stream_specifier] float (output,video)"
.PD 0
.IP "\fB\-rc_min_vbv_use[:stream_specifier]\fR \fIfloat\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-rc_min_vbv_use[:stream_specifier] float (output,video)"
.IP "\fB\-ticks_per_frame[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput/output,audio,video\fR\fB)\fR" 4
.IX Item "-ticks_per_frame[:stream_specifier] integer (input/output,audio,video)"
.IP "\fB\-color_primaries[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput/output,video\fR\fB)\fR" 4
.IX Item "-color_primaries[:stream_specifier] integer (input/output,video)"
.IP "\fB\-color_trc[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput/output,video\fR\fB)\fR" 4
.IX Item "-color_trc[:stream_specifier] integer (input/output,video)"
.IP "\fB\-colorspace[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput/output,video\fR\fB)\fR" 4
.IX Item "-colorspace[:stream_specifier] integer (input/output,video)"
.IP "\fB\-color_range[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput/output,video\fR\fB)\fR" 4
.IX Item "-color_range[:stream_specifier] integer (input/output,video)"
.IP "\fB\-chroma_sample_location[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput/output,video\fR\fB)\fR" 4
.IX Item "-chroma_sample_location[:stream_specifier] integer (input/output,video)"
.IP "\fB\-log_level_offset[:stream_specifier]\fR \fIinteger\fR \fB()\fR" 4
.IX Item "-log_level_offset[:stream_specifier] integer ()"
.PD
set the log level offset
.IP "\fB\-slices[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,video\fR\fB)\fR" 4
.IX Item "-slices[:stream_specifier] integer (output,video)"
number of slices, used in parallelized encoding
.IP "\fB\-thread_type[:stream_specifier]\fR \fIflags\fR \fB(\fR\fIinput/output,video\fR\fB)\fR" 4
.IX Item "-thread_type[:stream_specifier] flags (input/output,video)"
select multithreading type
.Sp
Possible values:
.RS 4
.IP "\fBslice\fR" 4
.IX Item "slice"
.PD 0
.IP "\fBframe\fR" 4
.IX Item "frame"
.RE
.RS 4
.RE
.IP "\fB\-audio_service_type[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIoutput,audio\fR\fB)\fR" 4
.IX Item "-audio_service_type[:stream_specifier] integer (output,audio)"
.PD
audio service type
.Sp
Possible values:
.RS 4
.IP "\fBma\fR" 4
.IX Item "ma"
Main Audio Service
.IP "\fBef\fR" 4
.IX Item "ef"
Effects
.IP "\fBvi\fR" 4
.IX Item "vi"
Visually Impaired
.IP "\fBhi\fR" 4
.IX Item "hi"
Hearing Impaired
.IP "\fBdi\fR" 4
.IX Item "di"
Dialogue
.IP "\fBco\fR" 4
.IX Item "co"
Commentary
.IP "\fBem\fR" 4
.IX Item "em"
Emergency
.IP "\fBvo\fR" 4
.IX Item "vo"
Voice Over
.IP "\fBka\fR" 4
.IX Item "ka"
Karaoke
.RE
.RS 4
.RE
.IP "\fB\-request_sample_fmt[:stream_specifier]\fR \fIinteger\fR \fB(\fR\fIinput,audio\fR\fB)\fR" 4
.IX Item "-request_sample_fmt[:stream_specifier] integer (input,audio)"
sample format audio decoders should prefer
.Sp
Possible values:
.RS 4
.IP "\fBu8\fR" 4
.IX Item "u8"
8\-bit unsigned integer
.IP "\fBs16\fR" 4
.IX Item "s16"
16\-bit signed integer
.IP "\fBs32\fR" 4
.IX Item "s32"
32\-bit signed integer
.IP "\fBflt\fR" 4
.IX Item "flt"
32\-bit float
.IP "\fBdbl\fR" 4
.IX Item "dbl"
64\-bit double
.IP "\fBu8p\fR" 4
.IX Item "u8p"
8\-bit unsigned integer planar
.IP "\fBs16p\fR" 4
.IX Item "s16p"
16\-bit signed integer planar
.IP "\fBs32p\fR" 4
.IX Item "s32p"
32\-bit signed integer planar
.IP "\fBfltp\fR" 4
.IX Item "fltp"
32\-bit float planar
.IP "\fBdblp\fR" 4
.IX Item "dblp"
64\-bit double planar
.RE
.RS 4
.RE
.IP "\fB\-pkt_timebase[:stream_specifier]\fR \fIrational number\fR \fB()\fR" 4
.IX Item "-pkt_timebase[:stream_specifier] rational number ()"
.Sh "Format AVOptions"
.IX Subsection "Format AVOptions"
.PD 0
.IP "\fB\-avioflags\fR \fIflags\fR \fB(\fR\fIinput/output\fR\fB)\fR" 4
.IX Item "-avioflags flags (input/output)"
.PD
Possible values:
.RS 4
.IP "\fBdirect\fR" 4
.IX Item "direct"
reduce buffering
.RE
.RS 4
.RE
.IP "\fB\-probesize\fR \fIinteger\fR \fB(\fR\fIinput\fR\fB)\fR" 4
.IX Item "-probesize integer (input)"
set probing size
.IP "\fB\-packetsize\fR \fIinteger\fR \fB(\fR\fIoutput\fR\fB)\fR" 4
.IX Item "-packetsize integer (output)"
set packet size
.IP "\fB\-fflags\fR \fIflags\fR \fB(\fR\fIinput/output\fR\fB)\fR" 4
.IX Item "-fflags flags (input/output)"
Possible values:
.RS 4
.IP "\fBignidx\fR" 4
.IX Item "ignidx"
ignore index
.IP "\fBgenpts\fR" 4
.IX Item "genpts"
generate pts
.IP "\fBnofillin\fR" 4
.IX Item "nofillin"
do not fill in missing values that can be exactly calculated
.IP "\fBnoparse\fR" 4
.IX Item "noparse"
disable AVParsers, this needs nofillin too
.IP "\fBigndts\fR" 4
.IX Item "igndts"
ignore dts
.IP "\fBdiscardcorrupt\fR" 4
.IX Item "discardcorrupt"
discard corrupted frames
.IP "\fBsortdts\fR" 4
.IX Item "sortdts"
try to interleave outputted packets by dts
.IP "\fBkeepside\fR" 4
.IX Item "keepside"
dont merge side data
.IP "\fBlatm\fR" 4
.IX Item "latm"
enable \s-1RTP\s0 \s-1MP4A\-LATM\s0 payload
.IP "\fBnobuffer\fR" 4
.IX Item "nobuffer"
reduce the latency introduced by optional buffering
.RE
.RS 4
.RE
.IP "\fB\-analyzeduration\fR \fIinteger\fR \fB(\fR\fIinput\fR\fB)\fR" 4
.IX Item "-analyzeduration integer (input)"
how many microseconds are analyzed to estimate duration
.IP "\fB\-cryptokey\fR \fIhexadecimal string\fR \fB(\fR\fIinput\fR\fB)\fR" 4
.IX Item "-cryptokey hexadecimal string (input)"
decryption key
.IP "\fB\-indexmem\fR \fIinteger\fR \fB(\fR\fIinput\fR\fB)\fR" 4
.IX Item "-indexmem integer (input)"
max memory used for timestamp index (per stream)
.IP "\fB\-rtbufsize\fR \fIinteger\fR \fB(\fR\fIinput\fR\fB)\fR" 4
.IX Item "-rtbufsize integer (input)"
max memory used for buffering real-time frames
.IP "\fB\-fdebug\fR \fIflags\fR \fB(\fR\fIinput/output\fR\fB)\fR" 4
.IX Item "-fdebug flags (input/output)"
print specific debug info
.Sp
Possible values:
.RS 4
.IP "\fBts\fR" 4
.IX Item "ts"
.RE
.RS 4
.RE
.PD 0
.IP "\fB\-max_delay\fR \fIinteger\fR \fB(\fR\fIinput/output\fR\fB)\fR" 4
.IX Item "-max_delay integer (input/output)"
.PD
maximum muxing or demuxing delay in microseconds
.IP "\fB\-fpsprobesize\fR \fIinteger\fR \fB(\fR\fIinput\fR\fB)\fR" 4
.IX Item "-fpsprobesize integer (input)"
number of frames used to probe fps
.IP "\fB\-audio_preload\fR \fIinteger\fR \fB(\fR\fIoutput\fR\fB)\fR" 4
.IX Item "-audio_preload integer (output)"
microseconds by which audio packets should be interleaved earlier
.IP "\fB\-chunk_duration\fR \fIinteger\fR \fB(\fR\fIoutput\fR\fB)\fR" 4
.IX Item "-chunk_duration integer (output)"
microseconds for each chunk
.IP "\fB\-chunk_size\fR \fIinteger\fR \fB(\fR\fIoutput\fR\fB)\fR" 4
.IX Item "-chunk_size integer (output)"
size in bytes for each chunk
.IP "\fB\-f_err_detect\fR \fIflags\fR \fB(\fR\fIinput\fR\fB)\fR" 4
.IX Item "-f_err_detect flags (input)"
set error detection flags (deprecated; use err_detect, save via avconv)
.Sp
Possible values:
.RS 4
.IP "\fBcrccheck\fR" 4
.IX Item "crccheck"
verify embedded CRCs
.IP "\fBbitstream\fR" 4
.IX Item "bitstream"
detect bitstream specification deviations
.IP "\fBbuffer\fR" 4
.IX Item "buffer"
detect improper bitstream length
.IP "\fBexplode\fR" 4
.IX Item "explode"
abort decoding on minor error detection
.IP "\fBcareful\fR" 4
.IX Item "careful"
consider things that violate the spec and have not been seen in the wild as errors
.IP "\fBcompliant\fR" 4
.IX Item "compliant"
consider all spec non compliancies as errors
.IP "\fBaggressive\fR" 4
.IX Item "aggressive"
consider things that a sane encoder shouldnt do as an error
.RE
.RS 4
.RE
.IP "\fB\-err_detect\fR \fIflags\fR \fB(\fR\fIinput\fR\fB)\fR" 4
.IX Item "-err_detect flags (input)"
set error detection flags
.Sp
Possible values:
.RS 4
.IP "\fBcrccheck\fR" 4
.IX Item "crccheck"
verify embedded CRCs
.IP "\fBbitstream\fR" 4
.IX Item "bitstream"
detect bitstream specification deviations
.IP "\fBbuffer\fR" 4
.IX Item "buffer"
detect improper bitstream length
.IP "\fBexplode\fR" 4
.IX Item "explode"
abort decoding on minor error detection
.IP "\fBcareful\fR" 4
.IX Item "careful"
consider things that violate the spec and have not been seen in the wild as errors
.IP "\fBcompliant\fR" 4
.IX Item "compliant"
consider all spec non compliancies as errors
.IP "\fBaggressive\fR" 4
.IX Item "aggressive"
consider things that a sane encoder shouldnt do as an error
.RE
.RS 4
.RE
.IP "\fB\-use_wallclock_as_timestamps\fR \fIinteger\fR \fB(\fR\fIinput\fR\fB)\fR" 4
.IX Item "-use_wallclock_as_timestamps integer (input)"
use wallclock as timestamps
.IP "\fB\-avoid_negative_ts\fR \fIinteger\fR \fB(\fR\fIoutput\fR\fB)\fR" 4
.IX Item "-avoid_negative_ts integer (output)"
avoid negative timestamps
.Sh "Main options"
.IX Subsection "Main options"
.IP "\fB\-f\fR \fIformat\fR" 4
.IX Item "-f format"
Force format to use.
.IP "\fB\-unit\fR" 4
.IX Item "-unit"
Show the unit of the displayed values.
.IP "\fB\-prefix\fR" 4
.IX Item "-prefix"
Use \s-1SI\s0 prefixes for the displayed values.
Unless the \*(L"\-byte_binary_prefix\*(R" option is used all the prefixes
are decimal.
.IP "\fB\-byte_binary_prefix\fR" 4
.IX Item "-byte_binary_prefix"
Force the use of binary prefixes for byte values.
.IP "\fB\-sexagesimal\fR" 4
.IX Item "-sexagesimal"
Use sexagesimal format \s-1HH:MM:SS\s0.MICROSECONDS for time values.
.IP "\fB\-pretty\fR" 4
.IX Item "-pretty"
Prettify the format of the displayed values, it corresponds to the
options \*(L"\-unit \-prefix \-byte_binary_prefix \-sexagesimal\*(R".
.IP "\fB\-of, \-print_format\fR \fIwriter_name\fR\fB[=\fR\fIwriter_options\fR\fB]\fR" 4
.IX Item "-of, -print_format writer_name[=writer_options]"
Set the output printing format.
.Sp
\&\fIwriter_name\fR specifies the name of the writer, and
\&\fIwriter_options\fR specifies the options to be passed to the writer.
.Sp
For example for printing the output in \s-1JSON\s0 format, specify:
.Sp
.Vb 1
\&        -print_format json
.Ve
.Sp
For more details on the available output printing formats, see the
Writers section below.
.IP "\fB\-select_streams\fR \fIstream_specifier\fR" 4
.IX Item "-select_streams stream_specifier"
Select only the streams specified by \fIstream_specifier\fR. This
option affects only the options related to streams
(e.g. \f(CW\*(C`show_streams\*(C'\fR, \f(CW\*(C`show_packets\*(C'\fR, etc.).
.Sp
For example to show only audio streams, you can use the command:
.Sp
.Vb 1
\&        ffprobe -show_streams -select_streams a INPUT
.Ve
.Sp
To show only video packets belonging to the video stream with index 1:
.Sp
.Vb 1
\&        ffprobe -show_packets -select_streams v:1 INPUT
.Ve
.IP "\fB\-show_data\fR" 4
.IX Item "-show_data"
Show payload data, as an hexadecimal and \s-1ASCII\s0 dump. Coupled with
\&\fB\-show_packets\fR, it will dump the packets' data. Coupled with
\&\fB\-show_streams\fR, it will dump the codec extradata.
.Sp
The dump is printed as the \*(L"data\*(R" field. It may contain newlines.
.IP "\fB\-show_error\fR" 4
.IX Item "-show_error"
Show information about the error found when trying to probe the input.
.Sp
The error information is printed within a section with name \*(L"\s-1ERROR\s0\*(R".
.IP "\fB\-show_format\fR" 4
.IX Item "-show_format"
Show information about the container format of the input multimedia
stream.
.Sp
All the container format information is printed within a section with
name \*(L"\s-1FORMAT\s0\*(R".
.IP "\fB\-show_format_entry\fR \fIname\fR" 4
.IX Item "-show_format_entry name"
Like \fB\-show_format\fR, but only prints the specified entry of the
container format information, rather than all. This option may be given more
than once, then all specified entries will be shown.
.IP "\fB\-show_packets\fR" 4
.IX Item "-show_packets"
Show information about each packet contained in the input multimedia
stream.
.Sp
The information for each single packet is printed within a dedicated
section with name \*(L"\s-1PACKET\s0\*(R".
.IP "\fB\-show_frames\fR" 4
.IX Item "-show_frames"
Show information about each frame contained in the input multimedia
stream.
.Sp
The information for each single frame is printed within a dedicated
section with name \*(L"\s-1FRAME\s0\*(R".
.IP "\fB\-show_streams\fR" 4
.IX Item "-show_streams"
Show information about each media stream contained in the input
multimedia stream.
.Sp
Each media stream information is printed within a dedicated section
with name \*(L"\s-1STREAM\s0\*(R".
.IP "\fB\-count_frames\fR" 4
.IX Item "-count_frames"
Count the number of frames per stream and report it in the
corresponding stream section.
.IP "\fB\-count_packets\fR" 4
.IX Item "-count_packets"
Count the number of packets per stream and report it in the
corresponding stream section.
.IP "\fB\-show_private_data, \-private\fR" 4
.IX Item "-show_private_data, -private"
Show private data, that is data depending on the format of the
particular shown element.
This option is enabled by default, but you may need to disable it
for specific uses, for example when creating XSD-compliant \s-1XML\s0 output.
.IP "\fB\-show_program_version\fR" 4
.IX Item "-show_program_version"
Show information related to program version.
.Sp
Version information is printed within a section with name
\&\*(L"\s-1PROGRAM_VERSION\s0\*(R".
.IP "\fB\-show_library_versions\fR" 4
.IX Item "-show_library_versions"
Show information related to library versions.
.Sp
Version information for each library is printed within a section with
name \*(L"\s-1LIBRARY_VERSION\s0\*(R".
.IP "\fB\-show_versions\fR" 4
.IX Item "-show_versions"
Show information related to program and library versions. This is the
equivalent of setting both \fB\-show_program_version\fR and
\&\fB\-show_library_versions\fR options.
.IP "\fB\-bitexact\fR" 4
.IX Item "-bitexact"
Force bitexact output, useful to produce output which is not dependent
on the specific build.
.IP "\fB\-i\fR \fIinput_file\fR" 4
.IX Item "-i input_file"
Read \fIinput_file\fR.
.SH "WRITERS"
.IX Header "WRITERS"
A writer defines the output format adopted by \fBffprobe\fR, and will be
used for printing all the parts of the output.
.PP
A writer may accept one or more arguments, which specify the options to
adopt.
.PP
A description of the currently available writers follows.
.Sh "default"
.IX Subsection "default"
Default format.
.PP
Print each section in the form:
.PP
.Vb 5
\&        [SECTION]
\&        key1=val1
\&        ...
\&        keyN=valN
\&        [/SECTION]
.Ve
.PP
Metadata tags are printed as a line in the corresponding \s-1FORMAT\s0 or
\&\s-1STREAM\s0 section, and are prefixed by the string \*(L"\s-1TAG:\s0\*(R".
.PP
This writer accepts options as a list of \fIkey\fR=\fIvalue\fR pairs,
separated by \*(L":\*(R".
.PP
A description of the accepted options follows.
.IP "\fBnokey, nk\fR" 4
.IX Item "nokey, nk"
If set to 1 specify not to print the key of each field. Default value
is 0.
.IP "\fBnoprint_wrappers, nw\fR" 4
.IX Item "noprint_wrappers, nw"
If set to 1 specify not to print the section header and footer.
Default value is 0.
.Sh "compact, csv"
.IX Subsection "compact, csv"
Compact and \s-1CSV\s0 format.
.PP
The \f(CW\*(C`csv\*(C'\fR writer is equivalent to \f(CW\*(C`compact\*(C'\fR, but supports
different defaults.
.PP
Each section is printed on a single line.
If no option is specifid, the output has the form:
.PP
.Vb 1
\&        section|key1=val1| ... |keyN=valN
.Ve
.PP
Metadata tags are printed in the corresponding \*(L"format\*(R" or \*(L"stream\*(R"
section. A metadata tag key, if printed, is prefixed by the string
\&\*(L"tag:\*(R".
.PP
This writer accepts options as a list of \fIkey\fR=\fIvalue\fR pairs,
separated by \*(L":\*(R".
.PP
The description of the accepted options follows.
.IP "\fBitem_sep, s\fR" 4
.IX Item "item_sep, s"
Specify the character to use for separating fields in the output line.
It must be a single printable character, it is \*(L"|\*(R" by default (\*(L",\*(R" for
the \f(CW\*(C`csv\*(C'\fR writer).
.IP "\fBnokey, nk\fR" 4
.IX Item "nokey, nk"
If set to 1 specify not to print the key of each field. Its default
value is 0 (1 for the \f(CW\*(C`csv\*(C'\fR writer).
.IP "\fBescape, e\fR" 4
.IX Item "escape, e"
Set the escape mode to use, default to \*(L"c\*(R" (\*(L"csv\*(R" for the \f(CW\*(C`csv\*(C'\fR
writer).
.Sp
It can assume one of the following values:
.RS 4
.IP "\fBc\fR" 4
.IX Item "c"
Perform C\-like escaping. Strings containing a newline ('\en'), carriage
return ('\er'), a tab ('\et'), a form feed ('\ef'), the escaping
character ('\e') or the item separator character \fI\s-1SEP\s0\fR are escaped using C\-like fashioned
escaping, so that a newline is converted to the sequence \*(L"\en\*(R", a
carriage return to \*(L"\er\*(R", '\e' to \*(L"\e\e\*(R" and the separator \fI\s-1SEP\s0\fR is
converted to "\e\fI\s-1SEP\s0\fR".
.IP "\fBcsv\fR" 4
.IX Item "csv"
Perform CSV-like escaping, as described in \s-1RFC4180\s0.  Strings
containing a newline ('\en'), a carriage return ('\er'), a double quote
('"'), or \fI\s-1SEP\s0\fR are enclosed in double\-quotes.
.IP "\fBnone\fR" 4
.IX Item "none"
Perform no escaping.
.RE
.RS 4
.RE
.IP "\fBprint_section, p\fR" 4
.IX Item "print_section, p"
Print the section name at the begin of each line if the value is
\&\f(CW1\fR, disable it with value set to \f(CW0\fR. Default value is
\&\f(CW1\fR.
.Sh "flat"
.IX Subsection "flat"
Flat format.
.PP
A free-form output where each line contains an explicit key=value, such as
\&\*(L"streams.stream.3.tags.foo=bar\*(R". The output is shell escaped, so it can be
directly embedded in sh scripts as long as the separator character is an
alphanumeric character or an underscore (see \fIsep_char\fR option).
.PP
This writer accepts options as a list of \fIkey\fR=\fIvalue\fR pairs,
separated by \*(L":\*(R".
.PP
The description of the accepted options follows.
.IP "\fBsep_char, s\fR" 4
.IX Item "sep_char, s"
Separator character used to separate the chapter, the section name, IDs and
potential tags in the printed field key.
.Sp
Default value is '.'.
.IP "\fBhierarchical, h\fR" 4
.IX Item "hierarchical, h"
Specify if the section name specification should be hierarchical. If
set to 1, and if there is more than one section in the current
chapter, the section name will be prefixed by the name of the
chapter. A value of 0 will disable this behavior.
.Sp
Default value is 1.
.Sh "ini"
.IX Subsection "ini"
\&\s-1INI\s0 format output.
.PP
Print output in an \s-1INI\s0 based format.
.PP
The following conventions are adopted:
.IP "\(bu" 4
all key and values are \s-1UTF\-8\s0
.IP "\(bu" 4
\&'.' is the subgroup separator
.IP "\(bu" 4
newline, '\et', '\ef', '\eb' and the following characters are escaped
.IP "\(bu" 4
\&'\e' is the escape character
.IP "\(bu" 4
\&'#' is the comment indicator
.IP "\(bu" 4
\&'=' is the key/value separator
.IP "\(bu" 4
\&':' is not used but usually parsed as key/value separator
.PP
This writer accepts options as a list of \fIkey\fR=\fIvalue\fR pairs,
separated by \*(L":\*(R".
.PP
The description of the accepted options follows.
.IP "\fBhierarchical, h\fR" 4
.IX Item "hierarchical, h"
Specify if the section name specification should be hierarchical. If
set to 1, and if there is more than one section in the current
chapter, the section name will be prefixed by the name of the
chapter. A value of 0 will disable this behavior.
.Sp
Default value is 1.
.Sh "json"
.IX Subsection "json"
\&\s-1JSON\s0 based format.
.PP
Each section is printed using \s-1JSON\s0 notation.
.PP
This writer accepts options as a list of \fIkey\fR=\fIvalue\fR pairs,
separated by \*(L":\*(R".
.PP
The description of the accepted options follows.
.IP "\fBcompact, c\fR" 4
.IX Item "compact, c"
If set to 1 enable compact output, that is each section will be
printed on a single line. Default value is 0.
.PP
For more information about \s-1JSON\s0, see <\fBhttp://www.json.org/\fR>.
.Sh "xml"
.IX Subsection "xml"
\&\s-1XML\s0 based format.
.PP
The \s-1XML\s0 output is described in the \s-1XML\s0 schema description file
\&\fIffprobe.xsd\fR installed in the FFmpeg datadir.
.PP
An updated version of the schema can be retrieved at the url
<\fBhttp://www.ffmpeg.org/schema/ffprobe.xsd\fR>, which redirects to the
latest schema committed into the FFmpeg development source code tree.
.PP
Note that the output issued will be compliant to the
\&\fIffprobe.xsd\fR schema only when no special global output options
(\fBunit\fR, \fBprefix\fR, \fBbyte_binary_prefix\fR,
\&\fBsexagesimal\fR etc.) are specified.
.PP
This writer accepts options as a list of \fIkey\fR=\fIvalue\fR pairs,
separated by \*(L":\*(R".
.PP
The description of the accepted options follows.
.IP "\fBfully_qualified, q\fR" 4
.IX Item "fully_qualified, q"
If set to 1 specify if the output should be fully qualified. Default
value is 0.
This is required for generating an \s-1XML\s0 file which can be validated
through an \s-1XSD\s0 file.
.IP "\fBxsd_compliant, x\fR" 4
.IX Item "xsd_compliant, x"
If set to 1 perform more checks for ensuring that the output is \s-1XSD\s0
compliant. Default value is 0.
This option automatically sets \fBfully_qualified\fR to 1.
.PP
For more information about the \s-1XML\s0 format, see
<\fBhttp://www.w3.org/XML/\fR>.
.SH "TIMECODE"
.IX Header "TIMECODE"
\&\fBffprobe\fR supports Timecode extraction:
.IP "\(bu" 4
\&\s-1MPEG1/2\s0 timecode is extracted from the \s-1GOP\s0, and is available in the video
stream details (\fB\-show_streams\fR, see \fItimecode\fR).
.IP "\(bu" 4
\&\s-1MOV\s0 timecode is extracted from tmcd track, so is available in the tmcd
stream metadata (\fB\-show_streams\fR, see \fITAG:timecode\fR).
.IP "\(bu" 4
\&\s-1DV\s0, \s-1GXF\s0 and \s-1AVI\s0 timecodes are available in format metadata
(\fB\-show_format\fR, see \fITAG:timecode\fR).
.SH "SYNTAX"
.IX Header "SYNTAX"
When evaluating specific formats, FFmpeg uses internal library parsing
functions, shared by the tools. This section documents the syntax of
some of these formats.
.Sh "Date"
.IX Subsection "Date"
The accepted syntax is:
.PP
.Vb 2
\&        [(YYYY-MM-DD|YYYYMMDD)[T|t| ]]((HH:MM:SS[.m...]]])|(HHMMSS[.m...]]]))[Z]
\&        now
.Ve
.PP
If the value is \*(L"now\*(R" it takes the current time.
.PP
Time is local time unless Z is appended, in which case it is
interpreted as \s-1UTC\s0.
If the year-month-day part is not specified it takes the current
year\-month\-day.
.Sh "Time duration"
.IX Subsection "Time duration"
The accepted syntax is:
.PP
.Vb 2
\&        [-]HH:MM:SS[.m...]
\&        [-]S+[.m...]
.Ve
.PP
\&\fI\s-1HH\s0\fR expresses the number of hours, \fI\s-1MM\s0\fR the number a of minutes
and \fI\s-1SS\s0\fR the number of seconds.
.Sh "Video size"
.IX Subsection "Video size"
Specify the size of the sourced video, it may be a string of the form
\&\fIwidth\fRx\fIheight\fR, or the name of a size abbreviation.
.PP
The following abbreviations are recognized:
.IP "\fBsqcif\fR" 4
.IX Item "sqcif"
128x96
.IP "\fBqcif\fR" 4
.IX Item "qcif"
176x144
.IP "\fBcif\fR" 4
.IX Item "cif"
352x288
.IP "\fB4cif\fR" 4
.IX Item "4cif"
704x576
.IP "\fB16cif\fR" 4
.IX Item "16cif"
1408x1152
.IP "\fBqqvga\fR" 4
.IX Item "qqvga"
160x120
.IP "\fBqvga\fR" 4
.IX Item "qvga"
320x240
.IP "\fBvga\fR" 4
.IX Item "vga"
640x480
.IP "\fBsvga\fR" 4
.IX Item "svga"
800x600
.IP "\fBxga\fR" 4
.IX Item "xga"
1024x768
.IP "\fBuxga\fR" 4
.IX Item "uxga"
1600x1200
.IP "\fBqxga\fR" 4
.IX Item "qxga"
2048x1536
.IP "\fBsxga\fR" 4
.IX Item "sxga"
1280x1024
.IP "\fBqsxga\fR" 4
.IX Item "qsxga"
2560x2048
.IP "\fBhsxga\fR" 4
.IX Item "hsxga"
5120x4096
.IP "\fBwvga\fR" 4
.IX Item "wvga"
852x480
.IP "\fBwxga\fR" 4
.IX Item "wxga"
1366x768
.IP "\fBwsxga\fR" 4
.IX Item "wsxga"
1600x1024
.IP "\fBwuxga\fR" 4
.IX Item "wuxga"
1920x1200
.IP "\fBwoxga\fR" 4
.IX Item "woxga"
2560x1600
.IP "\fBwqsxga\fR" 4
.IX Item "wqsxga"
3200x2048
.IP "\fBwquxga\fR" 4
.IX Item "wquxga"
3840x2400
.IP "\fBwhsxga\fR" 4
.IX Item "whsxga"
6400x4096
.IP "\fBwhuxga\fR" 4
.IX Item "whuxga"
7680x4800
.IP "\fBcga\fR" 4
.IX Item "cga"
320x200
.IP "\fBega\fR" 4
.IX Item "ega"
640x350
.IP "\fBhd480\fR" 4
.IX Item "hd480"
852x480
.IP "\fBhd720\fR" 4
.IX Item "hd720"
1280x720
.IP "\fBhd1080\fR" 4
.IX Item "hd1080"
1920x1080
.Sh "Video rate"
.IX Subsection "Video rate"
Specify the frame rate of a video, expressed as the number of frames
generated per second. It has to be a string in the format
\&\fIframe_rate_num\fR/\fIframe_rate_den\fR, an integer number, a float
number or a valid video frame rate abbreviation.
.PP
The following abbreviations are recognized:
.IP "\fBntsc\fR" 4
.IX Item "ntsc"
30000/1001
.IP "\fBpal\fR" 4
.IX Item "pal"
25/1
.IP "\fBqntsc\fR" 4
.IX Item "qntsc"
30000/1
.IP "\fBqpal\fR" 4
.IX Item "qpal"
25/1
.IP "\fBsntsc\fR" 4
.IX Item "sntsc"
30000/1
.IP "\fBspal\fR" 4
.IX Item "spal"
25/1
.IP "\fBfilm\fR" 4
.IX Item "film"
24/1
.IP "\fBntsc-film\fR" 4
.IX Item "ntsc-film"
24000/1
.Sh "Ratio"
.IX Subsection "Ratio"
A ratio can be expressed as an expression, or in the form
\&\fInumerator\fR:\fIdenominator\fR.
.PP
Note that a ratio with infinite (1/0) or negative value is
considered valid, so you should check on the returned value if you
want to exclude those values.
.PP
The undefined value can be expressed using the \*(L"0:0\*(R" string.
.Sh "Color"
.IX Subsection "Color"
It can be the name of a color (case insensitive match) or a
[0x|#]RRGGBB[\s-1AA\s0] sequence, possibly followed by \*(L"@\*(R" and a string
representing the alpha component.
.PP
The alpha component may be a string composed by \*(L"0x\*(R" followed by an
hexadecimal number or a decimal number between 0.0 and 1.0, which
represents the opacity value (0x00/0.0 means completely transparent,
0xff/1.0 completely opaque).
If the alpha component is not specified then 0xff is assumed.
.PP
The string \*(L"random\*(R" will result in a random color.
.SH "DECODERS"
.IX Header "DECODERS"
Decoders are configured elements in FFmpeg which allow the decoding of
multimedia streams.
.PP
When you configure your FFmpeg build, all the supported native decoders
are enabled by default. Decoders requiring an external library must be enabled
manually via the corresponding \f(CW\*(C`\-\-enable\-lib\*(C'\fR option. You can list all
available decoders using the configure option \f(CW\*(C`\-\-list\-decoders\*(C'\fR.
.PP
You can disable all the decoders with the configure option
\&\f(CW\*(C`\-\-disable\-decoders\*(C'\fR and selectively enable / disable single decoders
with the options \f(CW\*(C`\-\-enable\-decoder=\f(CI\s-1DECODER\s0\f(CW\*(C'\fR /
\&\f(CW\*(C`\-\-disable\-decoder=\f(CI\s-1DECODER\s0\f(CW\*(C'\fR.
.PP
The option \f(CW\*(C`\-codecs\*(C'\fR of the ff* tools will display the list of
enabled decoders.
.SH "VIDEO DECODERS"
.IX Header "VIDEO DECODERS"
A description of some of the currently available video decoders
follows.
.Sh "rawvideo"
.IX Subsection "rawvideo"
Raw video decoder.
.PP
This decoder decodes rawvideo streams.
.PP
\fIOptions\fR
.IX Subsection "Options"
.IP "\fBtop\fR \fItop_field_first\fR" 4
.IX Item "top top_field_first"
Specify the assumed field type of the input video.
.RS 4
.IP "\fB\-1\fR" 4
.IX Item "-1"
the video is assumed to be progressive (default)
.IP "\fB0\fR" 4
.IX Item "0"
bottom-field-first is assumed
.IP "\fB1\fR" 4
.IX Item "1"
top-field-first is assumed
.RE
.RS 4
.RE
.SH "AUDIO DECODERS"
.IX Header "AUDIO DECODERS"
.Sh "ffwavesynth"
.IX Subsection "ffwavesynth"
Internal wave synthetizer.
.PP
This decoder generates wave patterns according to predefined sequences. Its
use is purely internal and the format of the data it accepts is not publicly
documented.
.SH "DEMUXERS"
.IX Header "DEMUXERS"
Demuxers are configured elements in FFmpeg which allow to read the
multimedia streams from a particular type of file.
.PP
When you configure your FFmpeg build, all the supported demuxers
are enabled by default. You can list all available ones using the
configure option \*(L"\-\-list\-demuxers\*(R".
.PP
You can disable all the demuxers using the configure option
\&\*(L"\-\-disable\-demuxers\*(R", and selectively enable a single demuxer with
the option "\-\-enable\-demuxer=\fI\s-1DEMUXER\s0\fR\*(L", or disable it
with the option \*(R"\-\-disable\-demuxer=\fI\s-1DEMUXER\s0\fR".
.PP
The option \*(L"\-formats\*(R" of the ff* tools will display the list of
enabled demuxers.
.PP
The description of some of the currently available demuxers follows.
.Sh "image2"
.IX Subsection "image2"
Image file demuxer.
.PP
This demuxer reads from a list of image files specified by a pattern.
The syntax and meaning of the pattern is specified by the
option \fIpattern_type\fR.
.PP
The pattern may contain a suffix which is used to automatically
determine the format of the images contained in the files.
.PP
The size, the pixel format, and the format of each image must be the
same for all the files in the sequence.
.PP
This demuxer accepts the following options:
.IP "\fBframerate\fR" 4
.IX Item "framerate"
Set the framerate for the video stream. It defaults to 25.
.IP "\fBloop\fR" 4
.IX Item "loop"
If set to 1, loop over the input. Default value is 0.
.IP "\fBpattern_type\fR" 4
.IX Item "pattern_type"
Select the pattern type used to interpret the provided filename.
.Sp
\&\fIpattern_type\fR accepts one of the following values.
.RS 4
.IP "\fBsequence\fR" 4
.IX Item "sequence"
Select a sequence pattern type, used to specify a sequence of files
indexed by sequential numbers.
.Sp
A sequence pattern may contain the string \*(L"%d\*(R" or "%0\fIN\fRd\*(L", which
specifies the position of the characters representing a sequential
number in each filename matched by the pattern. If the form
\&\*(R"%d0\fIN\fRd" is used, the string representing the number in each
filename is 0\-padded and \fIN\fR is the total number of 0\-padded
digits representing the number. The literal character '%' can be
specified in the pattern with the string \*(L"%%\*(R".
.Sp
If the sequence pattern contains \*(L"%d\*(R" or "%0\fIN\fRd", the first filename of
the file list specified by the pattern must contain a number
inclusively contained between \fIstart_number\fR and
\&\fIstart_number\fR+\fIstart_number_range\fR\-1, and all the following
numbers must be sequential.
.Sp
For example the pattern \*(L"img\-%03d.bmp\*(R" will match a sequence of
filenames of the form \fIimg\-001.bmp\fR, \fIimg\-002.bmp\fR, ...,
\&\fIimg\-010.bmp\fR, etc.; the pattern \*(L"i%%m%%g\-%d.jpg\*(R" will match a
sequence of filenames of the form \fIi%m%g\-1.jpg\fR,
\&\fIi%m%g\-2.jpg\fR, ..., \fIi%m%g\-10.jpg\fR, etc.
.Sp
Note that the pattern must not necessarily contain \*(L"%d\*(R" or
"%0\fIN\fRd", for example to convert a single image file
\&\fIimg.jpeg\fR you can employ the command:
.Sp
.Vb 1
\&        ffmpeg -i img.jpeg img.png
.Ve
.IP "\fBglob\fR" 4
.IX Item "glob"
Select a glob wildcard pattern type.
.Sp
The pattern is interpreted like a \f(CW\*(C`glob()\*(C'\fR pattern. This is only
selectable if libavformat was compiled with globbing support.
.IP "\fBglob_sequence\fR \fI(deprecated, will be removed)\fR" 4
.IX Item "glob_sequence (deprecated, will be removed)"
Select a mixed glob wildcard/sequence pattern.
.Sp
If your version of libavformat was compiled with globbing support, and
the provided pattern contains at least one glob meta character among
\&\f(CW\*(C`%*?[]{}\*(C'\fR that is preceded by an unescaped \*(L"%\*(R", the pattern is
interpreted like a \f(CW\*(C`glob()\*(C'\fR pattern, otherwise it is interpreted
like a sequence pattern.
.Sp
All glob special characters \f(CW\*(C`%*?[]{}\*(C'\fR must be prefixed
with \*(L"%\*(R". To escape a literal \*(L"%\*(R" you shall use \*(L"%%\*(R".
.Sp
For example the pattern \f(CW\*(C`foo\-%*.jpeg\*(C'\fR will match all the
filenames prefixed by \*(L"foo\-\*(R" and terminating with \*(L".jpeg\*(R", and
\&\f(CW\*(C`foo\-%?%?%?.jpeg\*(C'\fR will match all the filenames prefixed with
\&\*(L"foo\-\*(R", followed by a sequence of three characters, and terminating
with \*(L".jpeg\*(R".
.Sp
This pattern type is deprecated in favor of \fIglob\fR and
\&\fIsequence\fR.
.RE
.RS 4
.Sp
Default value is \fIglob_sequence\fR.
.RE
.IP "\fBpixel_format\fR" 4
.IX Item "pixel_format"
Set the pixel format of the images to read. If not specified the pixel
format is guessed from the first image file in the sequence.
.IP "\fBstart_number\fR" 4
.IX Item "start_number"
Set the index of the file matched by the image file pattern to start
to read from. Default value is 0.
.IP "\fBstart_number_range\fR" 4
.IX Item "start_number_range"
Set the index interval range to check when looking for the first image
file in the sequence, starting from \fIstart_number\fR. Default value
is 5.
.IP "\fBvideo_size\fR" 4
.IX Item "video_size"
Set the video size of the images to read. If not specified the video
size is guessed from the first image file in the sequence.
.PP
\fIExamples\fR
.IX Subsection "Examples"
.IP "\(bu" 4
Use \fBffmpeg\fR for creating a video from the images in the file
sequence \fIimg\-001.jpeg\fR, \fIimg\-002.jpeg\fR, ..., assuming an
input frame rate of 10 frames per second:
.Sp
.Vb 1
\&        ffmpeg -i 'img-%03d.jpeg' -r 10 out.mkv
.Ve
.IP "\(bu" 4
As above, but start by reading from a file with index 100 in the sequence:
.Sp
.Vb 1
\&        ffmpeg -start_number 100 -i 'img-%03d.jpeg' -r 10 out.mkv
.Ve
.IP "\(bu" 4
Read images matching the \*(L"*.png\*(R" glob pattern , that is all the files
terminating with the \*(L".png\*(R" suffix:
.Sp
.Vb 1
\&        ffmpeg -pattern_type glob -i "*.png" -r 10 out.mkv
.Ve
.Sh "applehttp"
.IX Subsection "applehttp"
Apple \s-1HTTP\s0 Live Streaming demuxer.
.PP
This demuxer presents all AVStreams from all variant streams.
The id field is set to the bitrate variant index number. By setting
the discard flags on AVStreams (by pressing 'a' or 'v' in ffplay),
the caller can decide which variant streams to actually receive.
The total bitrate of the variant that the stream belongs to is
available in a metadata key named \*(L"variant_bitrate\*(R".
.Sh "sbg"
.IX Subsection "sbg"
SBaGen script demuxer.
.PP
This demuxer reads the script language used by SBaGen
<\fBhttp://uazu.net/sbagen/\fR> to generate binaural beats sessions. A \s-1SBG\s0
script looks like that:
.PP
.Vb 9
\&        -SE
\&        a: 300-2.5/3 440+4.5/0
\&        b: 300-2.5/0 440+4.5/3
\&        off: -
\&        NOW      == a
\&        +0:07:00 == b
\&        +0:14:00 == a
\&        +0:21:00 == b
\&        +0:30:00    off
.Ve
.PP
A \s-1SBG\s0 script can mix absolute and relative timestamps. If the script uses
either only absolute timestamps (including the script start time) or only
relative ones, then its layout is fixed, and the conversion is
straightforward. On the other hand, if the script mixes both kind of
timestamps, then the \fI\s-1NOW\s0\fR reference for relative timestamps will be
taken from the current time of day at the time the script is read, and the
script layout will be frozen according to that reference. That means that if
the script is directly played, the actual times will match the absolute
timestamps up to the sound controller's clock accuracy, but if the user
somehow pauses the playback or seeks, all times will be shifted accordingly.
.SH "PROTOCOLS"
.IX Header "PROTOCOLS"
Protocols are configured elements in FFmpeg which allow to access
resources which require the use of a particular protocol.
.PP
When you configure your FFmpeg build, all the supported protocols are
enabled by default. You can list all available ones using the
configure option \*(L"\-\-list\-protocols\*(R".
.PP
You can disable all the protocols using the configure option
\&\*(L"\-\-disable\-protocols\*(R", and selectively enable a protocol using the
option "\-\-enable\-protocol=\fI\s-1PROTOCOL\s0\fR\*(L", or you can disable a
particular protocol using the option
\&\*(R"\-\-disable\-protocol=\fI\s-1PROTOCOL\s0\fR".
.PP
The option \*(L"\-protocols\*(R" of the ff* tools will display the list of
supported protocols.
.PP
A description of the currently available protocols follows.
.Sh "bluray"
.IX Subsection "bluray"
Read BluRay playlist.
.PP
The accepted options are:
.IP "\fBangle\fR" 4
.IX Item "angle"
BluRay angle
.IP "\fBchapter\fR" 4
.IX Item "chapter"
Start chapter (1...N)
.IP "\fBplaylist\fR" 4
.IX Item "playlist"
Playlist to read (\s-1BDMV/PLAYLIST/\s0?????.mpls)
.PP
Examples:
.PP
Read longest playlist from BluRay mounted to /mnt/bluray:
.PP
.Vb 1
\&        bluray:/mnt/bluray
.Ve
.PP
Read angle 2 of playlist 4 from BluRay mounted to /mnt/bluray, start from chapter 2:
.PP
.Vb 1
\&        -playlist 4 -angle 2 -chapter 2 bluray:/mnt/bluray
.Ve
.Sh "concat"
.IX Subsection "concat"
Physical concatenation protocol.
.PP
Allow to read and seek from many resource in sequence as if they were
a unique resource.
.PP
A \s-1URL\s0 accepted by this protocol has the syntax:
.PP
.Vb 1
\&        concat:<URL1>|<URL2>|...|<URLN>
.Ve
.PP
where \fI\s-1URL1\s0\fR, \fI\s-1URL2\s0\fR, ..., \fI\s-1URLN\s0\fR are the urls of the
resource to be concatenated, each one possibly specifying a distinct
protocol.
.PP
For example to read a sequence of files \fIsplit1.mpeg\fR,
\&\fIsplit2.mpeg\fR, \fIsplit3.mpeg\fR with \fBffplay\fR use the
command:
.PP
.Vb 1
\&        ffplay concat:split1.mpeg\e|split2.mpeg\e|split3.mpeg
.Ve
.PP
Note that you may need to escape the character \*(L"|\*(R" which is special for
many shells.
.Sh "file"
.IX Subsection "file"
File access protocol.
.PP
Allow to read from or read to a file.
.PP
For example to read from a file \fIinput.mpeg\fR with \fBffmpeg\fR
use the command:
.PP
.Vb 1
\&        ffmpeg -i file:input.mpeg output.mpeg
.Ve
.PP
The ff* tools default to the file protocol, that is a resource
specified with the name \*(L"\s-1FILE\s0.mpeg\*(R" is interpreted as the \s-1URL\s0
\&\*(L"file:FILE.mpeg\*(R".
.Sh "gopher"
.IX Subsection "gopher"
Gopher protocol.
.Sh "hls"
.IX Subsection "hls"
Read Apple \s-1HTTP\s0 Live Streaming compliant segmented stream as
a uniform one. The M3U8 playlists describing the segments can be
remote \s-1HTTP\s0 resources or local files, accessed using the standard
file protocol.
The nested protocol is declared by specifying
"+\fIproto\fR" after the hls \s-1URI\s0 scheme name, where \fIproto\fR
is either \*(L"file\*(R" or \*(L"http\*(R".
.PP
.Vb 2
\&        hls+http://host/path/to/remote/resource.m3u8
\&        hls+file://path/to/local/resource.m3u8
.Ve
.PP
Using this protocol is discouraged \- the hls demuxer should work
just as well (if not, please report the issues) and is more complete.
To use the hls demuxer instead, simply use the direct URLs to the
m3u8 files.
.Sh "http"
.IX Subsection "http"
\&\s-1HTTP\s0 (Hyper Text Transfer Protocol).
.Sh "mmst"
.IX Subsection "mmst"
\&\s-1MMS\s0 (Microsoft Media Server) protocol over \s-1TCP\s0.
.Sh "mmsh"
.IX Subsection "mmsh"
\&\s-1MMS\s0 (Microsoft Media Server) protocol over \s-1HTTP\s0.
.PP
The required syntax is:
.PP
.Vb 1
\&        mmsh://<server>[:<port>][/<app>][/<playpath>]
.Ve
.Sh "md5"
.IX Subsection "md5"
\&\s-1MD5\s0 output protocol.
.PP
Computes the \s-1MD5\s0 hash of the data to be written, and on close writes
this to the designated output or stdout if none is specified. It can
be used to test muxers without writing an actual file.
.PP
Some examples follow.
.PP
.Vb 2
\&        # Write the MD5 hash of the encoded AVI file to the file output.avi.md5.
\&        ffmpeg -i input.flv -f avi -y md5:output.avi.md5
.Ve
.PP
.Vb 2
\&        # Write the MD5 hash of the encoded AVI file to stdout.
\&        ffmpeg -i input.flv -f avi -y md5:
.Ve
.PP
Note that some formats (typically \s-1MOV\s0) require the output protocol to
be seekable, so they will fail with the \s-1MD5\s0 output protocol.
.Sh "pipe"
.IX Subsection "pipe"
\&\s-1UNIX\s0 pipe access protocol.
.PP
Allow to read and write from \s-1UNIX\s0 pipes.
.PP
The accepted syntax is:
.PP
.Vb 1
\&        pipe:[<number>]
.Ve
.PP
\&\fInumber\fR is the number corresponding to the file descriptor of the
pipe (e.g. 0 for stdin, 1 for stdout, 2 for stderr).  If \fInumber\fR
is not specified, by default the stdout file descriptor will be used
for writing, stdin for reading.
.PP
For example to read from stdin with \fBffmpeg\fR:
.PP
.Vb 3
\&        cat test.wav | ffmpeg -i pipe:0
\&        # ...this is the same as...
\&        cat test.wav | ffmpeg -i pipe:
.Ve
.PP
For writing to stdout with \fBffmpeg\fR:
.PP
.Vb 3
\&        ffmpeg -i test.wav -f avi pipe:1 | cat > test.avi
\&        # ...this is the same as...
\&        ffmpeg -i test.wav -f avi pipe: | cat > test.avi
.Ve
.PP
Note that some formats (typically \s-1MOV\s0), require the output protocol to
be seekable, so they will fail with the pipe output protocol.
.Sh "rtmp"
.IX Subsection "rtmp"
Real-Time Messaging Protocol.
.PP
The Real-Time Messaging Protocol (\s-1RTMP\s0) is used for streaming multimedia
content across a \s-1TCP/IP\s0 network.
.PP
The required syntax is:
.PP
.Vb 1
\&        rtmp://<server>[:<port>][/<app>][/<instance>][/<playpath>]
.Ve
.PP
The accepted parameters are:
.IP "\fBserver\fR" 4
.IX Item "server"
The address of the \s-1RTMP\s0 server.
.IP "\fBport\fR" 4
.IX Item "port"
The number of the \s-1TCP\s0 port to use (by default is 1935).
.IP "\fBapp\fR" 4
.IX Item "app"
It is the name of the application to access. It usually corresponds to
the path where the application is installed on the \s-1RTMP\s0 server
(e.g. \fI/ondemand/\fR, \fI/flash/live/\fR, etc.). You can override
the value parsed from the \s-1URI\s0 through the \f(CW\*(C`rtmp_app\*(C'\fR option, too.
.IP "\fBplaypath\fR" 4
.IX Item "playpath"
It is the path or name of the resource to play with reference to the
application specified in \fIapp\fR, may be prefixed by \*(L"mp4:\*(R". You
can override the value parsed from the \s-1URI\s0 through the \f(CW\*(C`rtmp_playpath\*(C'\fR
option, too.
.IP "\fBlisten\fR" 4
.IX Item "listen"
Act as a server, listening for an incoming connection.
.IP "\fBtimeout\fR" 4
.IX Item "timeout"
Maximum time to wait for the incoming connection. Implies listen.
.PP
Additionally, the following parameters can be set via command line options
(or in code via \f(CW\*(C`AVOption\*(C'\fRs):
.IP "\fBrtmp_app\fR" 4
.IX Item "rtmp_app"
Name of application to connect on the \s-1RTMP\s0 server. This option
overrides the parameter specified in the \s-1URI\s0.
.IP "\fBrtmp_buffer\fR" 4
.IX Item "rtmp_buffer"
Set the client buffer time in milliseconds. The default is 3000.
.IP "\fBrtmp_conn\fR" 4
.IX Item "rtmp_conn"
Extra arbitrary \s-1AMF\s0 connection parameters, parsed from a string,
e.g. like \f(CW\*(C`B:1 S:authMe O:1 NN:code:1.23 NS:flag:ok O:0\*(C'\fR.
Each value is prefixed by a single character denoting the type,
B for Boolean, N for number, S for string, O for object, or Z for null,
followed by a colon. For Booleans the data must be either 0 or 1 for
\&\s-1FALSE\s0 or \s-1TRUE\s0, respectively.  Likewise for Objects the data must be 0 or
1 to end or begin an object, respectively. Data items in subobjects may
be named, by prefixing the type with 'N' and specifying the name before
the value (i.e. \f(CW\*(C`NB:myFlag:1\*(C'\fR). This option may be used multiple
times to construct arbitrary \s-1AMF\s0 sequences.
.IP "\fBrtmp_flashver\fR" 4
.IX Item "rtmp_flashver"
Version of the Flash plugin used to run the \s-1SWF\s0 player. The default
is \s-1LNX\s0 9,0,124,2.
.IP "\fBrtmp_flush_interval\fR" 4
.IX Item "rtmp_flush_interval"
Number of packets flushed in the same request (\s-1RTMPT\s0 only). The default
is 10.
.IP "\fBrtmp_live\fR" 4
.IX Item "rtmp_live"
Specify that the media is a live stream. No resuming or seeking in
live streams is possible. The default value is \f(CW\*(C`any\*(C'\fR, which means the
subscriber first tries to play the live stream specified in the
playpath. If a live stream of that name is not found, it plays the
recorded stream. The other possible values are \f(CW\*(C`live\*(C'\fR and
\&\f(CW\*(C`recorded\*(C'\fR.
.IP "\fBrtmp_pageurl\fR" 4
.IX Item "rtmp_pageurl"
\&\s-1URL\s0 of the web page in which the media was embedded. By default no
value will be sent.
.IP "\fBrtmp_playpath\fR" 4
.IX Item "rtmp_playpath"
Stream identifier to play or to publish. This option overrides the
parameter specified in the \s-1URI\s0.
.IP "\fBrtmp_subscribe\fR" 4
.IX Item "rtmp_subscribe"
Name of live stream to subscribe to. By default no value will be sent.
It is only sent if the option is specified or if rtmp_live
is set to live.
.IP "\fBrtmp_swfhash\fR" 4
.IX Item "rtmp_swfhash"
\&\s-1SHA256\s0 hash of the decompressed \s-1SWF\s0 file (32 bytes).
.IP "\fBrtmp_swfsize\fR" 4
.IX Item "rtmp_swfsize"
Size of the decompressed \s-1SWF\s0 file, required for SWFVerification.
.IP "\fBrtmp_swfurl\fR" 4
.IX Item "rtmp_swfurl"
\&\s-1URL\s0 of the \s-1SWF\s0 player for the media. By default no value will be sent.
.IP "\fBrtmp_swfverify\fR" 4
.IX Item "rtmp_swfverify"
\&\s-1URL\s0 to player swf file, compute hash/size automatically.
.IP "\fBrtmp_tcurl\fR" 4
.IX Item "rtmp_tcurl"
\&\s-1URL\s0 of the target stream. Defaults to proto://host[:port]/app.
.PP
For example to read with \fBffplay\fR a multimedia resource named
\&\*(L"sample\*(R" from the application \*(L"vod\*(R" from an \s-1RTMP\s0 server \*(L"myserver\*(R":
.PP
.Vb 1
\&        ffplay rtmp://myserver/vod/sample
.Ve
.Sh "rtmpe"
.IX Subsection "rtmpe"
Encrypted Real-Time Messaging Protocol.
.PP
The Encrypted Real-Time Messaging Protocol (\s-1RTMPE\s0) is used for
streaming multimedia content within standard cryptographic primitives,
consisting of Diffie-Hellman key exchange and \s-1HMACSHA256\s0, generating
a pair of \s-1RC4\s0 keys.
.Sh "rtmps"
.IX Subsection "rtmps"
Real-Time Messaging Protocol over a secure \s-1SSL\s0 connection.
.PP
The Real-Time Messaging Protocol (\s-1RTMPS\s0) is used for streaming
multimedia content across an encrypted connection.
.Sh "rtmpt"
.IX Subsection "rtmpt"
Real-Time Messaging Protocol tunneled through \s-1HTTP\s0.
.PP
The Real-Time Messaging Protocol tunneled through \s-1HTTP\s0 (\s-1RTMPT\s0) is used
for streaming multimedia content within \s-1HTTP\s0 requests to traverse
firewalls.
.Sh "rtmpte"
.IX Subsection "rtmpte"
Encrypted Real-Time Messaging Protocol tunneled through \s-1HTTP\s0.
.PP
The Encrypted Real-Time Messaging Protocol tunneled through \s-1HTTP\s0 (\s-1RTMPTE\s0)
is used for streaming multimedia content within \s-1HTTP\s0 requests to traverse
firewalls.
.Sh "rtmpts"
.IX Subsection "rtmpts"
Real-Time Messaging Protocol tunneled through \s-1HTTPS\s0.
.PP
The Real-Time Messaging Protocol tunneled through \s-1HTTPS\s0 (\s-1RTMPTS\s0) is used
for streaming multimedia content within \s-1HTTPS\s0 requests to traverse
firewalls.
.Sh "rtmp, rtmpe, rtmps, rtmpt, rtmpte"
.IX Subsection "rtmp, rtmpe, rtmps, rtmpt, rtmpte"
Real-Time Messaging Protocol and its variants supported through
librtmp.
.PP
Requires the presence of the librtmp headers and library during
configuration. You need to explicitly configure the build with
\&\*(L"\-\-enable\-librtmp\*(R". If enabled this will replace the native \s-1RTMP\s0
protocol.
.PP
This protocol provides most client functions and a few server
functions needed to support \s-1RTMP\s0, \s-1RTMP\s0 tunneled in \s-1HTTP\s0 (\s-1RTMPT\s0),
encrypted \s-1RTMP\s0 (\s-1RTMPE\s0), \s-1RTMP\s0 over \s-1SSL/TLS\s0 (\s-1RTMPS\s0) and tunneled
variants of these encrypted types (\s-1RTMPTE\s0, \s-1RTMPTS\s0).
.PP
The required syntax is:
.PP
.Vb 1
\&        <rtmp_proto>://<server>[:<port>][/<app>][/<playpath>] <options>
.Ve
.PP
where \fIrtmp_proto\fR is one of the strings \*(L"rtmp\*(R", \*(L"rtmpt\*(R", \*(L"rtmpe\*(R",
\&\*(L"rtmps\*(R", \*(L"rtmpte\*(R", \*(L"rtmpts\*(R" corresponding to each \s-1RTMP\s0 variant, and
\&\fIserver\fR, \fIport\fR, \fIapp\fR and \fIplaypath\fR have the same
meaning as specified for the \s-1RTMP\s0 native protocol.
\&\fIoptions\fR contains a list of space-separated options of the form
\&\fIkey\fR=\fIval\fR.
.PP
See the librtmp manual page (man 3 librtmp) for more information.
.PP
For example, to stream a file in real-time to an \s-1RTMP\s0 server using
\&\fBffmpeg\fR:
.PP
.Vb 1
\&        ffmpeg -re -i myfile -f flv rtmp://myserver/live/mystream
.Ve
.PP
To play the same stream using \fBffplay\fR:
.PP
.Vb 1
\&        ffplay "rtmp://myserver/live/mystream live=1"
.Ve
.Sh "rtp"
.IX Subsection "rtp"
Real-Time Protocol.
.Sh "rtsp"
.IX Subsection "rtsp"
\&\s-1RTSP\s0 is not technically a protocol handler in libavformat, it is a demuxer
and muxer. The demuxer supports both normal \s-1RTSP\s0 (with data transferred
over \s-1RTP\s0; this is used by e.g. Apple and Microsoft) and Real-RTSP (with
data transferred over \s-1RDT\s0).
.PP
The muxer can be used to send a stream using \s-1RTSP\s0 \s-1ANNOUNCE\s0 to a server
supporting it (currently Darwin Streaming Server and Mischa Spiegelmock's
 \s-1RTSP\s0 server (\f(CW\*(C`http://github.com/revmischa/rtsp\-server\*(C'\fR)).
.PP
The required syntax for a \s-1RTSP\s0 url is:
.PP
.Vb 1
\&        rtsp://<hostname>[:<port>]/<path>
.Ve
.PP
The following options (set on the \fBffmpeg\fR/\fBffplay\fR command
line, or set in code via \f(CW\*(C`AVOption\*(C'\fRs or in \f(CW\*(C`avformat_open_input\*(C'\fR),
are supported:
.PP
Flags for \f(CW\*(C`rtsp_transport\*(C'\fR:
.IP "\fBudp\fR" 4
.IX Item "udp"
Use \s-1UDP\s0 as lower transport protocol.
.IP "\fBtcp\fR" 4
.IX Item "tcp"
Use \s-1TCP\s0 (interleaving within the \s-1RTSP\s0 control channel) as lower
transport protocol.
.IP "\fBudp_multicast\fR" 4
.IX Item "udp_multicast"
Use \s-1UDP\s0 multicast as lower transport protocol.
.IP "\fBhttp\fR" 4
.IX Item "http"
Use \s-1HTTP\s0 tunneling as lower transport protocol, which is useful for
passing proxies.
.PP
Multiple lower transport protocols may be specified, in that case they are
tried one at a time (if the setup of one fails, the next one is tried).
For the muxer, only the \f(CW\*(C`tcp\*(C'\fR and \f(CW\*(C`udp\*(C'\fR options are supported.
.PP
Flags for \f(CW\*(C`rtsp_flags\*(C'\fR:
.IP "\fBfilter_src\fR" 4
.IX Item "filter_src"
Accept packets only from negotiated peer address and port.
.IP "\fBlisten\fR" 4
.IX Item "listen"
Act as a server, listening for an incoming connection.
.PP
When receiving data over \s-1UDP\s0, the demuxer tries to reorder received packets
(since they may arrive out of order, or packets may get lost totally). This
can be disabled by setting the maximum demuxing delay to zero (via
the \f(CW\*(C`max_delay\*(C'\fR field of AVFormatContext).
.PP
When watching multi-bitrate Real-RTSP streams with \fBffplay\fR, the
streams to display can be chosen with \f(CW\*(C`\-vst\*(C'\fR \fIn\fR and
\&\f(CW\*(C`\-ast\*(C'\fR \fIn\fR for video and audio respectively, and can be switched
on the fly by pressing \f(CW\*(C`v\*(C'\fR and \f(CW\*(C`a\*(C'\fR.
.PP
Example command lines:
.PP
To watch a stream over \s-1UDP\s0, with a max reordering delay of 0.5 seconds:
.PP
.Vb 1
\&        ffplay -max_delay 500000 -rtsp_transport udp rtsp://server/video.mp4
.Ve
.PP
To watch a stream tunneled over \s-1HTTP:\s0
.PP
.Vb 1
\&        ffplay -rtsp_transport http rtsp://server/video.mp4
.Ve
.PP
To send a stream in realtime to a \s-1RTSP\s0 server, for others to watch:
.PP
.Vb 1
\&        ffmpeg -re -i <input> -f rtsp -muxdelay 0.1 rtsp://server/live.sdp
.Ve
.PP
To receive a stream in realtime:
.PP
.Vb 1
\&        ffmpeg -rtsp_flags listen -i rtsp://ownaddress/live.sdp <output>
.Ve
.Sh "sap"
.IX Subsection "sap"
Session Announcement Protocol (\s-1RFC\s0 2974). This is not technically a
protocol handler in libavformat, it is a muxer and demuxer.
It is used for signalling of \s-1RTP\s0 streams, by announcing the \s-1SDP\s0 for the
streams regularly on a separate port.
.PP
\fIMuxer\fR
.IX Subsection "Muxer"
.PP
The syntax for a \s-1SAP\s0 url given to the muxer is:
.PP
.Vb 1
\&        sap://<destination>[:<port>][?<options>]
.Ve
.PP
The \s-1RTP\s0 packets are sent to \fIdestination\fR on port \fIport\fR,
or to port 5004 if no port is specified.
\&\fIoptions\fR is a \f(CW\*(C`&\*(C'\fR\-separated list. The following options
are supported:
.IP "\fBannounce_addr=\fR\fIaddress\fR" 4
.IX Item "announce_addr=address"
Specify the destination \s-1IP\s0 address for sending the announcements to.
If omitted, the announcements are sent to the commonly used \s-1SAP\s0
announcement multicast address 224.2.127.254 (sap.mcast.net), or
ff0e::2:7ffe if \fIdestination\fR is an IPv6 address.
.IP "\fBannounce_port=\fR\fIport\fR" 4
.IX Item "announce_port=port"
Specify the port to send the announcements on, defaults to
9875 if not specified.
.IP "\fBttl=\fR\fIttl\fR" 4
.IX Item "ttl=ttl"
Specify the time to live value for the announcements and \s-1RTP\s0 packets,
defaults to 255.
.IP "\fBsame_port=\fR\fI0|1\fR" 4
.IX Item "same_port=0|1"
If set to 1, send all \s-1RTP\s0 streams on the same port pair. If zero (the
default), all streams are sent on unique ports, with each stream on a
port 2 numbers higher than the previous.
VLC/Live555 requires this to be set to 1, to be able to receive the stream.
The \s-1RTP\s0 stack in libavformat for receiving requires all streams to be sent
on unique ports.
.PP
Example command lines follow.
.PP
To broadcast a stream on the local subnet, for watching in \s-1VLC:\s0
.PP
.Vb 1
\&        ffmpeg -re -i <input> -f sap sap://224.0.0.255?same_port=1
.Ve
.PP
Similarly, for watching in \fBffplay\fR:
.PP
.Vb 1
\&        ffmpeg -re -i <input> -f sap sap://224.0.0.255
.Ve
.PP
And for watching in \fBffplay\fR, over IPv6:
.PP
.Vb 1
\&        ffmpeg -re -i <input> -f sap sap://[ff0e::1:2:3:4]
.Ve
.PP
\fIDemuxer\fR
.IX Subsection "Demuxer"
.PP
The syntax for a \s-1SAP\s0 url given to the demuxer is:
.PP
.Vb 1
\&        sap://[<address>][:<port>]
.Ve
.PP
\&\fIaddress\fR is the multicast address to listen for announcements on,
if omitted, the default 224.2.127.254 (sap.mcast.net) is used. \fIport\fR
is the port that is listened on, 9875 if omitted.
.PP
The demuxers listens for announcements on the given address and port.
Once an announcement is received, it tries to receive that particular stream.
.PP
Example command lines follow.
.PP
To play back the first stream announced on the normal \s-1SAP\s0 multicast address:
.PP
.Vb 1
\&        ffplay sap://
.Ve
.PP
To play back the first stream announced on one the default IPv6 \s-1SAP\s0 multicast address:
.PP
.Vb 1
\&        ffplay sap://[ff0e::2:7ffe]
.Ve
.Sh "tcp"
.IX Subsection "tcp"
Trasmission Control Protocol.
.PP
The required syntax for a \s-1TCP\s0 url is:
.PP
.Vb 1
\&        tcp://<hostname>:<port>[?<options>]
.Ve
.IP "\fBlisten\fR" 4
.IX Item "listen"
Listen for an incoming connection
.IP "\fBtimeout=\fR\fImicroseconds\fR" 4
.IX Item "timeout=microseconds"
In read mode: if no data arrived in more than this time interval, raise error.
In write mode: if socket cannot be written in more than this time interval, raise error.
This also sets timeout on \s-1TCP\s0 connection establishing.
.Sp
.Vb 2
\&        ffmpeg -i <input> -f <format> tcp://<hostname>:<port>?listen
\&        ffplay tcp://<hostname>:<port>
.Ve
.Sh "tls"
.IX Subsection "tls"
Transport Layer Security/Secure Sockets Layer
.PP
The required syntax for a \s-1TLS/SSL\s0 url is:
.PP
.Vb 1
\&        tls://<hostname>:<port>[?<options>]
.Ve
.IP "\fBlisten\fR" 4
.IX Item "listen"
Act as a server, listening for an incoming connection.
.IP "\fBcafile=\fR\fIfilename\fR" 4
.IX Item "cafile=filename"
Certificate authority file. The file must be in OpenSSL \s-1PEM\s0 format.
.IP "\fBcert=\fR\fIfilename\fR" 4
.IX Item "cert=filename"
Certificate file. The file must be in OpenSSL \s-1PEM\s0 format.
.IP "\fBkey=\fR\fIfilename\fR" 4
.IX Item "key=filename"
Private key file.
.IP "\fBverify=\fR\fI0|1\fR" 4
.IX Item "verify=0|1"
Verify the peer's certificate.
.PP
Example command lines:
.PP
To create a \s-1TLS/SSL\s0 server that serves an input stream.
.PP
.Vb 1
\&        ffmpeg -i <input> -f <format> tls://<hostname>:<port>?listen&cert=<server.crt>&key=<server.key>
.Ve
.PP
To play back a stream from the \s-1TLS/SSL\s0 server using \fBffplay\fR:
.PP
.Vb 1
\&        ffplay tls://<hostname>:<port>
.Ve
.Sh "udp"
.IX Subsection "udp"
User Datagram Protocol.
.PP
The required syntax for a \s-1UDP\s0 url is:
.PP
.Vb 1
\&        udp://<hostname>:<port>[?<options>]
.Ve
.PP
\&\fIoptions\fR contains a list of &\-separated options of the form \fIkey\fR=\fIval\fR.
.PP
In case threading is enabled on the system, a circular buffer is used
to store the incoming data, which allows to reduce loss of data due to
\&\s-1UDP\s0 socket buffer overruns. The \fIfifo_size\fR and
\&\fIoverrun_nonfatal\fR options are related to this buffer.
.PP
The list of supported options follows.
.IP "\fBbuffer_size=\fR\fIsize\fR" 4
.IX Item "buffer_size=size"
Set the \s-1UDP\s0 socket buffer size in bytes. This is used both for the
receiving and the sending buffer size.
.IP "\fBlocalport=\fR\fIport\fR" 4
.IX Item "localport=port"
Override the local \s-1UDP\s0 port to bind with.
.IP "\fBlocaladdr=\fR\fIaddr\fR" 4
.IX Item "localaddr=addr"
Choose the local \s-1IP\s0 address. This is useful e.g. if sending multicast
and the host has multiple interfaces, where the user can choose
which interface to send on by specifying the \s-1IP\s0 address of that interface.
.IP "\fBpkt_size=\fR\fIsize\fR" 4
.IX Item "pkt_size=size"
Set the size in bytes of \s-1UDP\s0 packets.
.IP "\fBreuse=\fR\fI1|0\fR" 4
.IX Item "reuse=1|0"
Explicitly allow or disallow reusing \s-1UDP\s0 sockets.
.IP "\fBttl=\fR\fIttl\fR" 4
.IX Item "ttl=ttl"
Set the time to live value (for multicast only).
.IP "\fBconnect=\fR\fI1|0\fR" 4
.IX Item "connect=1|0"
Initialize the \s-1UDP\s0 socket with \f(CW\*(C`connect()\*(C'\fR. In this case, the
destination address can't be changed with ff_udp_set_remote_url later.
If the destination address isn't known at the start, this option can
be specified in ff_udp_set_remote_url, too.
This allows finding out the source address for the packets with getsockname,
and makes writes return with \s-1AVERROR\s0(\s-1ECONNREFUSED\s0) if \*(L"destination
unreachable\*(R" is received.
For receiving, this gives the benefit of only receiving packets from
the specified peer address/port.
.IP "\fBsources=\fR\fIaddress\fR\fB[,\fR\fIaddress\fR\fB]\fR" 4
.IX Item "sources=address[,address]"
Only receive packets sent to the multicast group from one of the
specified sender \s-1IP\s0 addresses.
.IP "\fBblock=\fR\fIaddress\fR\fB[,\fR\fIaddress\fR\fB]\fR" 4
.IX Item "block=address[,address]"
Ignore packets sent to the multicast group from the specified
sender \s-1IP\s0 addresses.
.IP "\fBfifo_size=\fR\fIunits\fR" 4
.IX Item "fifo_size=units"
Set the \s-1UDP\s0 receiving circular buffer size, expressed as a number of
packets with size of 188 bytes. If not specified defaults to 7*4096.
.IP "\fBoverrun_nonfatal=\fR\fI1|0\fR" 4
.IX Item "overrun_nonfatal=1|0"
Survive in case of \s-1UDP\s0 receiving circular buffer overrun. Default
value is 0.
.IP "\fBtimeout=\fR\fImicroseconds\fR" 4
.IX Item "timeout=microseconds"
In read mode: if no data arrived in more than this time interval, raise error.
.PP
Some usage examples of the \s-1UDP\s0 protocol with \fBffmpeg\fR follow.
.PP
To stream over \s-1UDP\s0 to a remote endpoint:
.PP
.Vb 1
\&        ffmpeg -i <input> -f <format> udp://<hostname>:<port>
.Ve
.PP
To stream in mpegts format over \s-1UDP\s0 using 188 sized \s-1UDP\s0 packets, using a large input buffer:
.PP
.Vb 1
\&        ffmpeg -i <input> -f mpegts udp://<hostname>:<port>?pkt_size=188&buffer_size=65535
.Ve
.PP
To receive over \s-1UDP\s0 from a remote endpoint:
.PP
.Vb 1
\&        ffmpeg -i udp://[<multicast-address>]:<port>
.Ve
.SH "INPUT DEVICES"
.IX Header "INPUT DEVICES"
Input devices are configured elements in FFmpeg which allow to access
the data coming from a multimedia device attached to your system.
.PP
When you configure your FFmpeg build, all the supported input devices
are enabled by default. You can list all available ones using the
configure option \*(L"\-\-list\-indevs\*(R".
.PP
You can disable all the input devices using the configure option
\&\*(L"\-\-disable\-indevs\*(R", and selectively enable an input device using the
option "\-\-enable\-indev=\fI\s-1INDEV\s0\fR\*(L", or you can disable a particular
input device using the option \*(R"\-\-disable\-indev=\fI\s-1INDEV\s0\fR".
.PP
The option \*(L"\-formats\*(R" of the ff* tools will display the list of
supported input devices (amongst the demuxers).
.PP
A description of the currently available input devices follows.
.Sh "alsa"
.IX Subsection "alsa"
\&\s-1ALSA\s0 (Advanced Linux Sound Architecture) input device.
.PP
To enable this input device during configuration you need libasound
installed on your system.
.PP
This device allows capturing from an \s-1ALSA\s0 device. The name of the
device to capture has to be an \s-1ALSA\s0 card identifier.
.PP
An \s-1ALSA\s0 identifier has the syntax:
.PP
.Vb 1
\&        hw:<CARD>[,<DEV>[,<SUBDEV>]]
.Ve
.PP
where the \fI\s-1DEV\s0\fR and \fI\s-1SUBDEV\s0\fR components are optional.
.PP
The three arguments (in order: \fI\s-1CARD\s0\fR,\fI\s-1DEV\s0\fR,\fI\s-1SUBDEV\s0\fR)
specify card number or identifier, device number and subdevice number
(\-1 means any).
.PP
To see the list of cards currently recognized by your system check the
files \fI/proc/asound/cards\fR and \fI/proc/asound/devices\fR.
.PP
For example to capture with \fBffmpeg\fR from an \s-1ALSA\s0 device with
card id 0, you may run the command:
.PP
.Vb 1
\&        ffmpeg -f alsa -i hw:0 alsaout.wav
.Ve
.PP
For more information see:
<\fBhttp://www.alsa\-project.org/alsa\-doc/alsa\-lib/pcm.html\fR>
.Sh "bktr"
.IX Subsection "bktr"
\&\s-1BSD\s0 video input device.
.Sh "dshow"
.IX Subsection "dshow"
Windows DirectShow input device.
.PP
DirectShow support is enabled when FFmpeg is built with the mingw\-w64 project.
Currently only audio and video devices are supported.
.PP
Multiple devices may be opened as separate inputs, but they may also be
opened on the same input, which should improve synchronism between them.
.PP
The input name should be in the format:
.PP
.Vb 1
\&        <TYPE>=<NAME>[:<TYPE>=<NAME>]
.Ve
.PP
where \fI\s-1TYPE\s0\fR can be either \fIaudio\fR or \fIvideo\fR,
and \fI\s-1NAME\s0\fR is the device's name.
.PP
\fIOptions\fR
.IX Subsection "Options"
.PP
If no options are specified, the device's defaults are used.
If the device does not support the requested options, it will
fail to open.
.IP "\fBvideo_size\fR" 4
.IX Item "video_size"
Set the video size in the captured video.
.IP "\fBframerate\fR" 4
.IX Item "framerate"
Set the framerate in the captured video.
.IP "\fBsample_rate\fR" 4
.IX Item "sample_rate"
Set the sample rate (in Hz) of the captured audio.
.IP "\fBsample_size\fR" 4
.IX Item "sample_size"
Set the sample size (in bits) of the captured audio.
.IP "\fBchannels\fR" 4
.IX Item "channels"
Set the number of channels in the captured audio.
.IP "\fBlist_devices\fR" 4
.IX Item "list_devices"
If set to \fBtrue\fR, print a list of devices and exit.
.IP "\fBlist_options\fR" 4
.IX Item "list_options"
If set to \fBtrue\fR, print a list of selected device's options
and exit.
.IP "\fBvideo_device_number\fR" 4
.IX Item "video_device_number"
Set video device number for devices with same name (starts at 0,
defaults to 0).
.IP "\fBaudio_device_number\fR" 4
.IX Item "audio_device_number"
Set audio device number for devices with same name (starts at 0,
defaults to 0).
.IP "\fBpixel_format\fR" 4
.IX Item "pixel_format"
Select pixel format to be used by DirectShow. This may only be set when
the video codec is not set or set to rawvideo.
.IP "\fBaudio_buffer_size\fR" 4
.IX Item "audio_buffer_size"
Set audio device buffer size in milliseconds (which can directly
impact latency, depending on the device).
Defaults to using the audio device's
default buffer size (typically some multiple of 500ms).
Setting this value too low can degrade performance.
See also
<\fBhttp://msdn.microsoft.com/en\-us/library/windows/desktop/dd377582(v=vs.85).aspx\fR>
.PP
\fIExamples\fR
.IX Subsection "Examples"
.IP "\(bu" 4
Print the list of DirectShow supported devices and exit:
.Sp
.Vb 1
\&        $ ffmpeg -list_devices true -f dshow -i dummy
.Ve
.IP "\(bu" 4
Open video device \fICamera\fR:
.Sp
.Vb 1
\&        $ ffmpeg -f dshow -i video="Camera"
.Ve
.IP "\(bu" 4
Open second video device with name \fICamera\fR:
.Sp
.Vb 1
\&        $ ffmpeg -f dshow -video_device_number 1 -i video="Camera"
.Ve
.IP "\(bu" 4
Open video device \fICamera\fR and audio device \fIMicrophone\fR:
.Sp
.Vb 1
\&        $ ffmpeg -f dshow -i video="Camera":audio="Microphone"
.Ve
.IP "\(bu" 4
Print the list of supported options in selected device and exit:
.Sp
.Vb 1
\&        $ ffmpeg -list_options true -f dshow -i video="Camera"
.Ve
.Sh "dv1394"
.IX Subsection "dv1394"
Linux \s-1DV\s0 1394 input device.
.Sh "fbdev"
.IX Subsection "fbdev"
Linux framebuffer input device.
.PP
The Linux framebuffer is a graphic hardware-independent abstraction
layer to show graphics on a computer monitor, typically on the
console. It is accessed through a file device node, usually
\&\fI/dev/fb0\fR.
.PP
For more detailed information read the file
Documentation/fb/framebuffer.txt included in the Linux source tree.
.PP
To record from the framebuffer device \fI/dev/fb0\fR with
\&\fBffmpeg\fR:
.PP
.Vb 1
\&        ffmpeg -f fbdev -r 10 -i /dev/fb0 out.avi
.Ve
.PP
You can take a single screenshot image with the command:
.PP
.Vb 1
\&        ffmpeg -f fbdev -frames:v 1 -r 1 -i /dev/fb0 screenshot.jpeg
.Ve
.PP
See also <\fBhttp://linux\-fbdev.sourceforge.net/\fR>, and \fIfbset\fR\|(1).
.Sh "iec61883"
.IX Subsection "iec61883"
FireWire \s-1DV/HDV\s0 input device using libiec61883.
.PP
To enable this input device, you need libiec61883, libraw1394 and
libavc1394 installed on your system. Use the configure option
\&\f(CW\*(C`\-\-enable\-libiec61883\*(C'\fR to compile with the device enabled.
.PP
The iec61883 capture device supports capturing from a video device
connected via \s-1IEEE1394\s0 (FireWire), using libiec61883 and the new Linux
FireWire stack (juju). This is the default \s-1DV/HDV\s0 input method in Linux
Kernel 2.6.37 and later, since the old FireWire stack was removed.
.PP
Specify the FireWire port to be used as input file, or \*(L"auto\*(R"
to choose the first port connected.
.PP
\fIOptions\fR
.IX Subsection "Options"
.IP "\fBdvtype\fR" 4
.IX Item "dvtype"
Override autodetection of \s-1DV/HDV\s0. This should only be used if auto
detection does not work, or if usage of a different device type
should be prohibited. Treating a \s-1DV\s0 device as \s-1HDV\s0 (or vice versa) will
not work and result in undefined behavior.
The values \fBauto\fR, \fBdv\fR and \fBhdv\fR are supported.
.IP "\fBdvbuffer\fR" 4
.IX Item "dvbuffer"
Set maxiumum size of buffer for incoming data, in frames. For \s-1DV\s0, this
is an exact value. For \s-1HDV\s0, it is not frame exact, since \s-1HDV\s0 does
not have a fixed frame size.
.PP
\fIExamples\fR
.IX Subsection "Examples"
.IP "\(bu" 4
Grab and show the input of a FireWire \s-1DV/HDV\s0 device.
.Sp
.Vb 1
\&        ffplay -f iec61883 -i auto
.Ve
.IP "\(bu" 4
Grab and record the input of a FireWire \s-1DV/HDV\s0 device,
using a packet buffer of 100000 packets if the source is \s-1HDV\s0.
.Sp
.Vb 1
\&        ffmpeg -f iec61883 -i auto -hdvbuffer 100000 out.mpg
.Ve
.Sh "jack"
.IX Subsection "jack"
\&\s-1JACK\s0 input device.
.PP
To enable this input device during configuration you need libjack
installed on your system.
.PP
A \s-1JACK\s0 input device creates one or more \s-1JACK\s0 writable clients, one for
each audio channel, with name \fIclient_name\fR:input_\fIN\fR, where
\&\fIclient_name\fR is the name provided by the application, and \fIN\fR
is a number which identifies the channel.
Each writable client will send the acquired data to the FFmpeg input
device.
.PP
Once you have created one or more \s-1JACK\s0 readable clients, you need to
connect them to one or more \s-1JACK\s0 writable clients.
.PP
To connect or disconnect \s-1JACK\s0 clients you can use the \fBjack_connect\fR
and \fBjack_disconnect\fR programs, or do it through a graphical interface,
for example with \fBqjackctl\fR.
.PP
To list the \s-1JACK\s0 clients and their properties you can invoke the command
\&\fBjack_lsp\fR.
.PP
Follows an example which shows how to capture a \s-1JACK\s0 readable client
with \fBffmpeg\fR.
.PP
.Vb 2
\&        # Create a JACK writable client with name "ffmpeg".
\&        $ ffmpeg -f jack -i ffmpeg -y out.wav
.Ve
.PP
.Vb 2
\&        # Start the sample jack_metro readable client.
\&        $ jack_metro -b 120 -d 0.2 -f 4000
.Ve
.PP
.Vb 8
\&        # List the current JACK clients.
\&        $ jack_lsp -c
\&        system:capture_1
\&        system:capture_2
\&        system:playback_1
\&        system:playback_2
\&        ffmpeg:input_1
\&        metro:120_bpm
.Ve
.PP
.Vb 2
\&        # Connect metro to the ffmpeg writable client.
\&        $ jack_connect metro:120_bpm ffmpeg:input_1
.Ve
.PP
For more information read:
<\fBhttp://jackaudio.org/\fR>
.Sh "lavfi"
.IX Subsection "lavfi"
Libavfilter input virtual device.
.PP
This input device reads data from the open output pads of a libavfilter
filtergraph.
.PP
For each filtergraph open output, the input device will create a
corresponding stream which is mapped to the generated output. Currently
only video data is supported. The filtergraph is specified through the
option \fBgraph\fR.
.PP
\fIOptions\fR
.IX Subsection "Options"
.IP "\fBgraph\fR" 4
.IX Item "graph"
Specify the filtergraph to use as input. Each video open output must be
labelled by a unique string of the form "out\fIN\fR", where \fIN\fR is a
number starting from 0 corresponding to the mapped input stream
generated by the device.
The first unlabelled output is automatically assigned to the \*(L"out0\*(R"
label, but all the others need to be specified explicitly.
.Sp
If not specified defaults to the filename specified for the input
device.
.PP
\fIExamples\fR
.IX Subsection "Examples"
.IP "\(bu" 4
Create a color video stream and play it back with \fBffplay\fR:
.Sp
.Vb 1
\&        ffplay -f lavfi -graph "color=pink [out0]" dummy
.Ve
.IP "\(bu" 4
As the previous example, but use filename for specifying the graph
description, and omit the \*(L"out0\*(R" label:
.Sp
.Vb 1
\&        ffplay -f lavfi color=pink
.Ve
.IP "\(bu" 4
Create three different video test filtered sources and play them:
.Sp
.Vb 1
\&        ffplay -f lavfi -graph "testsrc [out0]; testsrc,hflip [out1]; testsrc,negate [out2]" test3
.Ve
.IP "\(bu" 4
Read an audio stream from a file using the amovie source and play it
back with \fBffplay\fR:
.Sp
.Vb 1
\&        ffplay -f lavfi "amovie=test.wav"
.Ve
.IP "\(bu" 4
Read an audio stream and a video stream and play it back with
\&\fBffplay\fR:
.Sp
.Vb 1
\&        ffplay -f lavfi "movie=test.avi[out0];amovie=test.wav[out1]"
.Ve
.Sh "libdc1394"
.IX Subsection "libdc1394"
\&\s-1IIDC1394\s0 input device, based on libdc1394 and libraw1394.
.Sh "openal"
.IX Subsection "openal"
The OpenAL input device provides audio capture on all systems with a
working OpenAL 1.1 implementation.
.PP
To enable this input device during configuration, you need OpenAL
headers and libraries installed on your system, and need to configure
FFmpeg with \f(CW\*(C`\-\-enable\-openal\*(C'\fR.
.PP
OpenAL headers and libraries should be provided as part of your OpenAL
implementation, or as an additional download (an \s-1SDK\s0). Depending on your
installation you may need to specify additional flags via the
\&\f(CW\*(C`\-\-extra\-cflags\*(C'\fR and \f(CW\*(C`\-\-extra\-ldflags\*(C'\fR for allowing the build
system to locate the OpenAL headers and libraries.
.PP
An incomplete list of OpenAL implementations follows:
.IP "\fBCreative\fR" 4
.IX Item "Creative"
The official Windows implementation, providing hardware acceleration
with supported devices and software fallback.
See <\fBhttp://openal.org/\fR>.
.IP "\fBOpenAL Soft\fR" 4
.IX Item "OpenAL Soft"
Portable, open source (\s-1LGPL\s0) software implementation. Includes
backends for the most common sound APIs on the Windows, Linux,
Solaris, and \s-1BSD\s0 operating systems.
See <\fBhttp://kcat.strangesoft.net/openal.html\fR>.
.IP "\fBApple\fR" 4
.IX Item "Apple"
OpenAL is part of Core Audio, the official Mac \s-1OS\s0 X Audio interface.
See <\fBhttp://developer.apple.com/technologies/mac/audio\-and\-video.html\fR>
.PP
This device allows to capture from an audio input device handled
through OpenAL.
.PP
You need to specify the name of the device to capture in the provided
filename. If the empty string is provided, the device will
automatically select the default device. You can get the list of the
supported devices by using the option \fIlist_devices\fR.
.PP
\fIOptions\fR
.IX Subsection "Options"
.IP "\fBchannels\fR" 4
.IX Item "channels"
Set the number of channels in the captured audio. Only the values
\&\fB1\fR (monaural) and \fB2\fR (stereo) are currently supported.
Defaults to \fB2\fR.
.IP "\fBsample_size\fR" 4
.IX Item "sample_size"
Set the sample size (in bits) of the captured audio. Only the values
\&\fB8\fR and \fB16\fR are currently supported. Defaults to
\&\fB16\fR.
.IP "\fBsample_rate\fR" 4
.IX Item "sample_rate"
Set the sample rate (in Hz) of the captured audio.
Defaults to \fB44.1k\fR.
.IP "\fBlist_devices\fR" 4
.IX Item "list_devices"
If set to \fBtrue\fR, print a list of devices and exit.
Defaults to \fBfalse\fR.
.PP
\fIExamples\fR
.IX Subsection "Examples"
.PP
Print the list of OpenAL supported devices and exit:
.PP
.Vb 1
\&        $ ffmpeg -list_devices true -f openal -i dummy out.ogg
.Ve
.PP
Capture from the OpenAL device \fI\s-1DR\-BT101\s0 via PulseAudio\fR:
.PP
.Vb 1
\&        $ ffmpeg -f openal -i 'DR-BT101 via PulseAudio' out.ogg
.Ve
.PP
Capture from the default device (note the empty string '' as filename):
.PP
.Vb 1
\&        $ ffmpeg -f openal -i '' out.ogg
.Ve
.PP
Capture from two devices simultaneously, writing to two different files,
within the same \fBffmpeg\fR command:
.PP
.Vb 1
\&        $ ffmpeg -f openal -i 'DR-BT101 via PulseAudio' out1.ogg -f openal -i 'ALSA Default' out2.ogg
.Ve
.PP
Note: not all OpenAL implementations support multiple simultaneous capture \-
try the latest OpenAL Soft if the above does not work.
.Sh "oss"
.IX Subsection "oss"
Open Sound System input device.
.PP
The filename to provide to the input device is the device node
representing the \s-1OSS\s0 input device, and is usually set to
\&\fI/dev/dsp\fR.
.PP
For example to grab from \fI/dev/dsp\fR using \fBffmpeg\fR use the
command:
.PP
.Vb 1
\&        ffmpeg -f oss -i /dev/dsp /tmp/oss.wav
.Ve
.PP
For more information about \s-1OSS\s0 see:
<\fBhttp://manuals.opensound.com/usersguide/dsp.html\fR>
.Sh "pulse"
.IX Subsection "pulse"
pulseaudio input device.
.PP
To enable this input device during configuration you need libpulse-simple
installed in your system.
.PP
The filename to provide to the input device is a source device or the
string \*(L"default\*(R"
.PP
To list the pulse source devices and their properties you can invoke
the command \fBpactl list sources\fR.
.PP
.Vb 1
\&        ffmpeg -f pulse -i default /tmp/pulse.wav
.Ve
.PP
\fI\fIserver\fI AVOption\fR
.IX Subsection "server AVOption"
.PP
The syntax is:
.PP
.Vb 1
\&        -server <server name>
.Ve
.PP
Connects to a specific server.
.PP
\fI\fIname\fI AVOption\fR
.IX Subsection "name AVOption"
.PP
The syntax is:
.PP
.Vb 1
\&        -name <application name>
.Ve
.PP
Specify the application name pulse will use when showing active clients,
by default it is the \s-1LIBAVFORMAT_IDENT\s0 string
.PP
\fI\fIstream_name\fI AVOption\fR
.IX Subsection "stream_name AVOption"
.PP
The syntax is:
.PP
.Vb 1
\&        -stream_name <stream name>
.Ve
.PP
Specify the stream name pulse will use when showing active streams,
by default it is \*(L"record\*(R"
.PP
\fI\fIsample_rate\fI AVOption\fR
.IX Subsection "sample_rate AVOption"
.PP
The syntax is:
.PP
.Vb 1
\&        -sample_rate <samplerate>
.Ve
.PP
Specify the samplerate in Hz, by default 48kHz is used.
.PP
\fI\fIchannels\fI AVOption\fR
.IX Subsection "channels AVOption"
.PP
The syntax is:
.PP
.Vb 1
\&        -channels <N>
.Ve
.PP
Specify the channels in use, by default 2 (stereo) is set.
.PP
\fI\fIframe_size\fI AVOption\fR
.IX Subsection "frame_size AVOption"
.PP
The syntax is:
.PP
.Vb 1
\&        -frame_size <bytes>
.Ve
.PP
Specify the number of byte per frame, by default it is set to 1024.
.PP
\fI\fIfragment_size\fI AVOption\fR
.IX Subsection "fragment_size AVOption"
.PP
The syntax is:
.PP
.Vb 1
\&        -fragment_size <bytes>
.Ve
.PP
Specify the minimal buffering fragment in pulseaudio, it will affect the
audio latency. By default it is unset.
.Sh "sndio"
.IX Subsection "sndio"
sndio input device.
.PP
To enable this input device during configuration you need libsndio
installed on your system.
.PP
The filename to provide to the input device is the device node
representing the sndio input device, and is usually set to
\&\fI/dev/audio0\fR.
.PP
For example to grab from \fI/dev/audio0\fR using \fBffmpeg\fR use the
command:
.PP
.Vb 1
\&        ffmpeg -f sndio -i /dev/audio0 /tmp/oss.wav
.Ve
.Sh "video4linux2"
.IX Subsection "video4linux2"
Video4Linux2 input video device.
.PP
The name of the device to grab is a file device node, usually Linux
systems tend to automatically create such nodes when the device
(e.g. an \s-1USB\s0 webcam) is plugged into the system, and has a name of the
kind \fI/dev/video\fIN\fI\fR, where \fIN\fR is a number associated to
the device.
.PP
Video4Linux2 devices usually support a limited set of
\&\fIwidth\fRx\fIheight\fR sizes and framerates. You can check which are
supported using \fB\-list_formats all\fR for Video4Linux2 devices.
.PP
Some usage examples of the video4linux2 devices with ffmpeg and ffplay:
.PP
The time base for the timestamps is 1 microsecond. Depending on the kernel
version and configuration, the timestamps may be derived from the real time
clock (origin at the Unix Epoch) or the monotonic clock (origin usually at
boot time, unaffected by \s-1NTP\s0 or manual changes to the clock). The
\&\fB\-timestamps abs\fR or \fB\-ts abs\fR option can be used to force
conversion into the real time clock.
.PP
Note that if FFmpeg is build with v4l\-utils support (\*(L"\-\-enable\-libv4l2\*(R"
option), it will always be used.
.PP
.Vb 2
\&        # Grab and show the input of a video4linux2 device.
\&        ffplay -f video4linux2 -framerate 30 -video_size hd720 /dev/video0
.Ve
.PP
.Vb 3
\&        # Grab and record the input of a video4linux2 device, leave the
\&        framerate and size as previously set.
\&        ffmpeg -f video4linux2 -input_format mjpeg -i /dev/video0 out.mpeg
.Ve
.PP
\&\*(L"v4l\*(R" and \*(L"v4l2\*(R" can be used as aliases for the respective \*(L"video4linux\*(R" and
\&\*(L"video4linux2\*(R".
.Sh "vfwcap"
.IX Subsection "vfwcap"
VfW (Video for Windows) capture input device.
.PP
The filename passed as input is the capture driver number, ranging from
0 to 9. You may use \*(L"list\*(R" as filename to print a list of drivers. Any
other filename will be interpreted as device number 0.
.Sh "x11grab"
.IX Subsection "x11grab"
X11 video input device.
.PP
This device allows to capture a region of an X11 display.
.PP
The filename passed as input has the syntax:
.PP
.Vb 1
\&        [<hostname>]:<display_number>.<screen_number>[+<x_offset>,<y_offset>]
.Ve
.PP
\&\fIhostname\fR:\fIdisplay_number\fR.\fIscreen_number\fR specifies the
X11 display name of the screen to grab from. \fIhostname\fR can be
omitted, and defaults to \*(L"localhost\*(R". The environment variable
\&\fB\s-1DISPLAY\s0\fR contains the default display name.
.PP
\&\fIx_offset\fR and \fIy_offset\fR specify the offsets of the grabbed
area with respect to the top-left border of the X11 screen. They
default to 0.
.PP
Check the X11 documentation (e.g. man X) for more detailed information.
.PP
Use the \fBdpyinfo\fR program for getting basic information about the
properties of your X11 display (e.g. grep for \*(L"name\*(R" or \*(L"dimensions\*(R").
.PP
For example to grab from \fI:0.0\fR using \fBffmpeg\fR:
.PP
.Vb 1
\&        ffmpeg -f x11grab -r 25 -s cif -i :0.0 out.mpg
.Ve
.PP
Grab at position \f(CW\*(C`10,20\*(C'\fR:
.PP
.Vb 1
\&        ffmpeg -f x11grab -r 25 -s cif -i :0.0+10,20 out.mpg
.Ve
.PP
\fIOptions\fR
.IX Subsection "Options"
.IP "\fBdraw_mouse\fR" 4
.IX Item "draw_mouse"
Specify whether to draw the mouse pointer. A value of \f(CW0\fR specify
not to draw the pointer. Default value is \f(CW1\fR.
.IP "\fBfollow_mouse\fR" 4
.IX Item "follow_mouse"
Make the grabbed area follow the mouse. The argument can be
\&\f(CW\*(C`centered\*(C'\fR or a number of pixels \fI\s-1PIXELS\s0\fR.
.Sp
When it is specified with \*(L"centered\*(R", the grabbing region follows the mouse
pointer and keeps the pointer at the center of region; otherwise, the region
follows only when the mouse pointer reaches within \fI\s-1PIXELS\s0\fR (greater than
zero) to the edge of region.
.Sp
For example:
.Sp
.Vb 1
\&        ffmpeg -f x11grab -follow_mouse centered -r 25 -s cif -i :0.0 out.mpg
.Ve
.Sp
To follow only when the mouse pointer reaches within 100 pixels to edge:
.Sp
.Vb 1
\&        ffmpeg -f x11grab -follow_mouse 100 -r 25 -s cif -i :0.0 out.mpg
.Ve
.IP "\fBframerate\fR" 4
.IX Item "framerate"
Set the grabbing frame rate. Default value is \f(CW\*(C`ntsc\*(C'\fR,
corresponding to a framerate of \f(CW\*(C`30000/1001\*(C'\fR.
.IP "\fBshow_region\fR" 4
.IX Item "show_region"
Show grabbed region on screen.
.Sp
If \fIshow_region\fR is specified with \f(CW1\fR, then the grabbing
region will be indicated on screen. With this option, it is easy to
know what is being grabbed if only a portion of the screen is grabbed.
.Sp
For example:
.Sp
.Vb 1
\&        ffmpeg -f x11grab -show_region 1 -r 25 -s cif -i :0.0+10,20 out.mpg
.Ve
.Sp
With \fIfollow_mouse\fR:
.Sp
.Vb 1
\&        ffmpeg -f x11grab -follow_mouse centered -show_region 1 -r 25 -s cif -i :0.0 out.mpg
.Ve
.IP "\fBvideo_size\fR" 4
.IX Item "video_size"
Set the video frame size. Default value is \f(CW\*(C`vga\*(C'\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIffmpeg\fR\|(1), \fIffplay\fR\|(1), \fIffserver\fR\|(1) and the FFmpeg \s-1HTML\s0 documentation
.SH "AUTHORS"
.IX Header "AUTHORS"
The FFmpeg developers
