=head1 NAME

ffmpeg - ffmpeg video converter

=head1 SYNOPSIS

ffmpeg [global options] [[infile options][B<-i> I<infile>]]... {[outfile options] I<outfile>}...

=head1 DESCRIPTION


ffmpeg is a very fast video and audio converter that can also grab from
a live audio/video source. It can also convert between arbitrary sample
rates and resize video on the fly with a high quality polyphase filter.

ffmpeg reads from an arbitrary number of input "files" (which can be regular
files, pipes, network streams, grabbing devices, etc.), specified by the
C<-i> option, and writes to an arbitrary number of output "files", which are
specified by a plain output filename. Anything found on the command line which
cannot be interpreted as an option is considered to be an output filename.

Each input or output file can in principle contain any number of streams of
different types (video/audio/subtitle/attachment/data). Allowed number and/or
types of streams can be limited by the container format. Selecting, which
streams from which inputs go into output, is done either automatically or with
the C<-map> option (see the Stream selection chapter).

To refer to input files in options, you must use their indices (0-based). E.g.
the first input file is C<0>, the second is C<1> etc. Similarly, streams
within a file are referred to by their indices. E.g. C<2:3> refers to the
fourth stream in the third input file. See also the Stream specifiers chapter.

As a general rule, options are applied to the next specified
file. Therefore, order is important, and you can have the same
option on the command line multiple times. Each occurrence is
then applied to the next input or output file.
Exceptions from this rule are the global options (e.g. verbosity level),
which should be specified first.

Do not mix input and output files -- first specify all input files, then all
output files. Also do not mix options which belong to different files. All
options apply ONLY to the next input or output file and are reset between files.


=over 4


=item *

To set the video bitrate of the output file to 64kbit/s:
	
	ffmpeg -i input.avi -b:v 64k -bufsize 64k output.avi



=item *

To force the frame rate of the output file to 24 fps:
	
	ffmpeg -i input.avi -r 24 output.avi



=item *

To force the frame rate of the input file (valid for raw formats only)
to 1 fps and the frame rate of the output file to 24 fps:
	
	ffmpeg -r 1 -i input.m2v -r 24 output.avi


=back


The format option may be needed for raw input files.


=head1 DETAILED DESCRIPTION


The transcoding process in B<ffmpeg> for each output can be described by
the following diagram:

	
	 _______              ______________               _________              ______________            ________
	|       |            |              |             |         |            |              |          |        |
	| input |  demuxer   | encoded data |   decoder   | decoded |  encoder   | encoded data |  muxer   | output |
	| file  | ---------> | packets      |  ---------> | frames  | ---------> | packets      | -------> | file   |
	|_______|            |______________|             |_________|            |______________|          |________|
	


B<ffmpeg> calls the libavformat library (containing demuxers) to read
input files and get packets containing encoded data from them. When there are
multiple input files, B<ffmpeg> tries to keep them synchronized by
tracking lowest timestamp on any active input stream.

Encoded packets are then passed to the decoder (unless streamcopy is selected
for the stream, see further for a description). The decoder produces
uncompressed frames (raw video/PCM audio/...) which can be processed further by
filtering (see next section). After filtering the frames are passed to the
encoder, which encodes them and outputs encoded packets again. Finally those are
passed to the muxer, which writes the encoded packets to the output file.


=head2 Filtering

Before encoding, B<ffmpeg> can process raw audio and video frames using
filters from the libavfilter library. Several chained filters form a filter
graph.  B<ffmpeg> distinguishes between two types of filtergraphs -
simple and complex.


=head3 Simple filtergraphs

Simple filtergraphs are those that have exactly one input and output, both of
the same type. In the above diagram they can be represented by simply inserting
an additional step between decoding and encoding:

	
	 _________                        __________              ______________
	|         |                      |          |            |              |
	| decoded |  simple filtergraph  | filtered |  encoder   | encoded data |
	| frames  | -------------------> | frames   | ---------> | packets      |
	|_________|                      |__________|            |______________|
	


Simple filtergraphs are configured with the per-stream B<-filter> option
(with B<-vf> and B<-af> aliases for video and audio respectively).
A simple filtergraph for video can look for example like this:

	
	 _______        _____________        _______        _____        ________
	|       |      |             |      |       |      |     |      |        |
	| input | ---> | deinterlace | ---> | scale | ---> | fps | ---> | output |
	|_______|      |_____________|      |_______|      |_____|      |________|
	


Note that some filters change frame properties but not frame contents. E.g. the
C<fps> filter in the example above changes number of frames, but does not
touch the frame contents. Another example is the C<setpts> filter, which
only sets timestamps and otherwise passes the frames unchanged.


=head3 Complex filtergraphs

Complex filtergraphs are those which cannot be described as simply a linear
processing chain applied to one stream. This is the case e.g. when the graph has
more than one input and/or output, or when output stream type is different from
input. They can be represented with the following diagram:

	
	 _________
	|         |
	| input 0 |\                    __________
	|_________| \                  |          |
	             \   _________    /| output 0 |
	              \ |         |  / |__________|
	 _________     \| complex | /
	|         |     |         |/
	| input 1 |---->| filter  |\
	|_________|     |         | \   __________
	               /| graph   |  \ |          |
	              / |         |   \| output 1 |
	 _________   /  |_________|    |__________|
	|         | /
	| input 2 |/
	|_________|
	


Complex filtergraphs are configured with the B<-filter_complex> option.
Note that this option is global, since a complex filtergraph by its nature
cannot be unambiguously associated with a single stream or file.

A trivial example of a complex filtergraph is the C<overlay> filter, which
has two video inputs and one video output, containing one video overlaid on top
of the other. Its audio counterpart is the C<amix> filter.


=head2 Stream copy

Stream copy is a mode selected by supplying the C<copy> parameter to the
B<-codec> option. It makes B<ffmpeg> omit the decoding and encoding
step for the specified stream, so it does only demuxing and muxing. It is useful
for changing the container format or modifying container-level metadata. The
diagram above will in this case simplify to this:

	
	 _______              ______________            ________
	|       |            |              |          |        |
	| input |  demuxer   | encoded data |  muxer   | output |
	| file  | ---------> | packets      | -------> | file   |
	|_______|            |______________|          |________|
	


Since there is no decoding or encoding, it is very fast and there is no quality
loss. However it might not work in some cases because of many factors. Applying
filters is obviously also impossible, since filters work on uncompressed data.


=head1 STREAM SELECTION


By default ffmpeg includes only one stream of each type (video, audio, subtitle)
present in the input files and adds them to each output file.  It picks the
"best" of each based upon the following criteria; for video it is the stream
with the highest resolution, for audio the stream with the most channels, for
subtitle it's the first subtitle stream. In the case where several streams of
the same type rate equally, the lowest numbered stream is chosen.

You can disable some of those defaults by using C<-vn/-an/-sn> options. For
full manual control, use the C<-map> option, which disables the defaults just
described.


=head1 OPTIONS


All the numerical options, if not specified otherwise, accept in input
a string representing a number, which may contain one of the
International System number postfixes, for example 'K', 'M', 'G'.
If 'i' is appended after the postfix, powers of 2 are used instead of
powers of 10. The 'B' postfix multiplies the value for 8, and can be
appended after another postfix or used alone. This allows using for
example 'KB', 'MiB', 'G' and 'B' as postfix.

Options which do not take arguments are boolean options, and set the
corresponding value to true. They can be set to false by prefixing
with "no" the option name, for example using "-nofoo" in the
command line will set to false the boolean option with name "foo".



=head2 Stream specifiers

Some options are applied per-stream, e.g. bitrate or codec. Stream specifiers
are used to precisely specify which stream(s) does a given option belong to.

A stream specifier is a string generally appended to the option name and
separated from it by a colon. E.g. C<-codec:a:1 ac3> option contains
C<a:1> stream specifier, which matches the second audio stream. Therefore it
would select the ac3 codec for the second audio stream.

A stream specifier can match several streams, the option is then applied to all
of them. E.g. the stream specifier in C<-b:a 128k> matches all audio
streams.

An empty stream specifier matches all streams, for example C<-codec copy>
or C<-codec: copy> would copy all the streams without reencoding.

Possible forms of stream specifiers are:

=over 4


=item I<stream_index>

Matches the stream with this index. E.g. C<-threads:1 4> would set the
thread count for the second stream to 4.

=item I<stream_type>B<[:>I<stream_index>B<]>

I<stream_type> is one of: 'v' for video, 'a' for audio, 's' for subtitle,
'd' for data and 't' for attachments. If I<stream_index> is given, then
matches stream number I<stream_index> of this type. Otherwise matches all
streams of this type.

=item B<p:>I<program_id>B<[:>I<stream_index>B<]>

If I<stream_index> is given, then matches stream number I<stream_index> in
program with id I<program_id>. Otherwise matches all streams in this program.

=item B<#>I<stream_id>

Matches the stream by format-specific ID.

=back



=head2 Generic options


These options are shared amongst the av* tools.


=over 4



=item B<-L>

Show license.


=item B<-h, -?, -help, --help [>I<arg>B<]>

Show help. An optional parameter may be specified to print help about a specific
item.

Possible values of I<arg> are:

=over 4


=item B<decoder=>I<decoder_name>

Print detailed information about the decoder named I<decoder_name>. Use the
B<-decoders> option to get a list of all decoders.


=item B<encoder=>I<encoder_name>

Print detailed information about the encoder named I<encoder_name>. Use the
B<-encoders> option to get a list of all encoders.


=item B<demuxer=>I<demuxer_name>

Print detailed information about the demuxer named I<demuxer_name>. Use the
B<-formats> option to get a list of all demuxers and muxers.


=item B<muxer=>I<muxer_name>

Print detailed information about the muxer named I<muxer_name>. Use the
B<-formats> option to get a list of all muxers and demuxers.


=back



=item B<-version>

Show version.


=item B<-formats>

Show available formats.

The fields preceding the format names have the following meanings:

=over 4


=item B<D>

Decoding available

=item B<E>

Encoding available

=back



=item B<-codecs>

Show all codecs known to libavcodec.

Note that the term 'codec' is used throughout this documentation as a shortcut
for what is more correctly called a media bitstream format.


=item B<-decoders>

Show available decoders.


=item B<-encoders>

Show all available encoders.


=item B<-bsfs>

Show available bitstream filters.


=item B<-protocols>

Show available protocols.


=item B<-filters>

Show available libavfilter filters.


=item B<-pix_fmts>

Show available pixel formats.


=item B<-sample_fmts>

Show available sample formats.


=item B<-layouts>

Show channel names and standard channel layouts.


=item B<-loglevel> I<loglevel> B<| -v> I<loglevel>

Set the logging level used by the library.
I<loglevel> is a number or a string containing one of the following values:

=over 4


=item B<quiet>


=item B<panic>


=item B<fatal>


=item B<error>


=item B<warning>


=item B<info>


=item B<verbose>


=item B<debug>


=back


By default the program logs to stderr, if coloring is supported by the
terminal, colors are used to mark errors and warnings. Log coloring
can be disabled setting the environment variable
B<AV_LOG_FORCE_NOCOLOR> or B<NO_COLOR>, or can be forced setting
the environment variable B<AV_LOG_FORCE_COLOR>.
The use of the environment variable B<NO_COLOR> is deprecated and
will be dropped in a following FFmpeg version.


=item B<-report>

Dump full command line and console output to a file named
C<I<program>-I<YYYYMMDD>-I<HHMMSS>.log> in the current
directory.
This file can be useful for bug reports.
It also implies C<-loglevel verbose>.

Note: setting the environment variable C<FFREPORT> to any value has the
same effect.


=item B<-cpuflags flags (>I<global>B<)>

Allows setting and clearing cpu flags. This option is intended
for testing. Do not use it unless you know what you're doing.
	
	ffmpeg -cpuflags -sse+mmx ...
	ffmpeg -cpuflags mmx ...
	ffmpeg -cpuflags 0 ...



=back



=head2 AVOptions


These options are provided directly by the libavformat, libavdevice and
libavcodec libraries. To see the list of available AVOptions, use the
B<-help> option. They are separated into two categories:

=over 4


=item B<generic>

These options can be set for any container, codec or device. Generic options
are listed under AVFormatContext options for containers/devices and under
AVCodecContext options for codecs.

=item B<private>

These options are specific to the given container, device or codec. Private
options are listed under their corresponding containers/devices/codecs.

=back


For example to write an ID3v2.3 header instead of a default ID3v2.4 to
an MP3 file, use the B<id3v2_version> private option of the MP3
muxer:
	
	ffmpeg -i input.flac -id3v2_version 3 out.mp3


All codec AVOptions are obviously per-stream, so the chapter on stream
specifiers applies to them

Note B<-nooption> syntax cannot be used for boolean AVOptions,
use B<-option 0>/B<-option 1>.

Note2 old undocumented way of specifying per-stream AVOptions by prepending
v/a/s to the options name is now obsolete and will be removed soon.



=head2 Codec AVOptions


=over 4


=item B<-b[:stream_specifier]> I<integer> B<(>I<output,audio,video>B<)>

set bitrate (in bits/s)

=item B<-ab[:stream_specifier]> I<integer> B<(>I<output,audio>B<)>

set bitrate (in bits/s)

=item B<-bt[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

Set video bitrate tolerance (in bits/s). In 1-pass mode, bitrate tolerance specifies how far ratecontrol is willing to deviate from the target average bitrate value. This is not related to min/max bitrate. Lowering tolerance too much has an adverse effect on quality.

=item B<-flags[:stream_specifier]> I<flags> B<(>I<input/output,audio,video,subtitles>B<)>


Possible values:

=over 4


=item B<mv4>

use four motion vector by macroblock (mpeg4)

=item B<qpel>

use 1/4 pel motion compensation

=item B<loop>

use loop filter

=item B<qscale>

use fixed qscale

=item B<gmc>

use gmc

=item B<mv0>

always try a mb with mv=E<lt>0,0E<gt>

=item B<input_preserved>



=item B<pass1>

use internal 2pass ratecontrol in first  pass mode

=item B<pass2>

use internal 2pass ratecontrol in second pass mode

=item B<gray>

only decode/encode grayscale

=item B<emu_edge>

don't draw edges

=item B<psnr>

error[?] variables will be set during encoding

=item B<truncated>



=item B<naq>

normalize adaptive quantization

=item B<ildct>

use interlaced dct

=item B<low_delay>

force low delay

=item B<global_header>

place global headers in extradata instead of every keyframe

=item B<bitexact>

use only bitexact stuff (except (i)dct)

=item B<aic>

h263 advanced intra coding / mpeg4 ac prediction

=item B<cbp>

Deprecated, use mpegvideo private options instead

=item B<qprd>

Deprecated, use mpegvideo private options instead

=item B<ilme>

interlaced motion estimation

=item B<cgop>

closed gop

=back


=item B<-sub_id[:stream_specifier]> I<integer> B<()>


=item B<-me_method[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

set motion estimation method

Possible values:

=over 4


=item B<zero>

zero motion estimation (fastest)

=item B<full>

full motion estimation (slowest)

=item B<epzs>

EPZS motion estimation (default)

=item B<esa>

esa motion estimation (alias for full)

=item B<tesa>

tesa motion estimation

=item B<dia>

dia motion estimation (alias for epzs)

=item B<log>

log motion estimation

=item B<phods>

phods motion estimation

=item B<x1>

X1 motion estimation

=item B<hex>

hex motion estimation

=item B<umh>

umh motion estimation

=item B<iter>

iter motion estimation

=back


=item B<-extradata_size[:stream_specifier]> I<integer> B<()>


=item B<-time_base[:stream_specifier]> I<rational number> B<()>


=item B<-g[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

set the group of picture size

=item B<-ar[:stream_specifier]> I<integer> B<(>I<input/output,audio>B<)>

set audio sampling rate (in Hz)

=item B<-ac[:stream_specifier]> I<integer> B<(>I<input/output,audio>B<)>

set number of audio channels

=item B<-cutoff[:stream_specifier]> I<integer> B<(>I<output,audio>B<)>

set cutoff bandwidth

=item B<-frame_size[:stream_specifier]> I<integer> B<(>I<output,audio>B<)>


=item B<-frame_number[:stream_specifier]> I<integer> B<()>


=item B<-delay[:stream_specifier]> I<integer> B<()>


=item B<-qcomp[:stream_specifier]> I<float> B<(>I<output,video>B<)>

video quantizer scale compression (VBR). Constant of ratecontrol equation. Recommended range for default rc_eq: 0.0-1.0

=item B<-qblur[:stream_specifier]> I<float> B<(>I<output,video>B<)>

video quantizer scale blur (VBR)

=item B<-qmin[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

min video quantizer scale (VBR)

=item B<-qmax[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

max video quantizer scale (VBR)

=item B<-qdiff[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

max difference between the quantizer scale (VBR)

=item B<-bf[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

use 'frames' B frames

=item B<-b_qfactor[:stream_specifier]> I<float> B<(>I<output,video>B<)>

qp factor between p and b frames

=item B<-rc_strategy[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

ratecontrol method

=item B<-b_strategy[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

strategy to choose between I/P/B-frames

=item B<-ps[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

rtp payload size in bytes

=item B<-mv_bits[:stream_specifier]> I<integer> B<()>


=item B<-header_bits[:stream_specifier]> I<integer> B<()>


=item B<-i_tex_bits[:stream_specifier]> I<integer> B<()>


=item B<-p_tex_bits[:stream_specifier]> I<integer> B<()>


=item B<-i_count[:stream_specifier]> I<integer> B<()>


=item B<-p_count[:stream_specifier]> I<integer> B<()>


=item B<-skip_count[:stream_specifier]> I<integer> B<()>


=item B<-misc_bits[:stream_specifier]> I<integer> B<()>


=item B<-frame_bits[:stream_specifier]> I<integer> B<()>


=item B<-codec_tag[:stream_specifier]> I<integer> B<()>


=item B<-bug[:stream_specifier]> I<flags> B<(>I<input,video>B<)>

workaround not auto detected encoder bugs

Possible values:

=over 4


=item B<autodetect>



=item B<old_msmpeg4>

some old lavc generated msmpeg4v3 files (no autodetection)

=item B<xvid_ilace>

Xvid interlacing bug (autodetected if fourcc==XVIX)

=item B<ump4>

(autodetected if fourcc==UMP4)

=item B<no_padding>

padding bug (autodetected)

=item B<amv>



=item B<ac_vlc>

illegal vlc bug (autodetected per fourcc)

=item B<qpel_chroma>



=item B<std_qpel>

old standard qpel (autodetected per fourcc/version)

=item B<qpel_chroma2>



=item B<direct_blocksize>

direct-qpel-blocksize bug (autodetected per fourcc/version)

=item B<edge>

edge padding bug (autodetected per fourcc/version)

=item B<hpel_chroma>



=item B<dc_clip>



=item B<ms>

workaround various bugs in microsofts broken decoders

=item B<trunc>

trancated frames

=back


=item B<-lelim[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

single coefficient elimination threshold for luminance (negative values also consider dc coefficient)

=item B<-celim[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

single coefficient elimination threshold for chrominance (negative values also consider dc coefficient)

=item B<-strict[:stream_specifier]> I<integer> B<(>I<input/output,audio,video>B<)>

how strictly to follow the standards

Possible values:

=over 4


=item B<very>

strictly conform to a older more strict version of the spec or reference software

=item B<strict>

strictly conform to all the things in the spec no matter what consequences

=item B<normal>



=item B<unofficial>

allow unofficial extensions

=item B<experimental>

allow non standardized experimental things

=back


=item B<-b_qoffset[:stream_specifier]> I<float> B<(>I<output,video>B<)>

qp offset between P and B frames

=item B<-err_detect[:stream_specifier]> I<flags> B<(>I<input,audio,video>B<)>

set error detection flags

Possible values:

=over 4


=item B<crccheck>

verify embedded CRCs

=item B<bitstream>

detect bitstream specification deviations

=item B<buffer>

detect improper bitstream length

=item B<explode>

abort decoding on minor error detection

=item B<careful>

consider things that violate the spec and have not been seen in the wild as errors

=item B<compliant>

consider all spec non compliancies as errors

=item B<aggressive>

consider things that a sane encoder should not do as an error

=back


=item B<-has_b_frames[:stream_specifier]> I<integer> B<()>


=item B<-block_align[:stream_specifier]> I<integer> B<()>


=item B<-mpeg_quant[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

use MPEG quantizers instead of H.263

=item B<-stats_out[:stream_specifier]> I<string> B<()>


=item B<-qsquish[:stream_specifier]> I<float> B<(>I<output,video>B<)>

how to keep quantizer between qmin and qmax (0 = clip, 1 = use differentiable function)

=item B<-rc_qmod_amp[:stream_specifier]> I<float> B<(>I<output,video>B<)>

experimental quantizer modulation

=item B<-rc_qmod_freq[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

experimental quantizer modulation

=item B<-rc_override_count[:stream_specifier]> I<integer> B<()>


=item B<-rc_eq[:stream_specifier]> I<string> B<(>I<output,video>B<)>

Set rate control equation. When computing the expression, besides the standard functions defined in the section 'Expression Evaluation', the following functions are available: bits2qp(bits), qp2bits(qp). Also the following constants are available: iTex pTex tex mv fCode iCount mcVar var isI isP isB avgQP qComp avgIITex avgPITex avgPPTex avgBPTex avgTex.

=item B<-maxrate[:stream_specifier]> I<integer> B<(>I<output,audio,video>B<)>

Set max bitrate tolerance (in bits/s). Requires bufsize to be set.

=item B<-minrate[:stream_specifier]> I<integer> B<(>I<output,audio,video>B<)>

Set min bitrate tolerance (in bits/s). Most useful in setting up a CBR encode. It is of little use elsewise.

=item B<-bufsize[:stream_specifier]> I<integer> B<(>I<output,audio,video>B<)>

set ratecontrol buffer size (in bits)

=item B<-rc_buf_aggressivity[:stream_specifier]> I<float> B<(>I<output,video>B<)>

currently useless

=item B<-i_qfactor[:stream_specifier]> I<float> B<(>I<output,video>B<)>

qp factor between P and I frames

=item B<-i_qoffset[:stream_specifier]> I<float> B<(>I<output,video>B<)>

qp offset between P and I frames

=item B<-rc_init_cplx[:stream_specifier]> I<float> B<(>I<output,video>B<)>

initial complexity for 1-pass encoding

=item B<-dct[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

DCT algorithm

Possible values:

=over 4


=item B<auto>

autoselect a good one (default)

=item B<fastint>

fast integer

=item B<int>

accurate integer

=item B<mmx>



=item B<altivec>



=item B<faan>

floating point AAN DCT

=back


=item B<-lumi_mask[:stream_specifier]> I<float> B<(>I<output,video>B<)>

compresses bright areas stronger than medium ones

=item B<-tcplx_mask[:stream_specifier]> I<float> B<(>I<output,video>B<)>

temporal complexity masking

=item B<-scplx_mask[:stream_specifier]> I<float> B<(>I<output,video>B<)>

spatial complexity masking

=item B<-p_mask[:stream_specifier]> I<float> B<(>I<output,video>B<)>

inter masking

=item B<-dark_mask[:stream_specifier]> I<float> B<(>I<output,video>B<)>

compresses dark areas stronger than medium ones

=item B<-idct[:stream_specifier]> I<integer> B<(>I<input/output,video>B<)>

select IDCT implementation

Possible values:

=over 4


=item B<auto>



=item B<int>



=item B<simple>



=item B<simplemmx>



=item B<libmpeg2mmx>



=item B<mmi>



=item B<arm>



=item B<altivec>



=item B<sh4>



=item B<simplearm>



=item B<simplearmv5te>



=item B<simplearmv6>



=item B<simpleneon>



=item B<simplealpha>



=item B<h264>



=item B<vp3>



=item B<ipp>



=item B<xvidmmx>



=item B<faani>

floating point AAN IDCT

=back


=item B<-slice_count[:stream_specifier]> I<integer> B<()>


=item B<-ec[:stream_specifier]> I<flags> B<(>I<input,video>B<)>

set error concealment strategy

Possible values:

=over 4


=item B<guess_mvs>

iterative motion vector (MV) search (slow)

=item B<deblock>

use strong deblock filter for damaged MBs

=back


=item B<-bits_per_coded_sample[:stream_specifier]> I<integer> B<()>


=item B<-pred[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

prediction method

Possible values:

=over 4


=item B<left>



=item B<plane>



=item B<median>



=back


=item B<-aspect[:stream_specifier]> I<rational number> B<(>I<output,video>B<)>

sample aspect ratio

=item B<-debug[:stream_specifier]> I<flags> B<(>I<input/output,audio,video,subtitles>B<)>

print specific debug info

Possible values:

=over 4


=item B<pict>

picture info

=item B<rc>

rate control

=item B<bitstream>



=item B<mb_type>

macroblock (MB) type

=item B<qp>

per-block quantization parameter (QP)

=item B<mv>

motion vector

=item B<dct_coeff>



=item B<skip>



=item B<startcode>



=item B<pts>



=item B<er>

error recognition

=item B<mmco>

memory management control operations (H.264)

=item B<bugs>



=item B<vis_qp>

visualize quantization parameter (QP), lower QP are tinted greener

=item B<vis_mb_type>

visualize block types

=item B<buffers>

picture buffer allocations

=item B<thread_ops>

threading operations

=back


=item B<-vismv[:stream_specifier]> I<integer> B<(>I<input,video>B<)>

visualize motion vectors (MVs)

Possible values:

=over 4


=item B<pf>

forward predicted MVs of P-frames

=item B<bf>

forward predicted MVs of B-frames

=item B<bb>

backward predicted MVs of B-frames

=back


=item B<-cmp[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

full pel me compare function

Possible values:

=over 4


=item B<sad>

sum of absolute differences, fast (default)

=item B<sse>

sum of squared errors

=item B<satd>

sum of absolute Hadamard transformed differences

=item B<dct>

sum of absolute DCT transformed differences

=item B<psnr>

sum of squared quantization errors (avoid, low quality)

=item B<bit>

number of bits needed for the block

=item B<rd>

rate distortion optimal, slow

=item B<zero>

0

=item B<vsad>

sum of absolute vertical differences

=item B<vsse>

sum of squared vertical differences

=item B<nsse>

noise preserving sum of squared differences

=item B<w53>

5/3 wavelet, only used in snow

=item B<w97>

9/7 wavelet, only used in snow

=item B<dctmax>



=item B<chroma>



=back


=item B<-subcmp[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

sub pel me compare function

Possible values:

=over 4


=item B<sad>

sum of absolute differences, fast (default)

=item B<sse>

sum of squared errors

=item B<satd>

sum of absolute Hadamard transformed differences

=item B<dct>

sum of absolute DCT transformed differences

=item B<psnr>

sum of squared quantization errors (avoid, low quality)

=item B<bit>

number of bits needed for the block

=item B<rd>

rate distortion optimal, slow

=item B<zero>

0

=item B<vsad>

sum of absolute vertical differences

=item B<vsse>

sum of squared vertical differences

=item B<nsse>

noise preserving sum of squared differences

=item B<w53>

5/3 wavelet, only used in snow

=item B<w97>

9/7 wavelet, only used in snow

=item B<dctmax>



=item B<chroma>



=back


=item B<-mbcmp[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

macroblock compare function

Possible values:

=over 4


=item B<sad>

sum of absolute differences, fast (default)

=item B<sse>

sum of squared errors

=item B<satd>

sum of absolute Hadamard transformed differences

=item B<dct>

sum of absolute DCT transformed differences

=item B<psnr>

sum of squared quantization errors (avoid, low quality)

=item B<bit>

number of bits needed for the block

=item B<rd>

rate distortion optimal, slow

=item B<zero>

0

=item B<vsad>

sum of absolute vertical differences

=item B<vsse>

sum of squared vertical differences

=item B<nsse>

noise preserving sum of squared differences

=item B<w53>

5/3 wavelet, only used in snow

=item B<w97>

9/7 wavelet, only used in snow

=item B<dctmax>



=item B<chroma>



=back


=item B<-ildctcmp[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

interlaced dct compare function

Possible values:

=over 4


=item B<sad>

sum of absolute differences, fast (default)

=item B<sse>

sum of squared errors

=item B<satd>

sum of absolute Hadamard transformed differences

=item B<dct>

sum of absolute DCT transformed differences

=item B<psnr>

sum of squared quantization errors (avoid, low quality)

=item B<bit>

number of bits needed for the block

=item B<rd>

rate distortion optimal, slow

=item B<zero>

0

=item B<vsad>

sum of absolute vertical differences

=item B<vsse>

sum of squared vertical differences

=item B<nsse>

noise preserving sum of squared differences

=item B<w53>

5/3 wavelet, only used in snow

=item B<w97>

9/7 wavelet, only used in snow

=item B<dctmax>



=item B<chroma>



=back


=item B<-dia_size[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

diamond type & size for motion estimation

=item B<-last_pred[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

amount of motion predictors from the previous frame

=item B<-preme[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

pre motion estimation

=item B<-precmp[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

pre motion estimation compare function

Possible values:

=over 4


=item B<sad>

sum of absolute differences, fast (default)

=item B<sse>

sum of squared errors

=item B<satd>

sum of absolute Hadamard transformed differences

=item B<dct>

sum of absolute DCT transformed differences

=item B<psnr>

sum of squared quantization errors (avoid, low quality)

=item B<bit>

number of bits needed for the block

=item B<rd>

rate distortion optimal, slow

=item B<zero>

0

=item B<vsad>

sum of absolute vertical differences

=item B<vsse>

sum of squared vertical differences

=item B<nsse>

noise preserving sum of squared differences

=item B<w53>

5/3 wavelet, only used in snow

=item B<w97>

9/7 wavelet, only used in snow

=item B<dctmax>



=item B<chroma>



=back


=item B<-pre_dia_size[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

diamond type & size for motion estimation pre-pass

=item B<-subq[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

sub pel motion estimation quality

=item B<-dtg_active_format[:stream_specifier]> I<integer> B<()>


=item B<-me_range[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

limit motion vectors range (1023 for DivX player)

=item B<-ibias[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

intra quant bias

=item B<-pbias[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

inter quant bias

=item B<-color_table_id[:stream_specifier]> I<integer> B<()>


=item B<-global_quality[:stream_specifier]> I<integer> B<(>I<output,audio,video>B<)>


=item B<-coder[:stream_specifier]> I<integer> B<(>I<output,video>B<)>


Possible values:

=over 4


=item B<vlc>

variable length coder / huffman coder

=item B<ac>

arithmetic coder

=item B<raw>

raw (no encoding)

=item B<rle>

run-length coder

=item B<deflate>

deflate-based coder

=back


=item B<-context[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

context model

=item B<-slice_flags[:stream_specifier]> I<integer> B<()>


=item B<-xvmc_acceleration[:stream_specifier]> I<integer> B<()>


=item B<-mbd[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

macroblock decision algorithm (high quality mode)

Possible values:

=over 4


=item B<simple>

use mbcmp (default)

=item B<bits>

use fewest bits

=item B<rd>

use best rate distortion

=back


=item B<-stream_codec_tag[:stream_specifier]> I<integer> B<()>


=item B<-sc_threshold[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

scene change threshold

=item B<-lmin[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

min lagrange factor (VBR)

=item B<-lmax[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

max lagrange factor (VBR)

=item B<-nr[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

noise reduction

=item B<-rc_init_occupancy[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

number of bits which should be loaded into the rc buffer before decoding starts

=item B<-inter_threshold[:stream_specifier]> I<integer> B<(>I<output,video>B<)>


=item B<-flags2[:stream_specifier]> I<flags> B<(>I<input/output,audio,video>B<)>


Possible values:

=over 4


=item B<fast>

allow non spec compliant speedup tricks

=item B<sgop>

Deprecated, use mpegvideo private options instead

=item B<noout>

skip bitstream encoding

=item B<local_header>

place global headers at every keyframe instead of in extradata

=item B<chunks>

Frame data might be split into multiple chunks

=item B<showall>

Show all frames before the first keyframe

=item B<skiprd>

Deprecated, use mpegvideo private options instead

=back


=item B<-error[:stream_specifier]> I<integer> B<(>I<output,video>B<)>


=item B<-qns[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

deprecated, use mpegvideo private options instead

=item B<-threads[:stream_specifier]> I<integer> B<(>I<input/output,video>B<)>


Possible values:

=over 4


=item B<auto>

detect a good number of threads

=back


=item B<-me_threshold[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

motion estimaton threshold

=item B<-mb_threshold[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

macroblock threshold

=item B<-dc[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

intra_dc_precision

=item B<-nssew[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

nsse weight

=item B<-skip_top[:stream_specifier]> I<integer> B<(>I<input,video>B<)>

number of macroblock rows at the top which are skipped

=item B<-skip_bottom[:stream_specifier]> I<integer> B<(>I<input,video>B<)>

number of macroblock rows at the bottom which are skipped

=item B<-profile[:stream_specifier]> I<integer> B<(>I<output,audio,video>B<)>


Possible values:

=over 4


=item B<unknown>



=item B<aac_main>



=item B<aac_low>



=item B<aac_ssr>



=item B<aac_ltp>



=item B<aac_he>



=item B<aac_he_v2>



=item B<aac_ld>



=item B<aac_eld>



=item B<dts>



=item B<dts_es>



=item B<dts_96_24>



=item B<dts_hd_hra>



=item B<dts_hd_ma>



=back


=item B<-level[:stream_specifier]> I<integer> B<(>I<output,audio,video>B<)>


Possible values:

=over 4


=item B<unknown>



=back


=item B<-lowres[:stream_specifier]> I<integer> B<(>I<input,audio,video>B<)>

decode at 1= 1/2, 2=1/4, 3=1/8 resolutions

=item B<-skip_threshold[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

frame skip threshold

=item B<-skip_factor[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

frame skip factor

=item B<-skip_exp[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

frame skip exponent

=item B<-skipcmp[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

frame skip compare function

Possible values:

=over 4


=item B<sad>

sum of absolute differences, fast (default)

=item B<sse>

sum of squared errors

=item B<satd>

sum of absolute Hadamard transformed differences

=item B<dct>

sum of absolute DCT transformed differences

=item B<psnr>

sum of squared quantization errors (avoid, low quality)

=item B<bit>

number of bits needed for the block

=item B<rd>

rate distortion optimal, slow

=item B<zero>

0

=item B<vsad>

sum of absolute vertical differences

=item B<vsse>

sum of squared vertical differences

=item B<nsse>

noise preserving sum of squared differences

=item B<w53>

5/3 wavelet, only used in snow

=item B<w97>

9/7 wavelet, only used in snow

=item B<dctmax>



=item B<chroma>



=back


=item B<-border_mask[:stream_specifier]> I<float> B<(>I<output,video>B<)>

increases the quantizer for macroblocks close to borders

=item B<-mblmin[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

min macroblock lagrange factor (VBR)

=item B<-mblmax[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

max macroblock lagrange factor (VBR)

=item B<-mepc[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

motion estimation bitrate penalty compensation (1.0 = 256)

=item B<-skip_loop_filter[:stream_specifier]> I<integer> B<(>I<input,video>B<)>


Possible values:

=over 4


=item B<none>



=item B<default>



=item B<noref>



=item B<bidir>



=item B<nokey>



=item B<all>



=back


=item B<-skip_idct[:stream_specifier]> I<integer> B<(>I<input,video>B<)>


Possible values:

=over 4


=item B<none>



=item B<default>



=item B<noref>



=item B<bidir>



=item B<nokey>



=item B<all>



=back


=item B<-skip_frame[:stream_specifier]> I<integer> B<(>I<input,video>B<)>


Possible values:

=over 4


=item B<none>



=item B<default>



=item B<noref>



=item B<bidir>



=item B<nokey>



=item B<all>



=back


=item B<-bidir_refine[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

refine the two motion vectors used in bidirectional macroblocks

=item B<-brd_scale[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

downscales frames for dynamic B-frame decision

=item B<-keyint_min[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

minimum interval between IDR-frames

=item B<-refs[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

reference frames to consider for motion compensation

=item B<-chromaoffset[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

chroma qp offset from luma

=item B<-trellis[:stream_specifier]> I<integer> B<(>I<output,audio,video>B<)>

rate-distortion optimal quantization

=item B<-sc_factor[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

multiplied by qscale for each frame and added to scene_change_score

=item B<-mv0_threshold[:stream_specifier]> I<integer> B<(>I<output,video>B<)>


=item B<-b_sensitivity[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

adjusts sensitivity of b_frame_strategy 1

=item B<-compression_level[:stream_specifier]> I<integer> B<(>I<output,audio,video>B<)>


=item B<-min_prediction_order[:stream_specifier]> I<integer> B<(>I<output,audio>B<)>


=item B<-max_prediction_order[:stream_specifier]> I<integer> B<(>I<output,audio>B<)>


=item B<-timecode_frame_start[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

GOP timecode frame start number, in non drop frame format

=item B<-request_channels[:stream_specifier]> I<integer> B<(>I<input,audio>B<)>

set desired number of audio channels

=item B<-bits_per_raw_sample[:stream_specifier]> I<integer> B<()>


=item B<-channel_layout[:stream_specifier]> I<integer> B<(>I<input/output,audio>B<)>


Possible values:

=over 4


=back


=item B<-request_channel_layout[:stream_specifier]> I<integer> B<(>I<input,audio>B<)>


Possible values:

=over 4


=back


=item B<-rc_max_vbv_use[:stream_specifier]> I<float> B<(>I<output,video>B<)>


=item B<-rc_min_vbv_use[:stream_specifier]> I<float> B<(>I<output,video>B<)>


=item B<-ticks_per_frame[:stream_specifier]> I<integer> B<(>I<input/output,audio,video>B<)>


=item B<-color_primaries[:stream_specifier]> I<integer> B<(>I<input/output,video>B<)>


=item B<-color_trc[:stream_specifier]> I<integer> B<(>I<input/output,video>B<)>


=item B<-colorspace[:stream_specifier]> I<integer> B<(>I<input/output,video>B<)>


=item B<-color_range[:stream_specifier]> I<integer> B<(>I<input/output,video>B<)>


=item B<-chroma_sample_location[:stream_specifier]> I<integer> B<(>I<input/output,video>B<)>


=item B<-log_level_offset[:stream_specifier]> I<integer> B<()>

set the log level offset

=item B<-slices[:stream_specifier]> I<integer> B<(>I<output,video>B<)>

number of slices, used in parallelized encoding

=item B<-thread_type[:stream_specifier]> I<flags> B<(>I<input/output,video>B<)>

select multithreading type

Possible values:

=over 4


=item B<slice>



=item B<frame>



=back


=item B<-audio_service_type[:stream_specifier]> I<integer> B<(>I<output,audio>B<)>

audio service type

Possible values:

=over 4


=item B<ma>

Main Audio Service

=item B<ef>

Effects

=item B<vi>

Visually Impaired

=item B<hi>

Hearing Impaired

=item B<di>

Dialogue

=item B<co>

Commentary

=item B<em>

Emergency

=item B<vo>

Voice Over

=item B<ka>

Karaoke

=back


=item B<-request_sample_fmt[:stream_specifier]> I<integer> B<(>I<input,audio>B<)>

sample format audio decoders should prefer

Possible values:

=over 4


=item B<u8>

8-bit unsigned integer

=item B<s16>

16-bit signed integer

=item B<s32>

32-bit signed integer

=item B<flt>

32-bit float

=item B<dbl>

64-bit double

=item B<u8p>

8-bit unsigned integer planar

=item B<s16p>

16-bit signed integer planar

=item B<s32p>

32-bit signed integer planar

=item B<fltp>

32-bit float planar

=item B<dblp>

64-bit double planar

=back


=item B<-pkt_timebase[:stream_specifier]> I<rational number> B<()>


=back



=head2 Format AVOptions


=over 4


=item B<-avioflags> I<flags> B<(>I<input/output>B<)>


Possible values:

=over 4


=item B<direct>

reduce buffering

=back


=item B<-probesize> I<integer> B<(>I<input>B<)>

set probing size

=item B<-packetsize> I<integer> B<(>I<output>B<)>

set packet size

=item B<-fflags> I<flags> B<(>I<input/output>B<)>


Possible values:

=over 4


=item B<ignidx>

ignore index

=item B<genpts>

generate pts

=item B<nofillin>

do not fill in missing values that can be exactly calculated

=item B<noparse>

disable AVParsers, this needs nofillin too

=item B<igndts>

ignore dts

=item B<discardcorrupt>

discard corrupted frames

=item B<sortdts>

try to interleave outputted packets by dts

=item B<keepside>

dont merge side data

=item B<latm>

enable RTP MP4A-LATM payload

=item B<nobuffer>

reduce the latency introduced by optional buffering

=back


=item B<-analyzeduration> I<integer> B<(>I<input>B<)>

how many microseconds are analyzed to estimate duration

=item B<-cryptokey> I<hexadecimal string> B<(>I<input>B<)>

decryption key

=item B<-indexmem> I<integer> B<(>I<input>B<)>

max memory used for timestamp index (per stream)

=item B<-rtbufsize> I<integer> B<(>I<input>B<)>

max memory used for buffering real-time frames

=item B<-fdebug> I<flags> B<(>I<input/output>B<)>

print specific debug info

Possible values:

=over 4


=item B<ts>



=back


=item B<-max_delay> I<integer> B<(>I<input/output>B<)>

maximum muxing or demuxing delay in microseconds

=item B<-fpsprobesize> I<integer> B<(>I<input>B<)>

number of frames used to probe fps

=item B<-audio_preload> I<integer> B<(>I<output>B<)>

microseconds by which audio packets should be interleaved earlier

=item B<-chunk_duration> I<integer> B<(>I<output>B<)>

microseconds for each chunk

=item B<-chunk_size> I<integer> B<(>I<output>B<)>

size in bytes for each chunk

=item B<-f_err_detect> I<flags> B<(>I<input>B<)>

set error detection flags (deprecated; use err_detect, save via avconv)

Possible values:

=over 4


=item B<crccheck>

verify embedded CRCs

=item B<bitstream>

detect bitstream specification deviations

=item B<buffer>

detect improper bitstream length

=item B<explode>

abort decoding on minor error detection

=item B<careful>

consider things that violate the spec and have not been seen in the wild as errors

=item B<compliant>

consider all spec non compliancies as errors

=item B<aggressive>

consider things that a sane encoder shouldnt do as an error

=back


=item B<-err_detect> I<flags> B<(>I<input>B<)>

set error detection flags

Possible values:

=over 4


=item B<crccheck>

verify embedded CRCs

=item B<bitstream>

detect bitstream specification deviations

=item B<buffer>

detect improper bitstream length

=item B<explode>

abort decoding on minor error detection

=item B<careful>

consider things that violate the spec and have not been seen in the wild as errors

=item B<compliant>

consider all spec non compliancies as errors

=item B<aggressive>

consider things that a sane encoder shouldnt do as an error

=back


=item B<-use_wallclock_as_timestamps> I<integer> B<(>I<input>B<)>

use wallclock as timestamps

=item B<-avoid_negative_ts> I<integer> B<(>I<output>B<)>

avoid negative timestamps

=back



=head2 Main options



=over 4



=item B<-f> I<fmt> B<(>I<input/output>B<)>

Force input or output file format. The format is normally auto detected for input
files and guessed from file extension for output files, so this option is not
needed in most cases.


=item B<-i> I<filename> B<(>I<input>B<)>

input file name


=item B<-y (>I<global>B<)>

Overwrite output files without asking.


=item B<-n (>I<global>B<)>

Do not overwrite output files but exit if file exists.


=item B<-c[:>I<stream_specifier>B<]> I<codec> B<(>I<input/output,per-stream>B<)>


=item B<-codec[:>I<stream_specifier>B<]> I<codec> B<(>I<input/output,per-stream>B<)>

Select an encoder (when used before an output file) or a decoder (when used
before an input file) for one or more streams. I<codec> is the name of a
decoder/encoder or a special value C<copy> (output only) to indicate that
the stream is not to be re-encoded.

For example
	
	ffmpeg -i INPUT -map 0 -c:v libx264 -c:a copy OUTPUT

encodes all video streams with libx264 and copies all audio streams.

For each stream, the last matching C<c> option is applied, so
	
	ffmpeg -i INPUT -map 0 -c copy -c:v:1 libx264 -c:a:137 libvorbis OUTPUT

will copy all the streams except the second video, which will be encoded with
libx264, and the 138th audio, which will be encoded with libvorbis.


=item B<-t> I<duration> B<(>I<output>B<)>

Stop writing the output after its duration reaches I<duration>.
I<duration> may be a number in seconds, or in C<hh:mm:ss[.xxx]> form.


=item B<-fs> I<limit_size> B<(>I<output>B<)>

Set the file size limit, expressed in bytes.


=item B<-ss> I<position> B<(>I<input/output>B<)>

When used as an input option (before C<-i>), seeks in this input file to
I<position>. When used as an output option (before an output filename),
decodes but discards input until the timestamps reach I<position>. This is
slower, but more accurate.

I<position> may be either in seconds or in C<hh:mm:ss[.xxx]> form.


=item B<-itsoffset> I<offset> B<(>I<input>B<)>

Set the input time offset in seconds.
C<[-]hh:mm:ss[.xxx]> syntax is also supported.
The offset is added to the timestamps of the input files.
Specifying a positive offset means that the corresponding
streams are delayed by I<offset> seconds.


=item B<-timestamp> I<time> B<(>I<output>B<)>

Set the recording timestamp in the container.
The syntax for I<time> is:
	
	now|([(YYYY-MM-DD|YYYYMMDD)[T|t| ]]((HH:MM:SS[.m...])|(HHMMSS[.m...]))[Z|z])

If the value is "now" it takes the current time.
Time is local time unless 'Z' or 'z' is appended, in which case it is
interpreted as UTC.
If the year-month-day part is not specified it takes the current
year-month-day.


=item B<-metadata[:metadata_specifier]> I<key>B<=>I<value> B<(>I<output,per-metadata>B<)>

Set a metadata key/value pair.

An optional I<metadata_specifier> may be given to set metadata
on streams or chapters. See C<-map_metadata> documentation for
details.

This option overrides metadata set with C<-map_metadata>. It is
also possible to delete metadata by using an empty value.

For example, for setting the title in the output file:
	
	ffmpeg -i in.avi -metadata title="my title" out.flv


To set the language of the first audio stream:
	
	ffmpeg -i INPUT -metadata:s:a:1 language=eng OUTPUT



=item B<-target> I<type> B<(>I<output>B<)>

Specify target file type (C<vcd>, C<svcd>, C<dvd>, C<dv>,
C<dv50>). I<type> may be prefixed with C<pal->, C<ntsc-> or
C<film-> to use the corresponding standard. All the format options
(bitrate, codecs, buffer sizes) are then set automatically. You can just type:

	
	ffmpeg -i myfile.avi -target vcd /tmp/vcd.mpg


Nevertheless you can specify additional options as long as you know
they do not conflict with the standard, as in:

	
	ffmpeg -i myfile.avi -target vcd -bf 2 /tmp/vcd.mpg



=item B<-dframes> I<number> B<(>I<output>B<)>

Set the number of data frames to record. This is an alias for C<-frames:d>.


=item B<-frames[:>I<stream_specifier>B<]> I<framecount> B<(>I<output,per-stream>B<)>

Stop writing to the stream after I<framecount> frames.


=item B<-q[:>I<stream_specifier>B<]> I<q> B<(>I<output,per-stream>B<)>


=item B<-qscale[:>I<stream_specifier>B<]> I<q> B<(>I<output,per-stream>B<)>

Use fixed quality scale (VBR). The meaning of I<q> is
codec-dependent.


=item B<-filter[:>I<stream_specifier>B<]> I<filter_graph> B<(>I<output,per-stream>B<)>

I<filter_graph> is a description of the filter graph to apply to
the stream. Use C<-filters> to show all the available filters
(including also sources and sinks).

See also the B<-filter_complex> option if you want to create filter graphs
with multiple inputs and/or outputs.

=item B<-pre[:>I<stream_specifier>B<]> I<preset_name> B<(>I<output,per-stream>B<)>

Specify the preset for matching stream(s).


=item B<-stats (>I<global>B<)>

Print encoding progress/statistics. On by default.


=item B<-progress> I<url> B<(>I<global>B<)>

Send program-friendly progress information to I<url>.

Progress information is written approximately every second and at the end of
the encoding process. It is made of "I<key>=I<value>" lines. I<key>
consists of only alphanumeric characters. The last key of a sequence of
progress information is always "progress".


=item B<-stdin>

Enable interaction on standard input. On by default unless standard input is
used as an input. To explicitly disable interaction you need to specify
C<-nostdin>.

Disabling interaction on standard input is useful, for example, if
ffmpeg is in the background process group. Roughly the same result can
be achieved with C<ffmpeg ... E<lt> /dev/null> but it requires a
shell.


=item B<-debug_ts (>I<global>B<)>

Print timestamp information. It is off by default. This option is
mostly useful for testing and debugging purposes, and the output
format may change from one version to another, so it should not be
employed by portable scripts.

See also the option C<-fdebug ts>.


=item B<-attach> I<filename> B<(>I<output>B<)>

Add an attachment to the output file. This is supported by a few formats
like Matroska for e.g. fonts used in rendering subtitles. Attachments
are implemented as a specific type of stream, so this option will add
a new stream to the file. It is then possible to use per-stream options
on this stream in the usual way. Attachment streams created with this
option will be created after all the other streams (i.e. those created
with C<-map> or automatic mappings).

Note that for Matroska you also have to set the mimetype metadata tag:
	
	ffmpeg -i INPUT -attach DejaVuSans.ttf -metadata:s:2 mimetype=application/x-truetype-font out.mkv

(assuming that the attachment stream will be third in the output file).


=item B<-dump_attachment[:>I<stream_specifier>B<]> I<filename> B<(>I<input,per-stream>B<)>

Extract the matching attachment stream into a file named I<filename>. If
I<filename> is empty, then the value of the C<filename> metadata tag
will be used.

E.g. to extract the first attachment to a file named 'out.ttf':
	
	ffmpeg -dump_attachment:t:0 out.ttf INPUT

To extract all attachments to files determined by the C<filename> tag:
	
	ffmpeg -dump_attachment:t "" INPUT


Technical note -- attachments are implemented as codec extradata, so this
option can actually be used to extract extradata from any stream, not just
attachments.


=back



=head2 Video Options



=over 4


=item B<-vframes> I<number> B<(>I<output>B<)>

Set the number of video frames to record. This is an alias for C<-frames:v>.

=item B<-r[:>I<stream_specifier>B<]> I<fps> B<(>I<input/output,per-stream>B<)>

Set frame rate (Hz value, fraction or abbreviation).

As an input option, ignore any timestamps stored in the file and instead
generate timestamps assuming constant frame rate I<fps>.

As an output option, duplicate or drop input frames to achieve constant output
frame rate I<fps> (note that this actually causes the C<fps> filter to be
inserted to the end of the corresponding filtergraph).


=item B<-s[:>I<stream_specifier>B<]> I<size> B<(>I<input/output,per-stream>B<)>

Set frame size.

As an input option, this is a shortcut for the B<video_size> private
option, recognized by some demuxers for which the frame size is either not
stored in the file or is configurable -- e.g. raw video or video grabbers.

As an output option, this inserts the C<scale> video filter to the
I<end> of the corresponding filtergraph. Please use the C<scale> filter
directly to insert it at the beginning or some other place.

The format is B<wxh> (default - same as source).


=item B<-aspect[:>I<stream_specifier>B<]> I<aspect> B<(>I<output,per-stream>B<)>

Set the video display aspect ratio specified by I<aspect>.

I<aspect> can be a floating point number string, or a string of the
form I<num>:I<den>, where I<num> and I<den> are the
numerator and denominator of the aspect ratio. For example "4:3",
"16:9", "1.3333", and "1.7777" are valid argument values.


=item B<-croptop> I<size>


=item B<-cropbottom> I<size>


=item B<-cropleft> I<size>


=item B<-cropright> I<size>

All the crop options have been removed. Use -vf
crop=width:height:x:y instead.


=item B<-padtop> I<size>


=item B<-padbottom> I<size>


=item B<-padleft> I<size>


=item B<-padright> I<size>


=item B<-padcolor> I<hex_color>

All the pad options have been removed. Use -vf
pad=width:height:x:y:color instead.


=item B<-vn (>I<output>B<)>

Disable video recording.


=item B<-vcodec> I<codec> B<(>I<output>B<)>

Set the video codec. This is an alias for C<-codec:v>.


=item B<-pass[:>I<stream_specifier>B<]> I<n> B<(>I<output,per-stream>B<)>

Select the pass number (1 or 2). It is used to do two-pass
video encoding. The statistics of the video are recorded in the first
pass into a log file (see also the option -passlogfile),
and in the second pass that log file is used to generate the video
at the exact requested bitrate.
On pass 1, you may just deactivate audio and set output to null,
examples for Windows and Unix:
	
	ffmpeg -i foo.mov -c:v libxvid -pass 1 -an -f rawvideo -y NUL
	ffmpeg -i foo.mov -c:v libxvid -pass 1 -an -f rawvideo -y /dev/null



=item B<-passlogfile[:>I<stream_specifier>B<]> I<prefix> B<(>I<output,per-stream>B<)>

Set two-pass log file name prefix to I<prefix>, the default file name
prefix is ``ffmpeg2pass''. The complete file name will be
F<PREFIX-N.log>, where N is a number specific to the output
stream


=item B<-vlang> I<code>

Set the ISO 639 language code (3 letters) of the current video stream.


=item B<-vf> I<filter_graph> B<(>I<output>B<)>

I<filter_graph> is a description of the filter graph to apply to
the input video.
Use the option "-filters" to show all the available filters (including
also sources and sinks).  This is an alias for C<-filter:v>.


=back



=head2 Advanced Video Options



=over 4


=item B<-pix_fmt[:>I<stream_specifier>B<]> I<format> B<(>I<input/output,per-stream>B<)>

Set pixel format. Use C<-pix_fmts> to show all the supported
pixel formats.
If the selected pixel format can not be selected, ffmpeg will print a
warning and select the best pixel format supported by the encoder.
If I<pix_fmt> is prefixed by a C<+>, ffmpeg will exit with an error
if the requested pixel format can not be selected, and automatic conversions
inside filter graphs are disabled.
If I<pix_fmt> is a single C<+>, ffmpeg selects the same pixel format
as the input (or graph output) and automatic conversions are disabled.


=item B<-sws_flags> I<flags> B<(>I<input/output>B<)>

Set SwScaler flags.

=item B<-vdt> I<n>

Discard threshold.


=item B<-rc_override[:>I<stream_specifier>B<]> I<override> B<(>I<output,per-stream>B<)>

Rate control override for specific intervals, formatted as "int,int,int"
list separated with slashes. Two first values are the beginning and
end frame numbers, last one is quantizer to use if positive, or quality
factor if negative.


=item B<-deinterlace>

Deinterlace pictures.
This option is deprecated since the deinterlacing is very low quality.
Use the yadif filter with C<-filter:v yadif>.

=item B<-ilme>

Force interlacing support in encoder (MPEG-2 and MPEG-4 only).
Use this option if your input file is interlaced and you want
to keep the interlaced format for minimum losses.
The alternative is to deinterlace the input stream with
B<-deinterlace>, but deinterlacing introduces losses.

=item B<-psnr>

Calculate PSNR of compressed frames.

=item B<-vstats>

Dump video coding statistics to F<vstats_HHMMSS.log>.

=item B<-vstats_file> I<file>

Dump video coding statistics to I<file>.

=item B<-top[:>I<stream_specifier>B<]> I<n> B<(>I<output,per-stream>B<)>

top=1/bottom=0/auto=-1 field first

=item B<-dc> I<precision>

Intra_dc_precision.

=item B<-vtag> I<fourcc/tag> B<(>I<output>B<)>

Force video tag/fourcc. This is an alias for C<-tag:v>.

=item B<-qphist (>I<global>B<)>

Show QP histogram

=item B<-vbsf> I<bitstream_filter>

Deprecated see -bsf

=item B<-force_key_frames[:>I<stream_specifier>B<]> I<time>B<[,>I<time>B<...] (>I<output,per-stream>B<)>

Force key frames at the specified timestamps, more precisely at the first
frames after each specified time.
This option can be useful to ensure that a seek point is present at a
chapter mark or any other designated place in the output file.
The timestamps must be specified in ascending order.


=item B<-copyinkf[:>I<stream_specifier>B<] (>I<output,per-stream>B<)>

When doing stream copy, copy also non-key frames found at the
beginning.

=back



=head2 Audio Options



=over 4


=item B<-aframes> I<number> B<(>I<output>B<)>

Set the number of audio frames to record. This is an alias for C<-frames:a>.

=item B<-ar[:>I<stream_specifier>B<]> I<freq> B<(>I<input/output,per-stream>B<)>

Set the audio sampling frequency. For output streams it is set by
default to the frequency of the corresponding input stream. For input
streams this option only makes sense for audio grabbing devices and raw
demuxers and is mapped to the corresponding demuxer options.

=item B<-aq> I<q> B<(>I<output>B<)>

Set the audio quality (codec-specific, VBR). This is an alias for -q:a.

=item B<-ac[:>I<stream_specifier>B<]> I<channels> B<(>I<input/output,per-stream>B<)>

Set the number of audio channels. For output streams it is set by
default to the number of input audio channels. For input streams
this option only makes sense for audio grabbing devices and raw demuxers
and is mapped to the corresponding demuxer options.

=item B<-an (>I<output>B<)>

Disable audio recording.

=item B<-acodec> I<codec> B<(>I<input/output>B<)>

Set the audio codec. This is an alias for C<-codec:a>.

=item B<-sample_fmt[:>I<stream_specifier>B<]> I<sample_fmt> B<(>I<output,per-stream>B<)>

Set the audio sample format. Use C<-sample_fmts> to get a list
of supported sample formats.

=item B<-af> I<filter_graph> B<(>I<output>B<)>

I<filter_graph> is a description of the filter graph to apply to
the input audio.
Use the option "-filters" to show all the available filters (including
also sources and sinks).  This is an alias for C<-filter:a>.

=back



=head2 Advanced Audio options:



=over 4


=item B<-atag> I<fourcc/tag> B<(>I<output>B<)>

Force audio tag/fourcc. This is an alias for C<-tag:a>.

=item B<-absf> I<bitstream_filter>

Deprecated, see -bsf

=back



=head2 Subtitle options:



=over 4


=item B<-slang> I<code>

Set the ISO 639 language code (3 letters) of the current subtitle stream.

=item B<-scodec> I<codec> B<(>I<input/output>B<)>

Set the subtitle codec. This is an alias for C<-codec:s>.

=item B<-sn (>I<output>B<)>

Disable subtitle recording.

=item B<-sbsf> I<bitstream_filter>

Deprecated, see -bsf

=back



=head2 Advanced Subtitle options:



=over 4



=item B<-fix_sub_duration>

Fix subtitles durations. For each subtitle, wait for the next packet in the
same stream and adjust the duration of the first to avoid overlap. This is
necessary with some subtitles codecs, especially DVB subtitles, because the
duration in the original packet is only a rough estimate and the end is
actually marked by an empty subtitle frame. Failing to use this option when
necessary can result in exaggerated durations or muxing failures due to
non-monotonic timestamps.

Note that this option will delay the output of all data until the next
subtitle packet is decoded: it may increase memory consumption and latency a
lot.


=back



=head2 Advanced options



=over 4


=item B<-map [-]>I<input_file_id>B<[:>I<stream_specifier>B<][,>I<sync_file_id>B<[:>I<stream_specifier>B<]] |> I<[linklabel]> B<(>I<output>B<)>


Designate one or more input streams as a source for the output file. Each input
stream is identified by the input file index I<input_file_id> and
the input stream index I<input_stream_id> within the input
file. Both indices start at 0. If specified,
I<sync_file_id>:I<stream_specifier> sets which input stream
is used as a presentation sync reference.

The first C<-map> option on the command line specifies the
source for output stream 0, the second C<-map> option specifies
the source for output stream 1, etc.

A C<-> character before the stream identifier creates a "negative" mapping.
It disables matching streams from already created mappings.

An alternative I<[linklabel]> form will map outputs from complex filter
graphs (see the B<-filter_complex> option) to the output file.
I<linklabel> must correspond to a defined output link label in the graph.

For example, to map ALL streams from the first input file to output
	
	ffmpeg -i INPUT -map 0 output


For example, if you have two audio streams in the first input file,
these streams are identified by "0:0" and "0:1". You can use
C<-map> to select which streams to place in an output file. For
example:
	
	ffmpeg -i INPUT -map 0:1 out.wav

will map the input stream in F<INPUT> identified by "0:1" to
the (single) output stream in F<out.wav>.

For example, to select the stream with index 2 from input file
F<a.mov> (specified by the identifier "0:2"), and stream with
index 6 from input F<b.mov> (specified by the identifier "1:6"),
and copy them to the output file F<out.mov>:
	
	ffmpeg -i a.mov -i b.mov -c copy -map 0:2 -map 1:6 out.mov


To select all video and the third audio stream from an input file:
	
	ffmpeg -i INPUT -map 0:v -map 0:a:2 OUTPUT


To map all the streams except the second audio, use negative mappings
	
	ffmpeg -i INPUT -map 0 -map -0:a:1 OUTPUT


Note that using this option disables the default mappings for this output file.


=item B<-map_channel [>I<input_file_id>B<.>I<stream_specifier>B<.>I<channel_id>B<|-1][:>I<output_file_id>B<.>I<stream_specifier>B<]>

Map an audio channel from a given input to an output. If
I<output_file_id>.I<stream_specifier> is not set, the audio channel will
be mapped on all the audio streams.

Using "-1" instead of
I<input_file_id>.I<stream_specifier>.I<channel_id> will map a muted
channel.

For example, assuming I<INPUT> is a stereo audio file, you can switch the
two audio channels with the following command:
	
	ffmpeg -i INPUT -map_channel 0.0.1 -map_channel 0.0.0 OUTPUT


If you want to mute the first channel and keep the second:
	
	ffmpeg -i INPUT -map_channel -1 -map_channel 0.0.1 OUTPUT


The order of the "-map_channel" option specifies the order of the channels in
the output stream. The output channel layout is guessed from the number of
channels mapped (mono if one "-map_channel", stereo if two, etc.). Using "-ac"
in combination of "-map_channel" makes the channel gain levels to be updated if
input and output channel layouts don't match (for instance two "-map_channel"
options and "-ac 6").

You can also extract each channel of an input to specific outputs; the following
command extracts two channels of the I<INPUT> audio stream (file 0, stream 0)
to the respective I<OUTPUT_CH0> and I<OUTPUT_CH1> outputs:
	
	ffmpeg -i INPUT -map_channel 0.0.0 OUTPUT_CH0 -map_channel 0.0.1 OUTPUT_CH1


The following example splits the channels of a stereo input into two separate
streams, which are put into the same output file:
	
	ffmpeg -i stereo.wav -map 0:0 -map 0:0 -map_channel 0.0.0:0.0 -map_channel 0.0.1:0.1 -y out.ogg


Note that currently each output stream can only contain channels from a single
input stream; you can't for example use "-map_channel" to pick multiple input
audio channels contained in different streams (from the same or different files)
and merge them into a single output stream. It is therefore not currently
possible, for example, to turn two separate mono streams into a single stereo
stream. However splitting a stereo stream into two single channel mono streams
is possible.

If you need this feature, a possible workaround is to use the I<amerge>
filter. For example, if you need to merge a media (here F<input.mkv>) with 2
mono audio streams into one single stereo channel audio stream (and keep the
video stream), you can use the following command:
	
	ffmpeg -i input.mkv -filter_complex "[0:1] [0:2] amerge" -c:a pcm_s16le -c:v copy output.mkv



=item B<-map_metadata[:>I<metadata_spec_out>B<]> I<infile>B<[:>I<metadata_spec_in>B<] (>I<output,per-metadata>B<)>

Set metadata information of the next output file from I<infile>. Note that
those are file indices (zero-based), not filenames.
Optional I<metadata_spec_in/out> parameters specify, which metadata to copy.
A metadata specifier can have the following forms:

=over 4


=item I<g>

global metadata, i.e. metadata that applies to the whole file


=item I<s>B<[:>I<stream_spec>B<]>

per-stream metadata. I<stream_spec> is a stream specifier as described
in the Stream specifiers chapter. In an input metadata specifier, the first
matching stream is copied from. In an output metadata specifier, all matching
streams are copied to.


=item I<c>B<:>I<chapter_index>

per-chapter metadata. I<chapter_index> is the zero-based chapter index.


=item I<p>B<:>I<program_index>

per-program metadata. I<program_index> is the zero-based program index.

=back

If metadata specifier is omitted, it defaults to global.

By default, global metadata is copied from the first input file,
per-stream and per-chapter metadata is copied along with streams/chapters. These
default mappings are disabled by creating any mapping of the relevant type. A negative
file index can be used to create a dummy mapping that just disables automatic copying.

For example to copy metadata from the first stream of the input file to global metadata
of the output file:
	
	ffmpeg -i in.ogg -map_metadata 0:s:0 out.mp3


To do the reverse, i.e. copy global metadata to all audio streams:
	
	ffmpeg -i in.mkv -map_metadata:s:a 0:g out.mkv

Note that simple C<0> would work as well in this example, since global
metadata is assumed by default.


=item B<-map_chapters> I<input_file_index> B<(>I<output>B<)>

Copy chapters from input file with index I<input_file_index> to the next
output file. If no chapter mapping is specified, then chapters are copied from
the first input file with at least one chapter. Use a negative file index to
disable any chapter copying.

=item B<-debug> I<category>

Print specific debug info.
I<category> is a number or a string containing one of the following values:

=over 4


=item B<bitstream>


=item B<buffers>

picture buffer allocations

=item B<bugs>


=item B<dct_coeff>


=item B<er>

error recognition

=item B<mb_type>

macroblock (MB) type

=item B<mmco>

memory management control operations (H.264)

=item B<mv>

motion vector

=item B<pict>

picture info

=item B<pts>


=item B<qp>

per-block quantization parameter (QP)

=item B<rc>

rate control

=item B<skip>


=item B<startcode>


=item B<thread_ops>

threading operations

=item B<vis_mb_type>

visualize block types

=item B<vis_qp>

visualize quantization parameter (QP), lower QP are tinted greener

=back


=item B<-benchmark (>I<global>B<)>

Show benchmarking information at the end of an encode.
Shows CPU time used and maximum memory consumption.
Maximum memory consumption is not supported on all systems,
it will usually display as 0 if not supported.

=item B<-benchmark_all (>I<global>B<)>

Show benchmarking information during the encode.
Shows CPU time used in various steps (audio/video encode/decode).

=item B<-timelimit> I<duration> B<(>I<global>B<)>

Exit after ffmpeg has been running for I<duration> seconds.

=item B<-dump (>I<global>B<)>

Dump each input packet to stderr.

=item B<-hex (>I<global>B<)>

When dumping packets, also dump the payload.

=item B<-re (>I<input>B<)>

Read input at native frame rate. Mainly used to simulate a grab device.
By default B<ffmpeg> attempts to read the input(s) as fast as possible.
This option will slow down the reading of the input(s) to the native frame rate
of the input(s). It is useful for real-time output (e.g. live streaming). If
your input(s) is coming from some other live streaming source (through HTTP or
UDP for example) the server might already be in real-time, thus the option will
likely not be required. On the other hand, this is meaningful if your input(s)
is a file you are trying to push in real-time.

=item B<-loop_input>

Loop over the input stream. Currently it works only for image
streams. This option is used for automatic FFserver testing.
This option is deprecated, use -loop 1.

=item B<-loop_output> I<number_of_times>

Repeatedly loop output for formats that support looping such as animated GIF
(0 will loop the output infinitely).
This option is deprecated, use -loop.

=item B<-vsync> I<parameter>

Video sync method.
For compatibility reasons old values can be specified as numbers.
Newly added values will have to be specified as strings always.


=over 4


=item B<0, passthrough>

Each frame is passed with its timestamp from the demuxer to the muxer.

=item B<1, cfr>

Frames will be duplicated and dropped to achieve exactly the requested
constant framerate.

=item B<2, vfr>

Frames are passed through with their timestamp or dropped so as to
prevent 2 frames from having the same timestamp.

=item B<drop>

As passthrough but destroys all timestamps, making the muxer generate
fresh timestamps based on frame-rate.

=item B<-1, auto>

Chooses between 1 and 2 depending on muxer capabilities. This is the
default method.

=back


With -map you can select from which stream the timestamps should be
taken. You can leave either video or audio unchanged and sync the
remaining stream(s) to the unchanged one.


=item B<-async> I<samples_per_second>

Audio sync method. "Stretches/squeezes" the audio stream to match the timestamps,
the parameter is the maximum samples per second by which the audio is changed.
-async 1 is a special case where only the start of the audio stream is corrected
without any later correction.
This option has been deprecated. Use the C<asyncts> audio filter instead.

=item B<-copyts>

Copy timestamps from input to output.

=item B<-copytb> I<mode>

Specify how to set the encoder timebase when stream copying.  I<mode> is an
integer numeric value, and can assume one of the following values:


=over 4


=item B<1>

Use the demuxer timebase.

The time base is copied to the output encoder from the corresponding input
demuxer. This is sometimes required to avoid non monotonically increasing
timestamps when copying video streams with variable frame rate.


=item B<0>

Use the decoder timebase.

The time base is copied to the output encoder from the corresponding input
decoder.


=item B<-1>

Try to make the choice automatically, in order to generate a sane output.

=back


Default value is -1.


=item B<-shortest (>I<output>B<)>

Finish encoding when the shortest input stream ends.

=item B<-dts_delta_threshold>

Timestamp discontinuity delta threshold.

=item B<-muxdelay> I<seconds> B<(>I<input>B<)>

Set the maximum demux-decode delay.

=item B<-muxpreload> I<seconds> B<(>I<input>B<)>

Set the initial demux-decode delay.

=item B<-streamid> I<output-stream-index>B<:>I<new-value> B<(>I<output>B<)>

Assign a new stream-id value to an output stream. This option should be
specified prior to the output filename to which it applies.
For the situation where multiple output files exist, a streamid
may be reassigned to a different value.

For example, to set the stream 0 PID to 33 and the stream 1 PID to 36 for
an output mpegts file:
	
	ffmpeg -i infile -streamid 0:33 -streamid 1:36 out.ts



=item B<-bsf[:>I<stream_specifier>B<]> I<bitstream_filters> B<(>I<output,per-stream>B<)>

Set bitstream filters for matching streams. I<bistream_filters> is
a comma-separated list of bitstream filters. Use the C<-bsfs> option
to get the list of bitstream filters.
	
	ffmpeg -i h264.mp4 -c:v copy -bsf:v h264_mp4toannexb -an out.h264

	
	ffmpeg -i file.mov -an -vn -bsf:s mov2textsub -c:s copy -f rawvideo sub.txt



=item B<-tag[:>I<stream_specifier>B<]> I<codec_tag> B<(>I<per-stream>B<)>

Force a tag/fourcc for matching streams.


=item B<-timecode> I<hh>B<:>I<mm>B<:>I<ss>B<SEP>I<ff>

Specify Timecode for writing. I<SEP> is ':' for non drop timecode and ';'
(or '.') for drop.
	
	ffmpeg -i input.mpg -timecode 01:02:03.04 -r 30000/1001 -s ntsc output.mpg



=item B<-filter_complex> I<filtergraph> B<(>I<global>B<)>

Define a complex filter graph, i.e. one with arbitrary number of inputs and/or
outputs. For simple graphs -- those with one input and one output of the same
type -- see the B<-filter> options. I<filtergraph> is a description of
the filter graph, as described in Filtergraph syntax.

Input link labels must refer to input streams using the
C<[file_index:stream_specifier]> syntax (i.e. the same as B<-map>
uses). If I<stream_specifier> matches multiple streams, the first one will be
used. An unlabeled input will be connected to the first unused input stream of
the matching type.

Output link labels are referred to with B<-map>. Unlabeled outputs are
added to the first output file.

Note that with this option it is possible to use only lavfi sources without
normal input files.

For example, to overlay an image over video
	
	ffmpeg -i video.mkv -i image.png -filter_complex '[0:v][1:v]overlay[out]' -map
	'[out]' out.mkv

Here C<[0:v]> refers to the first video stream in the first input file,
which is linked to the first (main) input of the overlay filter. Similarly the
first video stream in the second input is linked to the second (overlay) input
of overlay.

Assuming there is only one video stream in each input file, we can omit input
labels, so the above is equivalent to
	
	ffmpeg -i video.mkv -i image.png -filter_complex 'overlay[out]' -map
	'[out]' out.mkv


Furthermore we can omit the output label and the single output from the filter
graph will be added to the output file automatically, so we can simply write
	
	ffmpeg -i video.mkv -i image.png -filter_complex 'overlay' out.mkv


To generate 5 seconds of pure red video using lavfi C<color> source:
	
	ffmpeg -filter_complex 'color=red' -t 5 out.mkv


=back


As a special exception, you can use a bitmap subtitle stream as input: it
will be converted into a video with the same size as the largest video in
the file, or 720×576 if no video is present. Note that this is an
experimental and temporary solution. It will be removed once libavfilter has
proper support for subtitles.

For example, to hardcode subtitles on top of a DVB-T recording stored in
MPEG-TS format, delaying the subtitles by 1 second:
	
	ffmpeg -i input.ts -filter_complex \
	  '[#0x2ef] setpts=PTS+1/TB [sub] ; [#0x2d0] [sub] overlay' \
	  -sn -map '#0x2dc' output.mkv

(0x2d0, 0x2dc and 0x2ef are the MPEG-TS PIDs of respectively the video,
audio and subtitles streams; 0:0, 0:3 and 0:7 would have worked too)


=head2 Preset files

A preset file contains a sequence of I<option>=I<value> pairs,
one for each line, specifying a sequence of options which would be
awkward to specify on the command line. Lines starting with the hash
('#') character are ignored and are used to provide comments. Check
the F<presets> directory in the FFmpeg source tree for examples.

Preset files are specified with the C<vpre>, C<apre>,
C<spre>, and C<fpre> options. The C<fpre> option takes the
filename of the preset instead of a preset name as input and can be
used for any kind of codec. For the C<vpre>, C<apre>, and
C<spre> options, the options specified in a preset file are
applied to the currently selected codec of the same type as the preset
option.

The argument passed to the C<vpre>, C<apre>, and C<spre>
preset options identifies the preset file to use according to the
following rules:

First ffmpeg searches for a file named I<arg>.ffpreset in the
directories F<$FFMPEG_DATADIR> (if set), and F<$HOME/.ffmpeg>, and in
the datadir defined at configuration time (usually F<PREFIX/share/ffmpeg>)
or in a F<ffpresets> folder along the executable on win32,
in that order. For example, if the argument is C<libvpx-1080p>, it will
search for the file F<libvpx-1080p.ffpreset>.

If no such file is found, then ffmpeg will search for a file named
I<codec_name>-I<arg>.ffpreset in the above-mentioned
directories, where I<codec_name> is the name of the codec to which
the preset file options will be applied. For example, if you select
the video codec with C<-vcodec libvpx> and use C<-vpre 1080p>,
then it will search for the file F<libvpx-1080p.ffpreset>.

=head1 TIPS



=over 4


=item *

For streaming at very low bitrate application, use a low frame rate
and a small GOP size. This is especially true for RealVideo where
the Linux player does not seem to be very fast, so it can miss
frames. An example is:

	
	ffmpeg -g 3 -r 3 -t 10 -b:v 50k -s qcif -f rv10 /tmp/b.rm



=item *

The parameter 'q' which is displayed while encoding is the current
quantizer. The value 1 indicates that a very good quality could
be achieved. The value 31 indicates the worst quality. If q=31 appears
too often, it means that the encoder cannot compress enough to meet
your bitrate. You must either increase the bitrate, decrease the
frame rate or decrease the frame size.


=item *

If your computer is not fast enough, you can speed up the
compression at the expense of the compression ratio. You can use
'-me zero' to speed up motion estimation, and '-g 0' to disable
motion estimation completely (you have only I-frames, which means it
is about as good as JPEG compression).


=item *

To have very low audio bitrates, reduce the sampling frequency
(down to 22050 Hz for MPEG audio, 22050 or 11025 for AC-3).


=item *

To have a constant quality (but a variable bitrate), use the option
'-qscale n' when 'n' is between 1 (excellent quality) and 31 (worst
quality).


=back


=head1 EXAMPLES



=head2 Preset files


A preset file contains a sequence of I<option=value> pairs, one for
each line, specifying a sequence of options which can be specified also on
the command line. Lines starting with the hash ('#') character are ignored and
are used to provide comments. Empty lines are also ignored. Check the
F<presets> directory in the FFmpeg source tree for examples.

Preset files are specified with the C<pre> option, this option takes a
preset name as input.  FFmpeg searches for a file named I<preset_name>.avpreset in
the directories F<$AVCONV_DATADIR> (if set), and F<$HOME/.ffmpeg>, and in
the data directory defined at configuration time (usually F<$PREFIX/share/ffmpeg>)
in that order.  For example, if the argument is C<libx264-max>, it will
search for the file F<libx264-max.avpreset>.


=head2 Video and Audio grabbing


If you specify the input format and device then ffmpeg can grab video
and audio directly.

	
	ffmpeg -f oss -i /dev/dsp -f video4linux2 -i /dev/video0 /tmp/out.mpg


Or with an ALSA audio source (mono input, card id 1) instead of OSS:
	
	ffmpeg -f alsa -ac 1 -i hw:1 -f video4linux2 -i /dev/video0 /tmp/out.mpg


Note that you must activate the right video source and channel before
launching ffmpeg with any TV viewer such as
 xawtv (C<http://linux.bytesex.org/xawtv/>) by Gerd Knorr. You also
have to set the audio recording levels correctly with a
standard mixer.


=head2 X11 grabbing


Grab the X11 display with ffmpeg via

	
	ffmpeg -f x11grab -s cif -r 25 -i :0.0 /tmp/out.mpg


0.0 is display.screen number of your X11 server, same as
the DISPLAY environment variable.

	
	ffmpeg -f x11grab -s cif -r 25 -i :0.0+10,20 /tmp/out.mpg


0.0 is display.screen number of your X11 server, same as the DISPLAY environment
variable. 10 is the x-offset and 20 the y-offset for the grabbing.


=head2 Video and Audio file format conversion


Any supported file format and protocol can serve as input to ffmpeg:

Examples:

=over 4


=item *

You can use YUV files as input:

	
	ffmpeg -i /tmp/test%d.Y /tmp/out.mpg


It will use the files:
	
	/tmp/test0.Y, /tmp/test0.U, /tmp/test0.V,
	/tmp/test1.Y, /tmp/test1.U, /tmp/test1.V, etc...


The Y files use twice the resolution of the U and V files. They are
raw files, without header. They can be generated by all decent video
decoders. You must specify the size of the image with the B<-s> option
if ffmpeg cannot guess it.


=item *

You can input from a raw YUV420P file:

	
	ffmpeg -i /tmp/test.yuv /tmp/out.avi


test.yuv is a file containing raw YUV planar data. Each frame is composed
of the Y plane followed by the U and V planes at half vertical and
horizontal resolution.


=item *

You can output to a raw YUV420P file:

	
	ffmpeg -i mydivx.avi hugefile.yuv



=item *

You can set several input files and output files:

	
	ffmpeg -i /tmp/a.wav -s 640x480 -i /tmp/a.yuv /tmp/a.mpg


Converts the audio file a.wav and the raw YUV video file a.yuv
to MPEG file a.mpg.


=item *

You can also do audio and video conversions at the same time:

	
	ffmpeg -i /tmp/a.wav -ar 22050 /tmp/a.mp2


Converts a.wav to MPEG audio at 22050 Hz sample rate.


=item *

You can encode to several formats at the same time and define a
mapping from input stream to output streams:

	
	ffmpeg -i /tmp/a.wav -map 0:a -b:a 64k /tmp/a.mp2 -map 0:a -b:a 128k /tmp/b.mp2


Converts a.wav to a.mp2 at 64 kbits and to b.mp2 at 128 kbits. '-map
file:index' specifies which input stream is used for each output
stream, in the order of the definition of output streams.


=item *

You can transcode decrypted VOBs:

	
	ffmpeg -i snatch_1.vob -f avi -c:v mpeg4 -b:v 800k -g 300 -bf 2 -c:a libmp3lame -b:a 128k snatch.avi


This is a typical DVD ripping example; the input is a VOB file, the
output an AVI file with MPEG-4 video and MP3 audio. Note that in this
command we use B-frames so the MPEG-4 stream is DivX5 compatible, and
GOP size is 300 which means one intra frame every 10 seconds for 29.97fps
input video. Furthermore, the audio stream is MP3-encoded so you need
to enable LAME support by passing C<--enable-libmp3lame> to configure.
The mapping is particularly useful for DVD transcoding
to get the desired audio language.

NOTE: To see the supported input formats, use C<ffmpeg -formats>.


=item *

You can extract images from a video, or create a video from many images:

For extracting images from a video:
	
	ffmpeg -i foo.avi -r 1 -s WxH -f image2 foo-%03d.jpeg


This will extract one video frame per second from the video and will
output them in files named F<foo-001.jpeg>, F<foo-002.jpeg>,
etc. Images will be rescaled to fit the new WxH values.

If you want to extract just a limited number of frames, you can use the
above command in combination with the -vframes or -t option, or in
combination with -ss to start extracting from a certain point in time.

For creating a video from many images:
	
	ffmpeg -f image2 -i foo-%03d.jpeg -r 12 -s WxH foo.avi


The syntax C<foo-%03d.jpeg> specifies to use a decimal number
composed of three digits padded with zeroes to express the sequence
number. It is the same syntax supported by the C printf function, but
only formats accepting a normal integer are suitable.

When importing an image sequence, -i also supports expanding
shell-like wildcard patterns (globbing) internally, by selecting the
image2-specific C<-pattern_type glob> option.

For example, for creating a video from filenames matching the glob pattern
C<foo-*.jpeg>:
	
	ffmpeg -f image2 -pattern_type glob -i 'foo-*.jpeg' -r 12 -s WxH foo.avi



=item *

You can put many streams of the same type in the output:

	
	ffmpeg -i test1.avi -i test2.avi -map 0.3 -map 0.2 -map 0.1 -map 0.0 -c copy test12.nut


The resulting output file F<test12.avi> will contain first four streams from
the input file in reverse order.


=item *

To force CBR video output:
	
	ffmpeg -i myfile.avi -b 4000k -minrate 4000k -maxrate 4000k -bufsize 1835k out.m2v



=item *

The four options lmin, lmax, mblmin and mblmax use 'lambda' units,
but you may use the QP2LAMBDA constant to easily convert from 'q' units:
	
	ffmpeg -i src.ext -lmax 21*QP2LAMBDA dst.ext



=back


=head1 SYNTAX


When evaluating specific formats, FFmpeg uses internal library parsing
functions, shared by the tools. This section documents the syntax of
some of these formats.



=head2 Date


The accepted syntax is:
	
	[(YYYY-MM-DD|YYYYMMDD)[T|t| ]]((HH:MM:SS[.m...]]])|(HHMMSS[.m...]]]))[Z]
	now


If the value is "now" it takes the current time.

Time is local time unless Z is appended, in which case it is
interpreted as UTC.
If the year-month-day part is not specified it takes the current
year-month-day.



=head2 Time duration


The accepted syntax is:
	
	[-]HH:MM:SS[.m...]
	[-]S+[.m...]


I<HH> expresses the number of hours, I<MM> the number a of minutes
and I<SS> the number of seconds.



=head2 Video size

Specify the size of the sourced video, it may be a string of the form
I<width>xI<height>, or the name of a size abbreviation.

The following abbreviations are recognized:

=over 4


=item B<sqcif>

128x96

=item B<qcif>

176x144

=item B<cif>

352x288

=item B<4cif>

704x576

=item B<16cif>

1408x1152

=item B<qqvga>

160x120

=item B<qvga>

320x240

=item B<vga>

640x480

=item B<svga>

800x600

=item B<xga>

1024x768

=item B<uxga>

1600x1200

=item B<qxga>

2048x1536

=item B<sxga>

1280x1024

=item B<qsxga>

2560x2048

=item B<hsxga>

5120x4096

=item B<wvga>

852x480

=item B<wxga>

1366x768

=item B<wsxga>

1600x1024

=item B<wuxga>

1920x1200

=item B<woxga>

2560x1600

=item B<wqsxga>

3200x2048

=item B<wquxga>

3840x2400

=item B<whsxga>

6400x4096

=item B<whuxga>

7680x4800

=item B<cga>

320x200

=item B<ega>

640x350

=item B<hd480>

852x480

=item B<hd720>

1280x720

=item B<hd1080>

1920x1080

=back




=head2 Video rate


Specify the frame rate of a video, expressed as the number of frames
generated per second. It has to be a string in the format
I<frame_rate_num>/I<frame_rate_den>, an integer number, a float
number or a valid video frame rate abbreviation.

The following abbreviations are recognized:

=over 4


=item B<ntsc>

30000/1001

=item B<pal>

25/1

=item B<qntsc>

30000/1

=item B<qpal>

25/1

=item B<sntsc>

30000/1

=item B<spal>

25/1

=item B<film>

24/1

=item B<ntsc-film>

24000/1

=back




=head2 Ratio


A ratio can be expressed as an expression, or in the form
I<numerator>:I<denominator>.

Note that a ratio with infinite (1/0) or negative value is
considered valid, so you should check on the returned value if you
want to exclude those values.

The undefined value can be expressed using the "0:0" string.



=head2 Color


It can be the name of a color (case insensitive match) or a
[0x|#]RRGGBB[AA] sequence, possibly followed by "@" and a string
representing the alpha component.

The alpha component may be a string composed by "0x" followed by an
hexadecimal number or a decimal number between 0.0 and 1.0, which
represents the opacity value (0x00/0.0 means completely transparent,
0xff/1.0 completely opaque).
If the alpha component is not specified then 0xff is assumed.

The string "random" will result in a random color.


=head1 EXPRESSION EVALUATION


When evaluating an arithmetic expression, FFmpeg uses an internal
formula evaluator, implemented through the F<libavutil/eval.h>
interface.

An expression may contain unary, binary operators, constants, and
functions.

Two expressions I<expr1> and I<expr2> can be combined to form
another expression "I<expr1>;I<expr2>".
I<expr1> and I<expr2> are evaluated in turn, and the new
expression evaluates to the value of I<expr2>.

The following binary operators are available: C<+>, C<->,
C<*>, C</>, C<^>.

The following unary operators are available: C<+>, C<->.

The following functions are available:

=over 4


=item B<sinh(x)>

Compute hyperbolic sine of I<x>.


=item B<cosh(x)>

Compute hyperbolic cosine of I<x>.


=item B<tanh(x)>

Compute hyperbolic tangent of I<x>.


=item B<sin(x)>

Compute sine of I<x>.


=item B<cos(x)>

Compute cosine of I<x>.


=item B<tan(x)>

Compute tangent of I<x>.


=item B<atan(x)>

Compute arctangent of I<x>.


=item B<asin(x)>

Compute arcsine of I<x>.


=item B<acos(x)>

Compute arccosine of I<x>.


=item B<exp(x)>

Compute exponential of I<x> (with base C<e>, the Euler's number).


=item B<log(x)>

Compute natural logarithm of I<x>.


=item B<abs(x)>

Compute absolute value of I<x>.


=item B<squish(x)>

Compute expression C<1/(1 + exp(4*x))>.


=item B<gauss(x)>

Compute Gauss function of I<x>, corresponding to
C<exp(-x*x/2) / sqrt(2*PI)>.


=item B<isinf(x)>

Return 1.0 if I<x> is +/-INFINITY, 0.0 otherwise.


=item B<isnan(x)>

Return 1.0 if I<x> is NAN, 0.0 otherwise.


=item B<mod(x, y)>

Compute the remainder of division of I<x> by I<y>.


=item B<max(x, y)>

Return the maximum between I<x> and I<y>.


=item B<min(x, y)>

Return the maximum between I<x> and I<y>.


=item B<eq(x, y)>

Return 1 if I<x> and I<y> are equivalent, 0 otherwise.


=item B<gte(x, y)>

Return 1 if I<x> is greater than or equal to I<y>, 0 otherwise.


=item B<gt(x, y)>

Return 1 if I<x> is greater than I<y>, 0 otherwise.


=item B<lte(x, y)>

Return 1 if I<x> is lesser than or equal to I<y>, 0 otherwise.


=item B<lt(x, y)>

Return 1 if I<x> is lesser than I<y>, 0 otherwise.


=item B<st(var, expr)>

Allow to store the value of the expression I<expr> in an internal
variable. I<var> specifies the number of the variable where to
store the value, and it is a value ranging from 0 to 9. The function
returns the value stored in the internal variable.
Note, Variables are currently not shared between expressions.


=item B<ld(var)>

Allow to load the value of the internal variable with number
I<var>, which was previously stored with st(I<var>, I<expr>).
The function returns the loaded value.


=item B<while(cond, expr)>

Evaluate expression I<expr> while the expression I<cond> is
non-zero, and returns the value of the last I<expr> evaluation, or
NAN if I<cond> was always false.


=item B<ceil(expr)>

Round the value of expression I<expr> upwards to the nearest
integer. For example, "ceil(1.5)" is "2.0".


=item B<floor(expr)>

Round the value of expression I<expr> downwards to the nearest
integer. For example, "floor(-1.5)" is "-2.0".


=item B<trunc(expr)>

Round the value of expression I<expr> towards zero to the nearest
integer. For example, "trunc(-1.5)" is "-1.0".


=item B<sqrt(expr)>

Compute the square root of I<expr>. This is equivalent to
"(I<expr>)^.5".


=item B<not(expr)>

Return 1.0 if I<expr> is zero, 0.0 otherwise.


=item B<pow(x, y)>

Compute the power of I<x> elevated I<y>, it is equivalent to
"(I<x>)^(I<y>)".


=item B<random(x)>

Return a pseudo random value between 0.0 and 1.0. I<x> is the index of the
internal variable which will be used to save the seed/state.


=item B<hypot(x, y)>

This function is similar to the C function with the same name; it returns
"sqrt(I<x>*I<x> + I<y>*I<y>)", the length of the hypotenuse of a
right triangle with sides of length I<x> and I<y>, or the distance of the
point (I<x>, I<y>) from the origin.


=item B<gcd(x, y)>

Return the greatest common divisor of I<x> and I<y>. If both I<x> and
I<y> are 0 or either or both are less than zero then behavior is undefined.


=item B<if(x, y)>

Evaluate I<x>, and if the result is non-zero return the result of
the evaluation of I<y>, return 0 otherwise.


=item B<ifnot(x, y)>

Evaluate I<x>, and if the result is zero return the result of the
evaluation of I<y>, return 0 otherwise.


=item B<taylor(expr, x) taylor(expr, x, id)>

Evaluate a taylor series at x.
expr represents the LD(id)-th derivates of f(x) at 0. If id is not specified
then 0 is assumed.
note, when you have the derivatives at y instead of 0
taylor(expr, x-y) can be used
When the series does not converge the results are undefined.


=item B<root(expr, max)>

Finds x where f(x)=0 in the interval 0..max.
f() must be continuous or the result is undefined.

=back


The following constants are available:

=over 4


=item B<PI>

area of the unit disc, approximately 3.14

=item B<E>

exp(1) (Euler's number), approximately 2.718

=item B<PHI>

golden ratio (1+sqrt(5))/2, approximately 1.618

=back


Assuming that an expression is considered "true" if it has a non-zero
value, note that:

C<*> works like AND

C<+> works like OR

and the construct:
	
	if A then B else C

is equivalent to
	
	if(A,B) + ifnot(A,C)


In your C code, you can extend the list of unary and binary functions,
and define recognized constants, so that they are available for your
expressions.

The evaluator also recognizes the International System number
postfixes. If 'i' is appended after the postfix, powers of 2 are used
instead of powers of 10. The 'B' postfix multiplies the value for 8,
and can be appended after another postfix or used alone. This allows
using for example 'KB', 'MiB', 'G' and 'B' as postfix.

Follows the list of available International System postfixes, with
indication of the corresponding powers of 10 and of 2.

=over 4


=item B<y>

-24 / -80

=item B<z>

-21 / -70

=item B<a>

-18 / -60

=item B<f>

-15 / -50

=item B<p>

-12 / -40

=item B<n>

-9 / -30

=item B<u>

-6 / -20

=item B<m>

-3 / -10

=item B<c>

-2

=item B<d>

-1

=item B<h>

2

=item B<k>

3 / 10

=item B<K>

3 / 10

=item B<M>

6 / 20

=item B<G>

9 / 30

=item B<T>

12 / 40

=item B<P>

15 / 40

=item B<E>

18 / 50

=item B<Z>

21 / 60

=item B<Y>

24 / 70

=back



=head1 DECODERS


Decoders are configured elements in FFmpeg which allow the decoding of
multimedia streams.

When you configure your FFmpeg build, all the supported native decoders
are enabled by default. Decoders requiring an external library must be enabled
manually via the corresponding C<--enable-lib> option. You can list all
available decoders using the configure option C<--list-decoders>.

You can disable all the decoders with the configure option
C<--disable-decoders> and selectively enable / disable single decoders
with the options C<--enable-decoder=I<DECODER>> /
C<--disable-decoder=I<DECODER>>.

The option C<-codecs> of the ff* tools will display the list of
enabled decoders.


=head1 VIDEO DECODERS


A description of some of the currently available video decoders
follows.


=head2 rawvideo


Raw video decoder.

This decoder decodes rawvideo streams.


=head3 Options



=over 4


=item B<top> I<top_field_first>

Specify the assumed field type of the input video.

=over 4


=item B<-1>

the video is assumed to be progressive (default)

=item B<0>

bottom-field-first is assumed

=item B<1>

top-field-first is assumed

=back



=back



=head1 AUDIO DECODERS



=head2 ffwavesynth


Internal wave synthetizer.

This decoder generates wave patterns according to predefined sequences. Its
use is purely internal and the format of the data it accepts is not publicly
documented.


=head1 ENCODERS


Encoders are configured elements in FFmpeg which allow the encoding of
multimedia streams.

When you configure your FFmpeg build, all the supported native encoders
are enabled by default. Encoders requiring an external library must be enabled
manually via the corresponding C<--enable-lib> option. You can list all
available encoders using the configure option C<--list-encoders>.

You can disable all the encoders with the configure option
C<--disable-encoders> and selectively enable / disable single encoders
with the options C<--enable-encoder=I<ENCODER>> /
C<--disable-encoder=I<ENCODER>>.

The option C<-codecs> of the ff* tools will display the list of
enabled encoders.


=head1 AUDIO ENCODERS


A description of some of the currently available audio encoders
follows.


=head2 ac3 and ac3_fixed


AC-3 audio encoders.

These encoders implement part of ATSC A/52:2010 and ETSI TS 102 366, as well as
the undocumented RealAudio 3 (a.k.a. dnet).

The I<ac3> encoder uses floating-point math, while the I<ac3_fixed>
encoder only uses fixed-point integer math. This does not mean that one is
always faster, just that one or the other may be better suited to a
particular system. The floating-point encoder will generally produce better
quality audio for a given bitrate. The I<ac3_fixed> encoder is not the
default codec for any of the output formats, so it must be specified explicitly
using the option C<-acodec ac3_fixed> in order to use it.


=head3 AC-3 Metadata


The AC-3 metadata options are used to set parameters that describe the audio,
but in most cases do not affect the audio encoding itself. Some of the options
do directly affect or influence the decoding and playback of the resulting
bitstream, while others are just for informational purposes. A few of the
options will add bits to the output stream that could otherwise be used for
audio data, and will thus affect the quality of the output. Those will be
indicated accordingly with a note in the option list below.

These parameters are described in detail in several publicly-available
documents.

=over 4


=item *<A/52:2010 - Digital Audio Compression (AC-3) (E-AC-3) Standard (C<http://www.atsc.org/cms/standards/a_52-2010.pdf>)>


=item *<A/54 - Guide to the Use of the ATSC Digital Television Standard (C<http://www.atsc.org/cms/standards/a_54a_with_corr_1.pdf>)>


=item *<Dolby Metadata Guide (C<http://www.dolby.com/uploadedFiles/zz-_Shared_Assets/English_PDFs/Professional/18_Metadata.Guide.pdf>)>


=item *<Dolby Digital Professional Encoding Guidelines (C<http://www.dolby.com/uploadedFiles/zz-_Shared_Assets/English_PDFs/Professional/46_DDEncodingGuidelines.pdf>)>


=back



=head4 Metadata Control Options



=over 4



=item B<-per_frame_metadata> I<boolean>

Allow Per-Frame Metadata. Specifies if the encoder should check for changing
metadata for each frame.

=over 4


=item B<0>

The metadata values set at initialization will be used for every frame in the
stream. (default)

=item B<1>

Metadata values can be changed before encoding each frame.

=back



=back



=head4 Downmix Levels



=over 4



=item B<-center_mixlev> I<level>

Center Mix Level. The amount of gain the decoder should apply to the center
channel when downmixing to stereo. This field will only be written to the
bitstream if a center channel is present. The value is specified as a scale
factor. There are 3 valid values:

=over 4


=item B<0.707>

Apply -3dB gain

=item B<0.595>

Apply -4.5dB gain (default)

=item B<0.500>

Apply -6dB gain

=back



=item B<-surround_mixlev> I<level>

Surround Mix Level. The amount of gain the decoder should apply to the surround
channel(s) when downmixing to stereo. This field will only be written to the
bitstream if one or more surround channels are present. The value is specified
as a scale factor.  There are 3 valid values:

=over 4


=item B<0.707>

Apply -3dB gain

=item B<0.500>

Apply -6dB gain (default)

=item B<0.000>

Silence Surround Channel(s)

=back



=back



=head4 Audio Production Information

Audio Production Information is optional information describing the mixing
environment.  Either none or both of the fields are written to the bitstream.


=over 4



=item B<-mixing_level> I<number>

Mixing Level. Specifies peak sound pressure level (SPL) in the production
environment when the mix was mastered. Valid values are 80 to 111, or -1 for
unknown or not indicated. The default value is -1, but that value cannot be
used if the Audio Production Information is written to the bitstream. Therefore,
if the C<room_type> option is not the default value, the C<mixing_level>
option must not be -1.


=item B<-room_type> I<type>

Room Type. Describes the equalization used during the final mixing session at
the studio or on the dubbing stage. A large room is a dubbing stage with the
industry standard X-curve equalization; a small room has flat equalization.
This field will not be written to the bitstream if both the C<mixing_level>
option and the C<room_type> option have the default values.

=over 4


=item B<0>


=item B<notindicated>

Not Indicated (default)

=item B<1>


=item B<large>

Large Room

=item B<2>


=item B<small>

Small Room

=back



=back



=head4 Other Metadata Options



=over 4



=item B<-copyright> I<boolean>

Copyright Indicator. Specifies whether a copyright exists for this audio.

=over 4


=item B<0>


=item B<off>

No Copyright Exists (default)

=item B<1>


=item B<on>

Copyright Exists

=back



=item B<-dialnorm> I<value>

Dialogue Normalization. Indicates how far the average dialogue level of the
program is below digital 100% full scale (0 dBFS). This parameter determines a
level shift during audio reproduction that sets the average volume of the
dialogue to a preset level. The goal is to match volume level between program
sources. A value of -31dB will result in no volume level change, relative to
the source volume, during audio reproduction. Valid values are whole numbers in
the range -31 to -1, with -31 being the default.


=item B<-dsur_mode> I<mode>

Dolby Surround Mode. Specifies whether the stereo signal uses Dolby Surround
(Pro Logic). This field will only be written to the bitstream if the audio
stream is stereo. Using this option does B<NOT> mean the encoder will actually
apply Dolby Surround processing.

=over 4


=item B<0>


=item B<notindicated>

Not Indicated (default)

=item B<1>


=item B<off>

Not Dolby Surround Encoded

=item B<2>


=item B<on>

Dolby Surround Encoded

=back



=item B<-original> I<boolean>

Original Bit Stream Indicator. Specifies whether this audio is from the
original source and not a copy.

=over 4


=item B<0>


=item B<off>

Not Original Source

=item B<1>


=item B<on>

Original Source (default)

=back



=back



=head3 Extended Bitstream Information

The extended bitstream options are part of the Alternate Bit Stream Syntax as
specified in Annex D of the A/52:2010 standard. It is grouped into 2 parts.
If any one parameter in a group is specified, all values in that group will be
written to the bitstream.  Default values are used for those that are written
but have not been specified.  If the mixing levels are written, the decoder
will use these values instead of the ones specified in the C<center_mixlev>
and C<surround_mixlev> options if it supports the Alternate Bit Stream
Syntax.


=head4 Extended Bitstream Information - Part 1



=over 4



=item B<-dmix_mode> I<mode>

Preferred Stereo Downmix Mode. Allows the user to select either Lt/Rt
(Dolby Surround) or Lo/Ro (normal stereo) as the preferred stereo downmix mode.

=over 4


=item B<0>


=item B<notindicated>

Not Indicated (default)

=item B<1>


=item B<ltrt>

Lt/Rt Downmix Preferred

=item B<2>


=item B<loro>

Lo/Ro Downmix Preferred

=back



=item B<-ltrt_cmixlev> I<level>

Lt/Rt Center Mix Level. The amount of gain the decoder should apply to the
center channel when downmixing to stereo in Lt/Rt mode.

=over 4


=item B<1.414>

Apply +3dB gain

=item B<1.189>

Apply +1.5dB gain

=item B<1.000>

Apply 0dB gain

=item B<0.841>

Apply -1.5dB gain

=item B<0.707>

Apply -3.0dB gain

=item B<0.595>

Apply -4.5dB gain (default)

=item B<0.500>

Apply -6.0dB gain

=item B<0.000>

Silence Center Channel

=back



=item B<-ltrt_surmixlev> I<level>

Lt/Rt Surround Mix Level. The amount of gain the decoder should apply to the
surround channel(s) when downmixing to stereo in Lt/Rt mode.

=over 4


=item B<0.841>

Apply -1.5dB gain

=item B<0.707>

Apply -3.0dB gain

=item B<0.595>

Apply -4.5dB gain

=item B<0.500>

Apply -6.0dB gain (default)

=item B<0.000>

Silence Surround Channel(s)

=back



=item B<-loro_cmixlev> I<level>

Lo/Ro Center Mix Level. The amount of gain the decoder should apply to the
center channel when downmixing to stereo in Lo/Ro mode.

=over 4


=item B<1.414>

Apply +3dB gain

=item B<1.189>

Apply +1.5dB gain

=item B<1.000>

Apply 0dB gain

=item B<0.841>

Apply -1.5dB gain

=item B<0.707>

Apply -3.0dB gain

=item B<0.595>

Apply -4.5dB gain (default)

=item B<0.500>

Apply -6.0dB gain

=item B<0.000>

Silence Center Channel

=back



=item B<-loro_surmixlev> I<level>

Lo/Ro Surround Mix Level. The amount of gain the decoder should apply to the
surround channel(s) when downmixing to stereo in Lo/Ro mode.

=over 4


=item B<0.841>

Apply -1.5dB gain

=item B<0.707>

Apply -3.0dB gain

=item B<0.595>

Apply -4.5dB gain

=item B<0.500>

Apply -6.0dB gain (default)

=item B<0.000>

Silence Surround Channel(s)

=back



=back



=head4 Extended Bitstream Information - Part 2



=over 4



=item B<-dsurex_mode> I<mode>

Dolby Surround EX Mode. Indicates whether the stream uses Dolby Surround EX
(7.1 matrixed to 5.1). Using this option does B<NOT> mean the encoder will actually
apply Dolby Surround EX processing.

=over 4


=item B<0>


=item B<notindicated>

Not Indicated (default)

=item B<1>


=item B<on>

Dolby Surround EX Off

=item B<2>


=item B<off>

Dolby Surround EX On

=back



=item B<-dheadphone_mode> I<mode>

Dolby Headphone Mode. Indicates whether the stream uses Dolby Headphone
encoding (multi-channel matrixed to 2.0 for use with headphones). Using this
option does B<NOT> mean the encoder will actually apply Dolby Headphone
processing.

=over 4


=item B<0>


=item B<notindicated>

Not Indicated (default)

=item B<1>


=item B<on>

Dolby Headphone Off

=item B<2>


=item B<off>

Dolby Headphone On

=back



=item B<-ad_conv_type> I<type>

A/D Converter Type. Indicates whether the audio has passed through HDCD A/D
conversion.

=over 4


=item B<0>


=item B<standard>

Standard A/D Converter (default)

=item B<1>


=item B<hdcd>

HDCD A/D Converter

=back



=back



=head3 Other AC-3 Encoding Options



=over 4



=item B<-stereo_rematrixing> I<boolean>

Stereo Rematrixing. Enables/Disables use of rematrixing for stereo input. This
is an optional AC-3 feature that increases quality by selectively encoding
the left/right channels as mid/side. This option is enabled by default, and it
is highly recommended that it be left as enabled except for testing purposes.


=back



=head3 Floating-Point-Only AC-3 Encoding Options


These options are only valid for the floating-point encoder and do not exist
for the fixed-point encoder due to the corresponding features not being
implemented in fixed-point.


=over 4



=item B<-channel_coupling> I<boolean>

Enables/Disables use of channel coupling, which is an optional AC-3 feature
that increases quality by combining high frequency information from multiple
channels into a single channel. The per-channel high frequency information is
sent with less accuracy in both the frequency and time domains. This allows
more bits to be used for lower frequencies while preserving enough information
to reconstruct the high frequencies. This option is enabled by default for the
floating-point encoder and should generally be left as enabled except for
testing purposes or to increase encoding speed.

=over 4


=item B<-1>


=item B<auto>

Selected by Encoder (default)

=item B<0>


=item B<off>

Disable Channel Coupling

=item B<1>


=item B<on>

Enable Channel Coupling

=back



=item B<-cpl_start_band> I<number>

Coupling Start Band. Sets the channel coupling start band, from 1 to 15. If a
value higher than the bandwidth is used, it will be reduced to 1 less than the
coupling end band. If I<auto> is used, the start band will be determined by
the encoder based on the bit rate, sample rate, and channel layout. This option
has no effect if channel coupling is disabled.

=over 4


=item B<-1>


=item B<auto>

Selected by Encoder (default)

=back



=back



=head1 VIDEO ENCODERS


A description of some of the currently available video encoders
follows.


=head2 libvpx


VP8 format supported through libvpx.

Requires the presence of the libvpx headers and library during configuration.
You need to explicitly configure the build with C<--enable-libvpx>.


=head3 Options


Mapping from FFmpeg to libvpx options with conversion notes in parentheses.


=over 4



=item B<threads>

g_threads


=item B<profile>

g_profile


=item B<vb>

rc_target_bitrate


=item B<g>

kf_max_dist


=item B<keyint_min>

kf_min_dist


=item B<qmin>

rc_min_quantizer


=item B<qmax>

rc_max_quantizer


=item B<bufsize, vb>

rc_buf_sz
C<(bufsize * 1000 / vb)>

rc_buf_optimal_sz
C<(bufsize * 1000 / vb * 5 / 6)>


=item B<rc_init_occupancy, vb>

rc_buf_initial_sz
C<(rc_init_occupancy * 1000 / vb)>


=item B<rc_buffer_aggressivity>

rc_undershoot_pct


=item B<skip_threshold>

rc_dropframe_thresh


=item B<qcomp>

rc_2pass_vbr_bias_pct


=item B<maxrate, vb>

rc_2pass_vbr_maxsection_pct
C<(maxrate * 100 / vb)>


=item B<minrate, vb>

rc_2pass_vbr_minsection_pct
C<(minrate * 100 / vb)>


=item B<minrate, maxrate, vb>

C<VPX_CBR>
C<(minrate == maxrate == vb)>


=item B<crf>

C<VPX_CQ>, C<VP8E_SET_CQ_LEVEL>


=item B<quality>


=over 4


=item I<best>

C<VPX_DL_BEST_QUALITY>

=item I<good>

C<VPX_DL_GOOD_QUALITY>

=item I<realtime>

C<VPX_DL_REALTIME>

=back



=item B<speed>

C<VP8E_SET_CPUUSED>


=item B<nr>

C<VP8E_SET_NOISE_SENSITIVITY>


=item B<mb_threshold>

C<VP8E_SET_STATIC_THRESHOLD>


=item B<slices>

C<VP8E_SET_TOKEN_PARTITIONS>


=item B<max-intra-rate>

C<VP8E_SET_MAX_INTRA_BITRATE_PCT>


=item B<force_key_frames>

C<VPX_EFLAG_FORCE_KF>


=item B<Alternate reference frame related>


=over 4


=item B<vp8flags altref>

C<VP8E_SET_ENABLEAUTOALTREF>

=item I<arnr_max_frames>

C<VP8E_SET_ARNR_MAXFRAMES>

=item I<arnr_type>

C<VP8E_SET_ARNR_TYPE>

=item I<arnr_strength>

C<VP8E_SET_ARNR_STRENGTH>

=item I<rc_lookahead>

g_lag_in_frames

=back



=item B<vp8flags error_resilient>

g_error_resilient


=back


For more information about libvpx see:
E<lt>B<http://www.webmproject.org/>E<gt>


=head2 libx264


H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10 format supported through
libx264.

Requires the presence of the libx264 headers and library during
configuration. You need to explicitly configure the build with
C<--enable-libx264>.


=head3 Options



=over 4



=item B<preset> I<preset_name>

Set the encoding preset.


=item B<tune> I<tune_name>

Tune the encoding params.


=item B<fastfirstpass> I<bool>

Use fast settings when encoding first pass, default value is 1.


=item B<profile> I<profile_name>

Set profile restrictions.


=item B<level> I<level>

Specify level (as defined by Annex A).
Deprecated in favor of I<x264opts>.


=item B<passlogfile> I<filename>

Specify filename for 2 pass stats.
Deprecated in favor of I<x264opts> (see I<stats> libx264 option).


=item B<wpredp> I<wpred_type>

Specify Weighted prediction for P-frames.
Deprecated in favor of I<x264opts> (see I<weightp> libx264 option).


=item B<x264opts> I<options>

Allow to set any x264 option, see x264 --fullhelp for a list.

I<options> is a list of I<key>=I<value> couples separated by
":".

=back


For example to specify libx264 encoding options with B<ffmpeg>:
	
	ffmpeg -i foo.mpg -vcodec libx264 -x264opts keyint=123:min-keyint=20 -an out.mkv


For more information about libx264 and the supported options see:
E<lt>B<http://www.videolan.org/developers/x264.html>E<gt>


=head1 DEMUXERS


Demuxers are configured elements in FFmpeg which allow to read the
multimedia streams from a particular type of file.

When you configure your FFmpeg build, all the supported demuxers
are enabled by default. You can list all available ones using the
configure option "--list-demuxers".

You can disable all the demuxers using the configure option
"--disable-demuxers", and selectively enable a single demuxer with
the option "--enable-demuxer=I<DEMUXER>", or disable it
with the option "--disable-demuxer=I<DEMUXER>".

The option "-formats" of the ff* tools will display the list of
enabled demuxers.

The description of some of the currently available demuxers follows.


=head2 image2


Image file demuxer.

This demuxer reads from a list of image files specified by a pattern.
The syntax and meaning of the pattern is specified by the
option I<pattern_type>.

The pattern may contain a suffix which is used to automatically
determine the format of the images contained in the files.

The size, the pixel format, and the format of each image must be the
same for all the files in the sequence.

This demuxer accepts the following options:

=over 4


=item B<framerate>

Set the framerate for the video stream. It defaults to 25.

=item B<loop>

If set to 1, loop over the input. Default value is 0.

=item B<pattern_type>

Select the pattern type used to interpret the provided filename.

I<pattern_type> accepts one of the following values.

=over 4


=item B<sequence>

Select a sequence pattern type, used to specify a sequence of files
indexed by sequential numbers.

A sequence pattern may contain the string "%d" or "%0I<N>d", which
specifies the position of the characters representing a sequential
number in each filename matched by the pattern. If the form
"%d0I<N>d" is used, the string representing the number in each
filename is 0-padded and I<N> is the total number of 0-padded
digits representing the number. The literal character '%' can be
specified in the pattern with the string "%%".

If the sequence pattern contains "%d" or "%0I<N>d", the first filename of
the file list specified by the pattern must contain a number
inclusively contained between I<start_number> and
I<start_number>+I<start_number_range>-1, and all the following
numbers must be sequential.

For example the pattern "img-%03d.bmp" will match a sequence of
filenames of the form F<img-001.bmp>, F<img-002.bmp>, ...,
F<img-010.bmp>, etc.; the pattern "i%%m%%g-%d.jpg" will match a
sequence of filenames of the form F<i%m%g-1.jpg>,
F<i%m%g-2.jpg>, ..., F<i%m%g-10.jpg>, etc.

Note that the pattern must not necessarily contain "%d" or
"%0I<N>d", for example to convert a single image file
F<img.jpeg> you can employ the command:
	
	ffmpeg -i img.jpeg img.png



=item B<glob>

Select a glob wildcard pattern type.

The pattern is interpreted like a C<glob()> pattern. This is only
selectable if libavformat was compiled with globbing support.


=item B<glob_sequence> I<(deprecated, will be removed)>

Select a mixed glob wildcard/sequence pattern.

If your version of libavformat was compiled with globbing support, and
the provided pattern contains at least one glob meta character among
C<%*?[]{}> that is preceded by an unescaped "%", the pattern is
interpreted like a C<glob()> pattern, otherwise it is interpreted
like a sequence pattern.

All glob special characters C<%*?[]{}> must be prefixed
with "%". To escape a literal "%" you shall use "%%".

For example the pattern C<foo-%*.jpeg> will match all the
filenames prefixed by "foo-" and terminating with ".jpeg", and
C<foo-%?%?%?.jpeg> will match all the filenames prefixed with
"foo-", followed by a sequence of three characters, and terminating
with ".jpeg".

This pattern type is deprecated in favor of I<glob> and
I<sequence>.

=back


Default value is I<glob_sequence>.

=item B<pixel_format>

Set the pixel format of the images to read. If not specified the pixel
format is guessed from the first image file in the sequence.

=item B<start_number>

Set the index of the file matched by the image file pattern to start
to read from. Default value is 0.

=item B<start_number_range>

Set the index interval range to check when looking for the first image
file in the sequence, starting from I<start_number>. Default value
is 5.

=item B<video_size>

Set the video size of the images to read. If not specified the video
size is guessed from the first image file in the sequence.

=back



=head3 Examples



=over 4


=item *

Use B<ffmpeg> for creating a video from the images in the file
sequence F<img-001.jpeg>, F<img-002.jpeg>, ..., assuming an
input frame rate of 10 frames per second:
	
	ffmpeg -i 'img-%03d.jpeg' -r 10 out.mkv



=item *

As above, but start by reading from a file with index 100 in the sequence:
	
	ffmpeg -start_number 100 -i 'img-%03d.jpeg' -r 10 out.mkv



=item *

Read images matching the "*.png" glob pattern , that is all the files
terminating with the ".png" suffix:
	
	ffmpeg -pattern_type glob -i "*.png" -r 10 out.mkv


=back



=head2 applehttp


Apple HTTP Live Streaming demuxer.

This demuxer presents all AVStreams from all variant streams.
The id field is set to the bitrate variant index number. By setting
the discard flags on AVStreams (by pressing 'a' or 'v' in ffplay),
the caller can decide which variant streams to actually receive.
The total bitrate of the variant that the stream belongs to is
available in a metadata key named "variant_bitrate".


=head2 sbg


SBaGen script demuxer.

This demuxer reads the script language used by SBaGen
E<lt>B<http://uazu.net/sbagen/>E<gt> to generate binaural beats sessions. A SBG
script looks like that:
	
	-SE
	a: 300-2.5/3 440+4.5/0
	b: 300-2.5/0 440+4.5/3
	off: -
	NOW      == a
	+0:07:00 == b
	+0:14:00 == a
	+0:21:00 == b
	+0:30:00    off


A SBG script can mix absolute and relative timestamps. If the script uses
either only absolute timestamps (including the script start time) or only
relative ones, then its layout is fixed, and the conversion is
straightforward. On the other hand, if the script mixes both kind of
timestamps, then the I<NOW> reference for relative timestamps will be
taken from the current time of day at the time the script is read, and the
script layout will be frozen according to that reference. That means that if
the script is directly played, the actual times will match the absolute
timestamps up to the sound controller's clock accuracy, but if the user
somehow pauses the playback or seeks, all times will be shifted accordingly.


=head1 MUXERS


Muxers are configured elements in FFmpeg which allow writing
multimedia streams to a particular type of file.

When you configure your FFmpeg build, all the supported muxers
are enabled by default. You can list all available muxers using the
configure option C<--list-muxers>.

You can disable all the muxers with the configure option
C<--disable-muxers> and selectively enable / disable single muxers
with the options C<--enable-muxer=I<MUXER>> /
C<--disable-muxer=I<MUXER>>.

The option C<-formats> of the ff* tools will display the list of
enabled muxers.

A description of some of the currently available muxers follows.



=head2 crc


CRC (Cyclic Redundancy Check) testing format.

This muxer computes and prints the Adler-32 CRC of all the input audio
and video frames. By default audio frames are converted to signed
16-bit raw audio and video frames to raw video before computing the
CRC.

The output of the muxer consists of a single line of the form:
CRC=0xI<CRC>, where I<CRC> is a hexadecimal number 0-padded to
8 digits containing the CRC for all the decoded input frames.

For example to compute the CRC of the input, and store it in the file
F<out.crc>:
	
	ffmpeg -i INPUT -f crc out.crc


You can print the CRC to stdout with the command:
	
	ffmpeg -i INPUT -f crc -


You can select the output format of each frame with B<ffmpeg> by
specifying the audio and video codec and format. For example to
compute the CRC of the input audio converted to PCM unsigned 8-bit
and the input video converted to MPEG-2 video, use the command:
	
	ffmpeg -i INPUT -c:a pcm_u8 -c:v mpeg2video -f crc -


See also the framecrc muxer.



=head2 framecrc


Per-packet CRC (Cyclic Redundancy Check) testing format.

This muxer computes and prints the Adler-32 CRC for each audio
and video packet. By default audio frames are converted to signed
16-bit raw audio and video frames to raw video before computing the
CRC.

The output of the muxer consists of a line for each audio and video
packet of the form:
	
	<stream_index>, <packet_dts>, <packet_pts>, <packet_duration>, <packet_size>, 0x<CRC>


I<CRC> is a hexadecimal number 0-padded to 8 digits containing the
CRC of the packet.

For example to compute the CRC of the audio and video frames in
F<INPUT>, converted to raw audio and video packets, and store it
in the file F<out.crc>:
	
	ffmpeg -i INPUT -f framecrc out.crc


To print the information to stdout, use the command:
	
	ffmpeg -i INPUT -f framecrc -


With B<ffmpeg>, you can select the output format to which the
audio and video frames are encoded before computing the CRC for each
packet by specifying the audio and video codec. For example, to
compute the CRC of each decoded input audio frame converted to PCM
unsigned 8-bit and of each decoded input video frame converted to
MPEG-2 video, use the command:
	
	ffmpeg -i INPUT -c:a pcm_u8 -c:v mpeg2video -f framecrc -


See also the crc muxer.



=head2 framemd5


Per-packet MD5 testing format.

This muxer computes and prints the MD5 hash for each audio
and video packet. By default audio frames are converted to signed
16-bit raw audio and video frames to raw video before computing the
hash.

The output of the muxer consists of a line for each audio and video
packet of the form:
	
	<stream_index>, <packet_dts>, <packet_pts>, <packet_duration>, <packet_size>, <MD5>


I<MD5> is a hexadecimal number representing the computed MD5 hash
for the packet.

For example to compute the MD5 of the audio and video frames in
F<INPUT>, converted to raw audio and video packets, and store it
in the file F<out.md5>:
	
	ffmpeg -i INPUT -f framemd5 out.md5


To print the information to stdout, use the command:
	
	ffmpeg -i INPUT -f framemd5 -


See also the md5 muxer.



=head2 ico


ICO file muxer.

Microsoft's icon file format (ICO) has some strict limitations that should be noted:


=over 4


=item *

Size cannot exceed 256 pixels in any dimension


=item *

Only BMP and PNG images can be stored


=item *

If a BMP image is used, it must be one of the following pixel formats:
	
	BMP Bit Depth      FFmpeg Pixel Format
	1bit               pal8
	4bit               pal8
	8bit               pal8
	16bit              rgb555le
	24bit              bgr24
	32bit              bgra



=item *

If a BMP image is used, it must use the BITMAPINFOHEADER DIB header


=item *

If a PNG image is used, it must use the rgba pixel format

=back




=head2 image2


Image file muxer.

The image file muxer writes video frames to image files.

The output filenames are specified by a pattern, which can be used to
produce sequentially numbered series of files.
The pattern may contain the string "%d" or "%0I<N>d", this string
specifies the position of the characters representing a numbering in
the filenames. If the form "%0I<N>d" is used, the string
representing the number in each filename is 0-padded to I<N>
digits. The literal character '%' can be specified in the pattern with
the string "%%".

If the pattern contains "%d" or "%0I<N>d", the first filename of
the file list specified will contain the number 1, all the following
numbers will be sequential.

The pattern may contain a suffix which is used to automatically
determine the format of the image files to write.

For example the pattern "img-%03d.bmp" will specify a sequence of
filenames of the form F<img-001.bmp>, F<img-002.bmp>, ...,
F<img-010.bmp>, etc.
The pattern "img%%-%d.jpg" will specify a sequence of filenames of the
form F<img%-1.jpg>, F<img%-2.jpg>, ..., F<img%-10.jpg>,
etc.

The following example shows how to use B<ffmpeg> for creating a
sequence of files F<img-001.jpeg>, F<img-002.jpeg>, ...,
taking one image every second from the input video:
	
	ffmpeg -i in.avi -vsync 1 -r 1 -f image2 'img-%03d.jpeg'


Note that with B<ffmpeg>, if the format is not specified with the
C<-f> option and the output filename specifies an image file
format, the image2 muxer is automatically selected, so the previous
command can be written as:
	
	ffmpeg -i in.avi -vsync 1 -r 1 'img-%03d.jpeg'


Note also that the pattern must not necessarily contain "%d" or
"%0I<N>d", for example to create a single image file
F<img.jpeg> from the input video you can employ the command:
	
	ffmpeg -i in.avi -f image2 -frames:v 1 img.jpeg


The image muxer supports the .Y.U.V image file format. This format is
special in that that each image frame consists of three files, for
each of the YUV420P components. To read or write this image file format,
specify the name of the '.Y' file. The muxer will automatically open the
'.U' and '.V' files as required.



=head2 md5


MD5 testing format.

This muxer computes and prints the MD5 hash of all the input audio
and video frames. By default audio frames are converted to signed
16-bit raw audio and video frames to raw video before computing the
hash.

The output of the muxer consists of a single line of the form:
MD5=I<MD5>, where I<MD5> is a hexadecimal number representing
the computed MD5 hash.

For example to compute the MD5 hash of the input converted to raw
audio and video, and store it in the file F<out.md5>:
	
	ffmpeg -i INPUT -f md5 out.md5


You can print the MD5 to stdout with the command:
	
	ffmpeg -i INPUT -f md5 -


See also the framemd5 muxer.


=head2 MOV/MP4/ISMV


The mov/mp4/ismv muxer supports fragmentation. Normally, a MOV/MP4
file has all the metadata about all packets stored in one location
(written at the end of the file, it can be moved to the start for
better playback by adding I<faststart> to the I<movflags>, or
using the B<qt-faststart> tool). A fragmented
file consists of a number of fragments, where packets and metadata
about these packets are stored together. Writing a fragmented
file has the advantage that the file is decodable even if the
writing is interrupted (while a normal MOV/MP4 is undecodable if
it is not properly finished), and it requires less memory when writing
very long files (since writing normal MOV/MP4 files stores info about
every single packet in memory until the file is closed). The downside
is that it is less compatible with other applications.

Fragmentation is enabled by setting one of the AVOptions that define
how to cut the file into fragments:


=over 4


=item B<-moov_size> I<bytes>

Reserves space for the moov atom at the beginning of the file instead of placing the
moov atom at the end. If the space reserved is insufficient, muxing will fail.

=item B<-movflags frag_keyframe>

Start a new fragment at each video keyframe.

=item B<-frag_duration> I<duration>

Create fragments that are I<duration> microseconds long.

=item B<-frag_size> I<size>

Create fragments that contain up to I<size> bytes of payload data.

=item B<-movflags frag_custom>

Allow the caller to manually choose when to cut fragments, by
calling C<av_write_frame(ctx, NULL)> to write a fragment with
the packets written so far. (This is only useful with other
applications integrating libavformat, not from B<ffmpeg>.)

=item B<-min_frag_duration> I<duration>

Don't create fragments that are shorter than I<duration> microseconds long.

=back


If more than one condition is specified, fragments are cut when
one of the specified conditions is fulfilled. The exception to this is
C<-min_frag_duration>, which has to be fulfilled for any of the other
conditions to apply.

Additionally, the way the output file is written can be adjusted
through a few other options:


=over 4


=item B<-movflags empty_moov>

Write an initial moov atom directly at the start of the file, without
describing any samples in it. Generally, an mdat/moov pair is written
at the start of the file, as a normal MOV/MP4 file, containing only
a short portion of the file. With this option set, there is no initial
mdat atom, and the moov atom only describes the tracks but has
a zero duration.

Files written with this option set do not work in QuickTime.
This option is implicitly set when writing ismv (Smooth Streaming) files.

=item B<-movflags separate_moof>

Write a separate moof (movie fragment) atom for each track. Normally,
packets for all tracks are written in a moof atom (which is slightly
more efficient), but with this option set, the muxer writes one moof/mdat
pair for each track, making it easier to separate tracks.

This option is implicitly set when writing ismv (Smooth Streaming) files.

=item B<-movflags faststart>

Run a second pass moving the moov atom on top of the file. This
operation can take a while, and will not work in various situations such
as fragmented output, thus it is not enabled by default.

=back


Smooth Streaming content can be pushed in real time to a publishing
point on IIS with this muxer. Example:
	
	ffmpeg -re <<normal input/transcoding options>> -movflags isml+frag_keyframe -f ismv http://server/publishingpoint.isml/Streams(Encoder1)



=head2 mpegts


MPEG transport stream muxer.

This muxer implements ISO 13818-1 and part of ETSI EN 300 468.

The muxer options are:


=over 4


=item B<-mpegts_original_network_id> I<number>

Set the original_network_id (default 0x0001). This is unique identifier
of a network in DVB. Its main use is in the unique identification of a
service through the path Original_Network_ID, Transport_Stream_ID.

=item B<-mpegts_transport_stream_id> I<number>

Set the transport_stream_id (default 0x0001). This identifies a
transponder in DVB.

=item B<-mpegts_service_id> I<number>

Set the service_id (default 0x0001) also known as program in DVB.

=item B<-mpegts_pmt_start_pid> I<number>

Set the first PID for PMT (default 0x1000, max 0x1f00).

=item B<-mpegts_start_pid> I<number>

Set the first PID for data packets (default 0x0100, max 0x0f00).

=back


The recognized metadata settings in mpegts muxer are C<service_provider>
and C<service_name>. If they are not set the default for
C<service_provider> is "FFmpeg" and the default for
C<service_name> is "Service01".

	
	ffmpeg -i file.mpg -c copy \
	     -mpegts_original_network_id 0x1122 \
	     -mpegts_transport_stream_id 0x3344 \
	     -mpegts_service_id 0x5566 \
	     -mpegts_pmt_start_pid 0x1500 \
	     -mpegts_start_pid 0x150 \
	     -metadata service_provider="Some provider" \
	     -metadata service_name="Some Channel" \
	     -y out.ts



=head2 null


Null muxer.

This muxer does not generate any output file, it is mainly useful for
testing or benchmarking purposes.

For example to benchmark decoding with B<ffmpeg> you can use the
command:
	
	ffmpeg -benchmark -i INPUT -f null out.null


Note that the above command does not read or write the F<out.null>
file, but specifying the output file is required by the B<ffmpeg>
syntax.

Alternatively you can write the command as:
	
	ffmpeg -benchmark -i INPUT -f null -



=head2 matroska


Matroska container muxer.

This muxer implements the matroska and webm container specs.

The recognized metadata settings in this muxer are:


=over 4



=item B<title=>I<title name>

Name provided to a single track

=back



=over 4



=item B<language=>I<language name>

Specifies the language of the track in the Matroska languages form

=back



=over 4



=item B<stereo_mode=>I<mode>

Stereo 3D video layout of two views in a single video track

=over 4


=item B<mono>

video is not stereo

=item B<left_right>

Both views are arranged side by side, Left-eye view is on the left

=item B<bottom_top>

Both views are arranged in top-bottom orientation, Left-eye view is at bottom

=item B<top_bottom>

Both views are arranged in top-bottom orientation, Left-eye view is on top

=item B<checkerboard_rl>

Each view is arranged in a checkerboard interleaved pattern, Left-eye view being first

=item B<checkerboard_lr>

Each view is arranged in a checkerboard interleaved pattern, Right-eye view being first

=item B<row_interleaved_rl>

Each view is constituted by a row based interleaving, Right-eye view is first row

=item B<row_interleaved_lr>

Each view is constituted by a row based interleaving, Left-eye view is first row

=item B<col_interleaved_rl>

Both views are arranged in a column based interleaving manner, Right-eye view is first column

=item B<col_interleaved_lr>

Both views are arranged in a column based interleaving manner, Left-eye view is first column

=item B<anaglyph_cyan_red>

All frames are in anaglyph format viewable through red-cyan filters

=item B<right_left>

Both views are arranged side by side, Right-eye view is on the left

=item B<anaglyph_green_magenta>

All frames are in anaglyph format viewable through green-magenta filters

=item B<block_lr>

Both eyes laced in one Block, Left-eye view is first

=item B<block_rl>

Both eyes laced in one Block, Right-eye view is first

=back


=back


For example a 3D WebM clip can be created using the following command line:
	
	ffmpeg -i sample_left_right_clip.mpg -an -c:v libvpx -metadata stereo_mode=left_right -y stereo_clip.webm



=head2 segment, stream_segment, ssegment


Basic stream segmenter.

The segmenter muxer outputs streams to a number of separate files of nearly
fixed duration. Output filename pattern can be set in a fashion similar to
image2.

C<stream_segment> is a variant of the muxer used to write to
streaming output formats, i.e. which do not require global headers,
and is recommended for outputting e.g. to MPEG transport stream segments.
C<ssegment> is a shorter alias for C<stream_segment>.

Every segment starts with a video keyframe, if a video stream is present.
Note that if you want accurate splitting for a video file, you need to
make the input key frames correspond to the exact splitting times
expected by the segmenter, or the segment muxer will start the new
segment with the key frame found next after the specified start
time.

The segment muxer works best with a single constant frame rate video.

Optionally it can generate a list of the created segments, by setting
the option I<segment_list>. The list type is specified by the
I<segment_list_type> option.

The segment muxer supports the following options:


=over 4


=item B<segment_format> I<format>

Override the inner container format, by default it is guessed by the filename
extension.

=item B<segment_list> I<name>

Generate also a listfile named I<name>. If not specified no
listfile is generated.

=item B<segment_list_flags> I<flags>

Set flags affecting the segment list generation.

It currently supports the following flags:

=over 4


=item I<cache>

Allow caching (only affects M3U8 list files).


=item I<live>

Allow live-friendly file generation.

This currently only affects M3U8 lists. In particular, write a fake
EXT-X-TARGETDURATION duration field at the top of the file, based on
the specified I<segment_time>.

=back


Default value is C<cache>.


=item B<segment_list_size> I<size>

Overwrite the listfile once it reaches I<size> entries. If 0
the listfile is never overwritten. Default value is 0.

=item B<segment_list type> I<type>

Specify the format for the segment list file.

The following values are recognized:

=over 4


=item B<flat>

Generate a flat list for the created segments, one segment per line.


=item B<csv, ext>

Generate a list for the created segments, one segment per line,
each line matching the format (comma-separated values):
	
	<segment_filename>,<segment_start_time>,<segment_end_time>


I<segment_filename> is the name of the output file generated by the
muxer according to the provided pattern. CSV escaping (according to
RFC4180) is applied if required.

I<segment_start_time> and I<segment_end_time> specify
the segment start and end time expressed in seconds.

A list file with the suffix C<".csv"> or C<".ext"> will
auto-select this format.

C<ext> is deprecated in favor or C<csv>.


=item B<m3u8>

Generate an extended M3U8 file, version 4, compliant with
E<lt>B<http://tools.ietf.org/id/draft-pantos-http-live-streaming-08.txt>E<gt>.

A list file with the suffix C<".m3u8"> will auto-select this format.

=back


If not specified the type is guessed from the list file name suffix.

=item B<segment_time> I<time>

Set segment duration to I<time>. Default value is "2".

=item B<segment_time_delta> I<delta>

Specify the accuracy time when selecting the start time for a
segment. Default value is "0".

When delta is specified a key-frame will start a new segment if its
PTS satisfies the relation:
	
	PTS >= start_time - time_delta


This option is useful when splitting video content, which is always
split at GOP boundaries, in case a key frame is found just before the
specified split time.

In particular may be used in combination with the F<ffmpeg> option
I<force_key_frames>. The key frame times specified by
I<force_key_frames> may not be set accurately because of rounding
issues, with the consequence that a key frame time may result set just
before the specified time. For constant frame rate videos a value of
1/2*I<frame_rate> should address the worst case mismatch between
the specified time and the time set by I<force_key_frames>.


=item B<segment_times> I<times>

Specify a list of split points. I<times> contains a list of comma
separated duration specifications, in increasing order.

=item B<segment_wrap> I<limit>

Wrap around segment index once it reaches I<limit>.

=back


Some examples follow.


=over 4


=item *

To remux the content of file F<in.mkv> to a list of segments
F<out-000.nut>, F<out-001.nut>, etc., and write the list of
generated segments to F<out.list>:
	
	ffmpeg -i in.mkv -codec copy -map 0 -f segment -segment_list out.list out%03d.nut



=item *

As the example above, but segment the input file according to the split
points specified by the I<segment_times> option:
	
	ffmpeg -i in.mkv -codec copy -map 0 -f segment -segment_list out.csv -segment_times 1,2,3,5,8,13,21 out%03d.nut



=item *

As the example above, but use the C<ffmpeg> I<force_key_frames>
option to force key frames in the input at the specified location, together
with the segment option I<segment_time_delta> to account for
possible roundings operated when setting key frame times.
	
	ffmpeg -i in.mkv -force_key_frames 1,2,3,5,8,13,21 -vcodec mpeg4 -acodec pcm_s16le -map 0 \
	-f segment -segment_list out.csv -segment_times 1,2,3,5,8,13,21 -segment_time_delta 0.05 out%03d.nut

In order to force key frames on the input file, transcoding is
required.


=item *

To convert the F<in.mkv> to TS segments using the C<libx264>
and C<libfaac> encoders:
	
	ffmpeg -i in.mkv -map 0 -codec:v libx264 -codec:a libfaac -f ssegment -segment_list out.list out%03d.ts



=item *

Segment the input file, and create an M3U8 live playlist (can be used
as live HLS source):
	
	ffmpeg -re -i in.mkv -codec copy -map 0 -f segment -segment_list playlist.m3u8 \
	-segment_list_flags +live -segment_time 10 out%03d.mkv


=back



=head2 mp3


The MP3 muxer writes a raw MP3 stream with an ID3v2 header at the beginning and
optionally an ID3v1 tag at the end. ID3v2.3 and ID3v2.4 are supported, the
C<id3v2_version> option controls which one is used. The legacy ID3v1 tag is
not written by default, but may be enabled with the C<write_id3v1> option.

For seekable output the muxer also writes a Xing frame at the beginning, which
contains the number of frames in the file. It is useful for computing duration
of VBR files.

The muxer supports writing ID3v2 attached pictures (APIC frames). The pictures
are supplied to the muxer in form of a video stream with a single packet. There
can be any number of those streams, each will correspond to a single APIC frame.
The stream metadata tags I<title> and I<comment> map to APIC
I<description> and I<picture type> respectively. See
E<lt>B<http://id3.org/id3v2.4.0-frames>E<gt> for allowed picture types.

Note that the APIC frames must be written at the beginning, so the muxer will
buffer the audio frames until it gets all the pictures. It is therefore advised
to provide the pictures as soon as possible to avoid excessive buffering.

Examples:

Write an mp3 with an ID3v2.3 header and an ID3v1 footer:
	
	ffmpeg -i INPUT -id3v2_version 3 -write_id3v1 1 out.mp3


Attach a picture to an mp3:
	
	ffmpeg -i input.mp3 -i cover.png -c copy -metadata:s:v title="Album cover"
	-metadata:s:v comment="Cover (Front)" out.mp3



=head1 INPUT DEVICES


Input devices are configured elements in FFmpeg which allow to access
the data coming from a multimedia device attached to your system.

When you configure your FFmpeg build, all the supported input devices
are enabled by default. You can list all available ones using the
configure option "--list-indevs".

You can disable all the input devices using the configure option
"--disable-indevs", and selectively enable an input device using the
option "--enable-indev=I<INDEV>", or you can disable a particular
input device using the option "--disable-indev=I<INDEV>".

The option "-formats" of the ff* tools will display the list of
supported input devices (amongst the demuxers).

A description of the currently available input devices follows.


=head2 alsa


ALSA (Advanced Linux Sound Architecture) input device.

To enable this input device during configuration you need libasound
installed on your system.

This device allows capturing from an ALSA device. The name of the
device to capture has to be an ALSA card identifier.

An ALSA identifier has the syntax:
	
	hw:<CARD>[,<DEV>[,<SUBDEV>]]


where the I<DEV> and I<SUBDEV> components are optional.

The three arguments (in order: I<CARD>,I<DEV>,I<SUBDEV>)
specify card number or identifier, device number and subdevice number
(-1 means any).

To see the list of cards currently recognized by your system check the
files F</proc/asound/cards> and F</proc/asound/devices>.

For example to capture with B<ffmpeg> from an ALSA device with
card id 0, you may run the command:
	
	ffmpeg -f alsa -i hw:0 alsaout.wav


For more information see:
E<lt>B<http://www.alsa-project.org/alsa-doc/alsa-lib/pcm.html>E<gt>


=head2 bktr


BSD video input device.


=head2 dshow


Windows DirectShow input device.

DirectShow support is enabled when FFmpeg is built with the mingw-w64 project.
Currently only audio and video devices are supported.

Multiple devices may be opened as separate inputs, but they may also be
opened on the same input, which should improve synchronism between them.

The input name should be in the format:

	
	<TYPE>=<NAME>[:<TYPE>=<NAME>]


where I<TYPE> can be either I<audio> or I<video>,
and I<NAME> is the device's name.


=head3 Options


If no options are specified, the device's defaults are used.
If the device does not support the requested options, it will
fail to open.


=over 4



=item B<video_size>

Set the video size in the captured video.


=item B<framerate>

Set the framerate in the captured video.


=item B<sample_rate>

Set the sample rate (in Hz) of the captured audio.


=item B<sample_size>

Set the sample size (in bits) of the captured audio.


=item B<channels>

Set the number of channels in the captured audio.


=item B<list_devices>

If set to B<true>, print a list of devices and exit.


=item B<list_options>

If set to B<true>, print a list of selected device's options
and exit.


=item B<video_device_number>

Set video device number for devices with same name (starts at 0,
defaults to 0).


=item B<audio_device_number>

Set audio device number for devices with same name (starts at 0,
defaults to 0).


=item B<pixel_format>

Select pixel format to be used by DirectShow. This may only be set when
the video codec is not set or set to rawvideo.


=item B<audio_buffer_size>

Set audio device buffer size in milliseconds (which can directly
impact latency, depending on the device).
Defaults to using the audio device's
default buffer size (typically some multiple of 500ms).
Setting this value too low can degrade performance.
See also
E<lt>B<http://msdn.microsoft.com/en-us/library/windows/desktop/dd377582(v=vs.85).aspx>E<gt>


=back



=head3 Examples



=over 4



=item *

Print the list of DirectShow supported devices and exit:
	
	$ ffmpeg -list_devices true -f dshow -i dummy



=item *

Open video device I<Camera>:
	
	$ ffmpeg -f dshow -i video="Camera"



=item *

Open second video device with name I<Camera>:
	
	$ ffmpeg -f dshow -video_device_number 1 -i video="Camera"



=item *

Open video device I<Camera> and audio device I<Microphone>:
	
	$ ffmpeg -f dshow -i video="Camera":audio="Microphone"



=item *

Print the list of supported options in selected device and exit:
	
	$ ffmpeg -list_options true -f dshow -i video="Camera"



=back



=head2 dv1394


Linux DV 1394 input device.


=head2 fbdev


Linux framebuffer input device.

The Linux framebuffer is a graphic hardware-independent abstraction
layer to show graphics on a computer monitor, typically on the
console. It is accessed through a file device node, usually
F</dev/fb0>.

For more detailed information read the file
Documentation/fb/framebuffer.txt included in the Linux source tree.

To record from the framebuffer device F</dev/fb0> with
B<ffmpeg>:
	
	ffmpeg -f fbdev -r 10 -i /dev/fb0 out.avi


You can take a single screenshot image with the command:
	
	ffmpeg -f fbdev -frames:v 1 -r 1 -i /dev/fb0 screenshot.jpeg


See also E<lt>B<http://linux-fbdev.sourceforge.net/>E<gt>, and fbset(1).


=head2 iec61883


FireWire DV/HDV input device using libiec61883.

To enable this input device, you need libiec61883, libraw1394 and
libavc1394 installed on your system. Use the configure option
C<--enable-libiec61883> to compile with the device enabled.

The iec61883 capture device supports capturing from a video device
connected via IEEE1394 (FireWire), using libiec61883 and the new Linux
FireWire stack (juju). This is the default DV/HDV input method in Linux
Kernel 2.6.37 and later, since the old FireWire stack was removed.

Specify the FireWire port to be used as input file, or "auto"
to choose the first port connected.


=head3 Options



=over 4



=item B<dvtype>

Override autodetection of DV/HDV. This should only be used if auto
detection does not work, or if usage of a different device type
should be prohibited. Treating a DV device as HDV (or vice versa) will
not work and result in undefined behavior.
The values B<auto>, B<dv> and B<hdv> are supported.


=item B<dvbuffer>

Set maxiumum size of buffer for incoming data, in frames. For DV, this
is an exact value. For HDV, it is not frame exact, since HDV does
not have a fixed frame size.


=back



=head3 Examples



=over 4



=item *

Grab and show the input of a FireWire DV/HDV device.
	
	ffplay -f iec61883 -i auto



=item *

Grab and record the input of a FireWire DV/HDV device,
using a packet buffer of 100000 packets if the source is HDV.
	
	ffmpeg -f iec61883 -i auto -hdvbuffer 100000 out.mpg



=back



=head2 jack


JACK input device.

To enable this input device during configuration you need libjack
installed on your system.

A JACK input device creates one or more JACK writable clients, one for
each audio channel, with name I<client_name>:input_I<N>, where
I<client_name> is the name provided by the application, and I<N>
is a number which identifies the channel.
Each writable client will send the acquired data to the FFmpeg input
device.

Once you have created one or more JACK readable clients, you need to
connect them to one or more JACK writable clients.

To connect or disconnect JACK clients you can use the B<jack_connect>
and B<jack_disconnect> programs, or do it through a graphical interface,
for example with B<qjackctl>.

To list the JACK clients and their properties you can invoke the command
B<jack_lsp>.

Follows an example which shows how to capture a JACK readable client
with B<ffmpeg>.
	
	# Create a JACK writable client with name "ffmpeg".
	$ ffmpeg -f jack -i ffmpeg -y out.wav
	
	# Start the sample jack_metro readable client.
	$ jack_metro -b 120 -d 0.2 -f 4000
	
	# List the current JACK clients.
	$ jack_lsp -c
	system:capture_1
	system:capture_2
	system:playback_1
	system:playback_2
	ffmpeg:input_1
	metro:120_bpm
	
	# Connect metro to the ffmpeg writable client.
	$ jack_connect metro:120_bpm ffmpeg:input_1


For more information read:
E<lt>B<http://jackaudio.org/>E<gt>


=head2 lavfi


Libavfilter input virtual device.

This input device reads data from the open output pads of a libavfilter
filtergraph.

For each filtergraph open output, the input device will create a
corresponding stream which is mapped to the generated output. Currently
only video data is supported. The filtergraph is specified through the
option B<graph>.


=head3 Options



=over 4



=item B<graph>

Specify the filtergraph to use as input. Each video open output must be
labelled by a unique string of the form "outI<N>", where I<N> is a
number starting from 0 corresponding to the mapped input stream
generated by the device.
The first unlabelled output is automatically assigned to the "out0"
label, but all the others need to be specified explicitly.

If not specified defaults to the filename specified for the input
device.

=back



=head3 Examples



=over 4


=item *

Create a color video stream and play it back with B<ffplay>:
	
	ffplay -f lavfi -graph "color=pink [out0]" dummy



=item *

As the previous example, but use filename for specifying the graph
description, and omit the "out0" label:
	
	ffplay -f lavfi color=pink



=item *

Create three different video test filtered sources and play them:
	
	ffplay -f lavfi -graph "testsrc [out0]; testsrc,hflip [out1]; testsrc,negate [out2]" test3



=item *

Read an audio stream from a file using the amovie source and play it
back with B<ffplay>:
	
	ffplay -f lavfi "amovie=test.wav"



=item *

Read an audio stream and a video stream and play it back with
B<ffplay>:
	
	ffplay -f lavfi "movie=test.avi[out0];amovie=test.wav[out1]"



=back



=head2 libdc1394


IIDC1394 input device, based on libdc1394 and libraw1394.


=head2 openal


The OpenAL input device provides audio capture on all systems with a
working OpenAL 1.1 implementation.

To enable this input device during configuration, you need OpenAL
headers and libraries installed on your system, and need to configure
FFmpeg with C<--enable-openal>.

OpenAL headers and libraries should be provided as part of your OpenAL
implementation, or as an additional download (an SDK). Depending on your
installation you may need to specify additional flags via the
C<--extra-cflags> and C<--extra-ldflags> for allowing the build
system to locate the OpenAL headers and libraries.

An incomplete list of OpenAL implementations follows:


=over 4


=item B<Creative>

The official Windows implementation, providing hardware acceleration
with supported devices and software fallback.
See E<lt>B<http://openal.org/>E<gt>.

=item B<OpenAL Soft>

Portable, open source (LGPL) software implementation. Includes
backends for the most common sound APIs on the Windows, Linux,
Solaris, and BSD operating systems.
See E<lt>B<http://kcat.strangesoft.net/openal.html>E<gt>.

=item B<Apple>

OpenAL is part of Core Audio, the official Mac OS X Audio interface.
See E<lt>B<http://developer.apple.com/technologies/mac/audio-and-video.html>E<gt>

=back


This device allows to capture from an audio input device handled
through OpenAL.

You need to specify the name of the device to capture in the provided
filename. If the empty string is provided, the device will
automatically select the default device. You can get the list of the
supported devices by using the option I<list_devices>.


=head3 Options



=over 4



=item B<channels>

Set the number of channels in the captured audio. Only the values
B<1> (monaural) and B<2> (stereo) are currently supported.
Defaults to B<2>.


=item B<sample_size>

Set the sample size (in bits) of the captured audio. Only the values
B<8> and B<16> are currently supported. Defaults to
B<16>.


=item B<sample_rate>

Set the sample rate (in Hz) of the captured audio.
Defaults to B<44.1k>.


=item B<list_devices>

If set to B<true>, print a list of devices and exit.
Defaults to B<false>.


=back



=head3 Examples


Print the list of OpenAL supported devices and exit:
	
	$ ffmpeg -list_devices true -f openal -i dummy out.ogg


Capture from the OpenAL device F<DR-BT101 via PulseAudio>:
	
	$ ffmpeg -f openal -i 'DR-BT101 via PulseAudio' out.ogg


Capture from the default device (note the empty string '' as filename):
	
	$ ffmpeg -f openal -i '' out.ogg


Capture from two devices simultaneously, writing to two different files,
within the same B<ffmpeg> command:
	
	$ ffmpeg -f openal -i 'DR-BT101 via PulseAudio' out1.ogg -f openal -i 'ALSA Default' out2.ogg

Note: not all OpenAL implementations support multiple simultaneous capture -
try the latest OpenAL Soft if the above does not work.


=head2 oss


Open Sound System input device.

The filename to provide to the input device is the device node
representing the OSS input device, and is usually set to
F</dev/dsp>.

For example to grab from F</dev/dsp> using B<ffmpeg> use the
command:
	
	ffmpeg -f oss -i /dev/dsp /tmp/oss.wav


For more information about OSS see:
E<lt>B<http://manuals.opensound.com/usersguide/dsp.html>E<gt>


=head2 pulse


pulseaudio input device.

To enable this input device during configuration you need libpulse-simple
installed in your system.

The filename to provide to the input device is a source device or the
string "default"

To list the pulse source devices and their properties you can invoke
the command B<pactl list sources>.

	
	ffmpeg -f pulse -i default /tmp/pulse.wav



=head3 I<server> AVOption


The syntax is:
	
	-server <server name>


Connects to a specific server.


=head3 I<name> AVOption


The syntax is:
	
	-name <application name>


Specify the application name pulse will use when showing active clients,
by default it is the LIBAVFORMAT_IDENT string


=head3 I<stream_name> AVOption


The syntax is:
	
	-stream_name <stream name>


Specify the stream name pulse will use when showing active streams,
by default it is "record"


=head3 I<sample_rate> AVOption


The syntax is:
	
	-sample_rate <samplerate>


Specify the samplerate in Hz, by default 48kHz is used.


=head3 I<channels> AVOption


The syntax is:
	
	-channels <N>


Specify the channels in use, by default 2 (stereo) is set.


=head3 I<frame_size> AVOption


The syntax is:
	
	-frame_size <bytes>


Specify the number of byte per frame, by default it is set to 1024.


=head3 I<fragment_size> AVOption


The syntax is:
	
	-fragment_size <bytes>


Specify the minimal buffering fragment in pulseaudio, it will affect the
audio latency. By default it is unset.


=head2 sndio


sndio input device.

To enable this input device during configuration you need libsndio
installed on your system.

The filename to provide to the input device is the device node
representing the sndio input device, and is usually set to
F</dev/audio0>.

For example to grab from F</dev/audio0> using B<ffmpeg> use the
command:
	
	ffmpeg -f sndio -i /dev/audio0 /tmp/oss.wav



=head2 video4linux2


Video4Linux2 input video device.

The name of the device to grab is a file device node, usually Linux
systems tend to automatically create such nodes when the device
(e.g. an USB webcam) is plugged into the system, and has a name of the
kind F</dev/videoI<N>>, where I<N> is a number associated to
the device.

Video4Linux2 devices usually support a limited set of
I<width>xI<height> sizes and framerates. You can check which are
supported using B<-list_formats all> for Video4Linux2 devices.

Some usage examples of the video4linux2 devices with ffmpeg and ffplay:

The time base for the timestamps is 1 microsecond. Depending on the kernel
version and configuration, the timestamps may be derived from the real time
clock (origin at the Unix Epoch) or the monotonic clock (origin usually at
boot time, unaffected by NTP or manual changes to the clock). The
B<-timestamps abs> or B<-ts abs> option can be used to force
conversion into the real time clock.

Note that if FFmpeg is build with v4l-utils support ("--enable-libv4l2"
option), it will always be used.
	
	# Grab and show the input of a video4linux2 device.
	ffplay -f video4linux2 -framerate 30 -video_size hd720 /dev/video0
	
	# Grab and record the input of a video4linux2 device, leave the
	framerate and size as previously set.
	ffmpeg -f video4linux2 -input_format mjpeg -i /dev/video0 out.mpeg


"v4l" and "v4l2" can be used as aliases for the respective "video4linux" and
"video4linux2".


=head2 vfwcap


VfW (Video for Windows) capture input device.

The filename passed as input is the capture driver number, ranging from
0 to 9. You may use "list" as filename to print a list of drivers. Any
other filename will be interpreted as device number 0.


=head2 x11grab


X11 video input device.

This device allows to capture a region of an X11 display.

The filename passed as input has the syntax:
	
	[<hostname>]:<display_number>.<screen_number>[+<x_offset>,<y_offset>]


I<hostname>:I<display_number>.I<screen_number> specifies the
X11 display name of the screen to grab from. I<hostname> can be
omitted, and defaults to "localhost". The environment variable
B<DISPLAY> contains the default display name.

I<x_offset> and I<y_offset> specify the offsets of the grabbed
area with respect to the top-left border of the X11 screen. They
default to 0.

Check the X11 documentation (e.g. man X) for more detailed information.

Use the B<dpyinfo> program for getting basic information about the
properties of your X11 display (e.g. grep for "name" or "dimensions").

For example to grab from F<:0.0> using B<ffmpeg>:
	
	ffmpeg -f x11grab -r 25 -s cif -i :0.0 out.mpg


Grab at position C<10,20>:
	
	ffmpeg -f x11grab -r 25 -s cif -i :0.0+10,20 out.mpg



=head3 Options



=over 4


=item B<draw_mouse>

Specify whether to draw the mouse pointer. A value of C<0> specify
not to draw the pointer. Default value is C<1>.


=item B<follow_mouse>

Make the grabbed area follow the mouse. The argument can be
C<centered> or a number of pixels I<PIXELS>.

When it is specified with "centered", the grabbing region follows the mouse
pointer and keeps the pointer at the center of region; otherwise, the region
follows only when the mouse pointer reaches within I<PIXELS> (greater than
zero) to the edge of region.

For example:
	
	ffmpeg -f x11grab -follow_mouse centered -r 25 -s cif -i :0.0 out.mpg


To follow only when the mouse pointer reaches within 100 pixels to edge:
	
	ffmpeg -f x11grab -follow_mouse 100 -r 25 -s cif -i :0.0 out.mpg



=item B<framerate>

Set the grabbing frame rate. Default value is C<ntsc>,
corresponding to a framerate of C<30000/1001>.


=item B<show_region>

Show grabbed region on screen.

If I<show_region> is specified with C<1>, then the grabbing
region will be indicated on screen. With this option, it is easy to
know what is being grabbed if only a portion of the screen is grabbed.

For example:
	
	ffmpeg -f x11grab -show_region 1 -r 25 -s cif -i :0.0+10,20 out.mpg


With I<follow_mouse>:
	
	ffmpeg -f x11grab -follow_mouse centered -show_region 1 -r 25 -s cif -i :0.0 out.mpg



=item B<video_size>

Set the video frame size. Default value is C<vga>.

=back



=head1 OUTPUT DEVICES


Output devices are configured elements in FFmpeg which allow to write
multimedia data to an output device attached to your system.

When you configure your FFmpeg build, all the supported output devices
are enabled by default. You can list all available ones using the
configure option "--list-outdevs".

You can disable all the output devices using the configure option
"--disable-outdevs", and selectively enable an output device using the
option "--enable-outdev=I<OUTDEV>", or you can disable a particular
input device using the option "--disable-outdev=I<OUTDEV>".

The option "-formats" of the ff* tools will display the list of
enabled output devices (amongst the muxers).

A description of the currently available output devices follows.


=head2 alsa


ALSA (Advanced Linux Sound Architecture) output device.


=head2 caca


CACA output device.

This output devices allows to show a video stream in CACA window.
Only one CACA window is allowed per application, so you can
have only one instance of this output device in an application.

To enable this output device you need to configure FFmpeg with
C<--enable-libcaca>.
libcaca is a graphics library that outputs text instead of pixels.

For more information about libcaca, check:
E<lt>B<http://caca.zoy.org/wiki/libcaca>E<gt>


=head3 Options



=over 4



=item B<window_title>

Set the CACA window title, if not specified default to the filename
specified for the output device.


=item B<window_size>

Set the CACA window size, can be a string of the form
I<width>xI<height> or a video size abbreviation.
If not specified it defaults to the size of the input video.


=item B<driver>

Set display driver.


=item B<algorithm>

Set dithering algorithm. Dithering is necessary
because the picture being rendered has usually far more colours than
the available palette.
The accepted values are listed with C<-list_dither algorithms>.


=item B<antialias>

Set antialias method. Antialiasing smoothens the rendered
image and avoids the commonly seen staircase effect.
The accepted values are listed with C<-list_dither antialiases>.


=item B<charset>

Set which characters are going to be used when rendering text.
The accepted values are listed with C<-list_dither charsets>.


=item B<color>

Set color to be used when rendering text.
The accepted values are listed with C<-list_dither colors>.


=item B<list_drivers>

If set to B<true>, print a list of available drivers and exit.


=item B<list_dither>

List available dither options related to the argument.
The argument must be one of C<algorithms>, C<antialiases>,
C<charsets>, C<colors>.

=back



=head3 Examples



=over 4


=item *

The following command shows the B<ffmpeg> output is an
CACA window, forcing its size to 80x25:
	
	ffmpeg -i INPUT -vcodec rawvideo -pix_fmt rgb24 -window_size 80x25 -f caca -



=item *

Show the list of available drivers and exit:
	
	ffmpeg -i INPUT -pix_fmt rgb24 -f caca -list_drivers true -



=item *

Show the list of available dither colors and exit:
	
	ffmpeg -i INPUT -pix_fmt rgb24 -f caca -list_dither colors -


=back



=head2 oss


OSS (Open Sound System) output device.


=head2 sdl


SDL (Simple DirectMedia Layer) output device.

This output devices allows to show a video stream in an SDL
window. Only one SDL window is allowed per application, so you can
have only one instance of this output device in an application.

To enable this output device you need libsdl installed on your system
when configuring your build.

For more information about SDL, check:
E<lt>B<http://www.libsdl.org/>E<gt>


=head3 Options



=over 4



=item B<window_title>

Set the SDL window title, if not specified default to the filename
specified for the output device.


=item B<icon_title>

Set the name of the iconified SDL window, if not specified it is set
to the same value of I<window_title>.


=item B<window_size>

Set the SDL window size, can be a string of the form
I<width>xI<height> or a video size abbreviation.
If not specified it defaults to the size of the input video,
downscaled according to the aspect ratio.

=back



=head3 Examples


The following command shows the B<ffmpeg> output is an
SDL window, forcing its size to the qcif format:
	
	ffmpeg -i INPUT -vcodec rawvideo -pix_fmt yuv420p -window_size qcif -f sdl "SDL output"



=head2 sndio


sndio audio output device.


=head1 PROTOCOLS


Protocols are configured elements in FFmpeg which allow to access
resources which require the use of a particular protocol.

When you configure your FFmpeg build, all the supported protocols are
enabled by default. You can list all available ones using the
configure option "--list-protocols".

You can disable all the protocols using the configure option
"--disable-protocols", and selectively enable a protocol using the
option "--enable-protocol=I<PROTOCOL>", or you can disable a
particular protocol using the option
"--disable-protocol=I<PROTOCOL>".

The option "-protocols" of the ff* tools will display the list of
supported protocols.

A description of the currently available protocols follows.


=head2 bluray


Read BluRay playlist.

The accepted options are:

=over 4



=item B<angle>

BluRay angle


=item B<chapter>

Start chapter (1...N)


=item B<playlist>

Playlist to read (BDMV/PLAYLIST/?????.mpls)


=back


Examples:

Read longest playlist from BluRay mounted to /mnt/bluray:
	
	bluray:/mnt/bluray


Read angle 2 of playlist 4 from BluRay mounted to /mnt/bluray, start from chapter 2:
	
	-playlist 4 -angle 2 -chapter 2 bluray:/mnt/bluray



=head2 concat


Physical concatenation protocol.

Allow to read and seek from many resource in sequence as if they were
a unique resource.

A URL accepted by this protocol has the syntax:
	
	concat:<URL1>|<URL2>|...|<URLN>


where I<URL1>, I<URL2>, ..., I<URLN> are the urls of the
resource to be concatenated, each one possibly specifying a distinct
protocol.

For example to read a sequence of files F<split1.mpeg>,
F<split2.mpeg>, F<split3.mpeg> with B<ffplay> use the
command:
	
	ffplay concat:split1.mpeg\|split2.mpeg\|split3.mpeg


Note that you may need to escape the character "|" which is special for
many shells.


=head2 file


File access protocol.

Allow to read from or read to a file.

For example to read from a file F<input.mpeg> with B<ffmpeg>
use the command:
	
	ffmpeg -i file:input.mpeg output.mpeg


The ff* tools default to the file protocol, that is a resource
specified with the name "FILE.mpeg" is interpreted as the URL
"file:FILE.mpeg".


=head2 gopher


Gopher protocol.


=head2 hls


Read Apple HTTP Live Streaming compliant segmented stream as
a uniform one. The M3U8 playlists describing the segments can be
remote HTTP resources or local files, accessed using the standard
file protocol.
The nested protocol is declared by specifying
"+I<proto>" after the hls URI scheme name, where I<proto>
is either "file" or "http".

	
	hls+http://host/path/to/remote/resource.m3u8
	hls+file://path/to/local/resource.m3u8


Using this protocol is discouraged - the hls demuxer should work
just as well (if not, please report the issues) and is more complete.
To use the hls demuxer instead, simply use the direct URLs to the
m3u8 files.


=head2 http


HTTP (Hyper Text Transfer Protocol).


=head2 mmst


MMS (Microsoft Media Server) protocol over TCP.


=head2 mmsh


MMS (Microsoft Media Server) protocol over HTTP.

The required syntax is:
	
	mmsh://<server>[:<port>][/<app>][/<playpath>]



=head2 md5


MD5 output protocol.

Computes the MD5 hash of the data to be written, and on close writes
this to the designated output or stdout if none is specified. It can
be used to test muxers without writing an actual file.

Some examples follow.
	
	# Write the MD5 hash of the encoded AVI file to the file output.avi.md5.
	ffmpeg -i input.flv -f avi -y md5:output.avi.md5
	
	# Write the MD5 hash of the encoded AVI file to stdout.
	ffmpeg -i input.flv -f avi -y md5:


Note that some formats (typically MOV) require the output protocol to
be seekable, so they will fail with the MD5 output protocol.


=head2 pipe


UNIX pipe access protocol.

Allow to read and write from UNIX pipes.

The accepted syntax is:
	
	pipe:[<number>]


I<number> is the number corresponding to the file descriptor of the
pipe (e.g. 0 for stdin, 1 for stdout, 2 for stderr).  If I<number>
is not specified, by default the stdout file descriptor will be used
for writing, stdin for reading.

For example to read from stdin with B<ffmpeg>:
	
	cat test.wav | ffmpeg -i pipe:0
	# ...this is the same as...
	cat test.wav | ffmpeg -i pipe:


For writing to stdout with B<ffmpeg>:
	
	ffmpeg -i test.wav -f avi pipe:1 | cat > test.avi
	# ...this is the same as...
	ffmpeg -i test.wav -f avi pipe: | cat > test.avi


Note that some formats (typically MOV), require the output protocol to
be seekable, so they will fail with the pipe output protocol.


=head2 rtmp


Real-Time Messaging Protocol.

The Real-Time Messaging Protocol (RTMP) is used for streaming multimedia
content across a TCP/IP network.

The required syntax is:
	
	rtmp://<server>[:<port>][/<app>][/<instance>][/<playpath>]


The accepted parameters are:

=over 4



=item B<server>

The address of the RTMP server.


=item B<port>

The number of the TCP port to use (by default is 1935).


=item B<app>

It is the name of the application to access. It usually corresponds to
the path where the application is installed on the RTMP server
(e.g. F</ondemand/>, F</flash/live/>, etc.). You can override
the value parsed from the URI through the C<rtmp_app> option, too.


=item B<playpath>

It is the path or name of the resource to play with reference to the
application specified in I<app>, may be prefixed by "mp4:". You
can override the value parsed from the URI through the C<rtmp_playpath>
option, too.


=item B<listen>

Act as a server, listening for an incoming connection.


=item B<timeout>

Maximum time to wait for the incoming connection. Implies listen.

=back


Additionally, the following parameters can be set via command line options
(or in code via C<AVOption>s):

=over 4



=item B<rtmp_app>

Name of application to connect on the RTMP server. This option
overrides the parameter specified in the URI.


=item B<rtmp_buffer>

Set the client buffer time in milliseconds. The default is 3000.


=item B<rtmp_conn>

Extra arbitrary AMF connection parameters, parsed from a string,
e.g. like C<B:1 S:authMe O:1 NN:code:1.23 NS:flag:ok O:0>.
Each value is prefixed by a single character denoting the type,
B for Boolean, N for number, S for string, O for object, or Z for null,
followed by a colon. For Booleans the data must be either 0 or 1 for
FALSE or TRUE, respectively.  Likewise for Objects the data must be 0 or
1 to end or begin an object, respectively. Data items in subobjects may
be named, by prefixing the type with 'N' and specifying the name before
the value (i.e. C<NB:myFlag:1>). This option may be used multiple
times to construct arbitrary AMF sequences.


=item B<rtmp_flashver>

Version of the Flash plugin used to run the SWF player. The default
is LNX 9,0,124,2.


=item B<rtmp_flush_interval>

Number of packets flushed in the same request (RTMPT only). The default
is 10.


=item B<rtmp_live>

Specify that the media is a live stream. No resuming or seeking in
live streams is possible. The default value is C<any>, which means the
subscriber first tries to play the live stream specified in the
playpath. If a live stream of that name is not found, it plays the
recorded stream. The other possible values are C<live> and
C<recorded>.


=item B<rtmp_pageurl>

URL of the web page in which the media was embedded. By default no
value will be sent.


=item B<rtmp_playpath>

Stream identifier to play or to publish. This option overrides the
parameter specified in the URI.


=item B<rtmp_subscribe>

Name of live stream to subscribe to. By default no value will be sent.
It is only sent if the option is specified or if rtmp_live
is set to live.


=item B<rtmp_swfhash>

SHA256 hash of the decompressed SWF file (32 bytes).


=item B<rtmp_swfsize>

Size of the decompressed SWF file, required for SWFVerification.


=item B<rtmp_swfurl>

URL of the SWF player for the media. By default no value will be sent.


=item B<rtmp_swfverify>

URL to player swf file, compute hash/size automatically.


=item B<rtmp_tcurl>

URL of the target stream. Defaults to proto://host[:port]/app.


=back


For example to read with B<ffplay> a multimedia resource named
"sample" from the application "vod" from an RTMP server "myserver":
	
	ffplay rtmp://myserver/vod/sample



=head2 rtmpe


Encrypted Real-Time Messaging Protocol.

The Encrypted Real-Time Messaging Protocol (RTMPE) is used for
streaming multimedia content within standard cryptographic primitives,
consisting of Diffie-Hellman key exchange and HMACSHA256, generating
a pair of RC4 keys.


=head2 rtmps


Real-Time Messaging Protocol over a secure SSL connection.

The Real-Time Messaging Protocol (RTMPS) is used for streaming
multimedia content across an encrypted connection.


=head2 rtmpt


Real-Time Messaging Protocol tunneled through HTTP.

The Real-Time Messaging Protocol tunneled through HTTP (RTMPT) is used
for streaming multimedia content within HTTP requests to traverse
firewalls.


=head2 rtmpte


Encrypted Real-Time Messaging Protocol tunneled through HTTP.

The Encrypted Real-Time Messaging Protocol tunneled through HTTP (RTMPTE)
is used for streaming multimedia content within HTTP requests to traverse
firewalls.


=head2 rtmpts


Real-Time Messaging Protocol tunneled through HTTPS.

The Real-Time Messaging Protocol tunneled through HTTPS (RTMPTS) is used
for streaming multimedia content within HTTPS requests to traverse
firewalls.


=head2 rtmp, rtmpe, rtmps, rtmpt, rtmpte


Real-Time Messaging Protocol and its variants supported through
librtmp.

Requires the presence of the librtmp headers and library during
configuration. You need to explicitly configure the build with
"--enable-librtmp". If enabled this will replace the native RTMP
protocol.

This protocol provides most client functions and a few server
functions needed to support RTMP, RTMP tunneled in HTTP (RTMPT),
encrypted RTMP (RTMPE), RTMP over SSL/TLS (RTMPS) and tunneled
variants of these encrypted types (RTMPTE, RTMPTS).

The required syntax is:
	
	<rtmp_proto>://<server>[:<port>][/<app>][/<playpath>] <options>


where I<rtmp_proto> is one of the strings "rtmp", "rtmpt", "rtmpe",
"rtmps", "rtmpte", "rtmpts" corresponding to each RTMP variant, and
I<server>, I<port>, I<app> and I<playpath> have the same
meaning as specified for the RTMP native protocol.
I<options> contains a list of space-separated options of the form
I<key>=I<val>.

See the librtmp manual page (man 3 librtmp) for more information.

For example, to stream a file in real-time to an RTMP server using
B<ffmpeg>:
	
	ffmpeg -re -i myfile -f flv rtmp://myserver/live/mystream


To play the same stream using B<ffplay>:
	
	ffplay "rtmp://myserver/live/mystream live=1"



=head2 rtp


Real-Time Protocol.


=head2 rtsp


RTSP is not technically a protocol handler in libavformat, it is a demuxer
and muxer. The demuxer supports both normal RTSP (with data transferred
over RTP; this is used by e.g. Apple and Microsoft) and Real-RTSP (with
data transferred over RDT).

The muxer can be used to send a stream using RTSP ANNOUNCE to a server
supporting it (currently Darwin Streaming Server and Mischa Spiegelmock's
 RTSP server (C<http://github.com/revmischa/rtsp-server>)).

The required syntax for a RTSP url is:
	
	rtsp://<hostname>[:<port>]/<path>


The following options (set on the B<ffmpeg>/B<ffplay> command
line, or set in code via C<AVOption>s or in C<avformat_open_input>),
are supported:

Flags for C<rtsp_transport>:


=over 4



=item B<udp>

Use UDP as lower transport protocol.


=item B<tcp>

Use TCP (interleaving within the RTSP control channel) as lower
transport protocol.


=item B<udp_multicast>

Use UDP multicast as lower transport protocol.


=item B<http>

Use HTTP tunneling as lower transport protocol, which is useful for
passing proxies.

=back


Multiple lower transport protocols may be specified, in that case they are
tried one at a time (if the setup of one fails, the next one is tried).
For the muxer, only the C<tcp> and C<udp> options are supported.

Flags for C<rtsp_flags>:


=over 4


=item B<filter_src>

Accept packets only from negotiated peer address and port.

=item B<listen>

Act as a server, listening for an incoming connection.

=back


When receiving data over UDP, the demuxer tries to reorder received packets
(since they may arrive out of order, or packets may get lost totally). This
can be disabled by setting the maximum demuxing delay to zero (via
the C<max_delay> field of AVFormatContext).

When watching multi-bitrate Real-RTSP streams with B<ffplay>, the
streams to display can be chosen with C<-vst> I<n> and
C<-ast> I<n> for video and audio respectively, and can be switched
on the fly by pressing C<v> and C<a>.

Example command lines:

To watch a stream over UDP, with a max reordering delay of 0.5 seconds:

	
	ffplay -max_delay 500000 -rtsp_transport udp rtsp://server/video.mp4


To watch a stream tunneled over HTTP:

	
	ffplay -rtsp_transport http rtsp://server/video.mp4


To send a stream in realtime to a RTSP server, for others to watch:

	
	ffmpeg -re -i <input> -f rtsp -muxdelay 0.1 rtsp://server/live.sdp


To receive a stream in realtime:

	
	ffmpeg -rtsp_flags listen -i rtsp://ownaddress/live.sdp <output>



=head2 sap


Session Announcement Protocol (RFC 2974). This is not technically a
protocol handler in libavformat, it is a muxer and demuxer.
It is used for signalling of RTP streams, by announcing the SDP for the
streams regularly on a separate port.


=head3 Muxer


The syntax for a SAP url given to the muxer is:
	
	sap://<destination>[:<port>][?<options>]


The RTP packets are sent to I<destination> on port I<port>,
or to port 5004 if no port is specified.
I<options> is a C<&>-separated list. The following options
are supported:


=over 4



=item B<announce_addr=>I<address>

Specify the destination IP address for sending the announcements to.
If omitted, the announcements are sent to the commonly used SAP
announcement multicast address 224.2.127.254 (sap.mcast.net), or
ff0e::2:7ffe if I<destination> is an IPv6 address.


=item B<announce_port=>I<port>

Specify the port to send the announcements on, defaults to
9875 if not specified.


=item B<ttl=>I<ttl>

Specify the time to live value for the announcements and RTP packets,
defaults to 255.


=item B<same_port=>I<0|1>

If set to 1, send all RTP streams on the same port pair. If zero (the
default), all streams are sent on unique ports, with each stream on a
port 2 numbers higher than the previous.
VLC/Live555 requires this to be set to 1, to be able to receive the stream.
The RTP stack in libavformat for receiving requires all streams to be sent
on unique ports.

=back


Example command lines follow.

To broadcast a stream on the local subnet, for watching in VLC:

	
	ffmpeg -re -i <input> -f sap sap://224.0.0.255?same_port=1


Similarly, for watching in B<ffplay>:

	
	ffmpeg -re -i <input> -f sap sap://224.0.0.255


And for watching in B<ffplay>, over IPv6:

	
	ffmpeg -re -i <input> -f sap sap://[ff0e::1:2:3:4]



=head3 Demuxer


The syntax for a SAP url given to the demuxer is:
	
	sap://[<address>][:<port>]


I<address> is the multicast address to listen for announcements on,
if omitted, the default 224.2.127.254 (sap.mcast.net) is used. I<port>
is the port that is listened on, 9875 if omitted.

The demuxers listens for announcements on the given address and port.
Once an announcement is received, it tries to receive that particular stream.

Example command lines follow.

To play back the first stream announced on the normal SAP multicast address:

	
	ffplay sap://


To play back the first stream announced on one the default IPv6 SAP multicast address:

	
	ffplay sap://[ff0e::2:7ffe]



=head2 tcp


Trasmission Control Protocol.

The required syntax for a TCP url is:
	
	tcp://<hostname>:<port>[?<options>]



=over 4



=item B<listen>

Listen for an incoming connection


=item B<timeout=>I<microseconds>

In read mode: if no data arrived in more than this time interval, raise error.
In write mode: if socket cannot be written in more than this time interval, raise error.
This also sets timeout on TCP connection establishing.

	
	ffmpeg -i <input> -f <format> tcp://<hostname>:<port>?listen
	ffplay tcp://<hostname>:<port>



=back



=head2 tls


Transport Layer Security/Secure Sockets Layer

The required syntax for a TLS/SSL url is:
	
	tls://<hostname>:<port>[?<options>]



=over 4



=item B<listen>

Act as a server, listening for an incoming connection.


=item B<cafile=>I<filename>

Certificate authority file. The file must be in OpenSSL PEM format.


=item B<cert=>I<filename>

Certificate file. The file must be in OpenSSL PEM format.


=item B<key=>I<filename>

Private key file.


=item B<verify=>I<0|1>

Verify the peer's certificate.


=back


Example command lines:

To create a TLS/SSL server that serves an input stream.

	
	ffmpeg -i <input> -f <format> tls://<hostname>:<port>?listen&cert=<server.crt>&key=<server.key>


To play back a stream from the TLS/SSL server using B<ffplay>:

	
	ffplay tls://<hostname>:<port>



=head2 udp


User Datagram Protocol.

The required syntax for a UDP url is:
	
	udp://<hostname>:<port>[?<options>]


I<options> contains a list of &-separated options of the form I<key>=I<val>.

In case threading is enabled on the system, a circular buffer is used
to store the incoming data, which allows to reduce loss of data due to
UDP socket buffer overruns. The I<fifo_size> and
I<overrun_nonfatal> options are related to this buffer.

The list of supported options follows.


=over 4



=item B<buffer_size=>I<size>

Set the UDP socket buffer size in bytes. This is used both for the
receiving and the sending buffer size.


=item B<localport=>I<port>

Override the local UDP port to bind with.


=item B<localaddr=>I<addr>

Choose the local IP address. This is useful e.g. if sending multicast
and the host has multiple interfaces, where the user can choose
which interface to send on by specifying the IP address of that interface.


=item B<pkt_size=>I<size>

Set the size in bytes of UDP packets.


=item B<reuse=>I<1|0>

Explicitly allow or disallow reusing UDP sockets.


=item B<ttl=>I<ttl>

Set the time to live value (for multicast only).


=item B<connect=>I<1|0>

Initialize the UDP socket with C<connect()>. In this case, the
destination address can't be changed with ff_udp_set_remote_url later.
If the destination address isn't known at the start, this option can
be specified in ff_udp_set_remote_url, too.
This allows finding out the source address for the packets with getsockname,
and makes writes return with AVERROR(ECONNREFUSED) if "destination
unreachable" is received.
For receiving, this gives the benefit of only receiving packets from
the specified peer address/port.


=item B<sources=>I<address>B<[,>I<address>B<]>

Only receive packets sent to the multicast group from one of the
specified sender IP addresses.


=item B<block=>I<address>B<[,>I<address>B<]>

Ignore packets sent to the multicast group from the specified
sender IP addresses.


=item B<fifo_size=>I<units>

Set the UDP receiving circular buffer size, expressed as a number of
packets with size of 188 bytes. If not specified defaults to 7*4096.


=item B<overrun_nonfatal=>I<1|0>

Survive in case of UDP receiving circular buffer overrun. Default
value is 0.


=item B<timeout=>I<microseconds>

In read mode: if no data arrived in more than this time interval, raise error.

=back


Some usage examples of the UDP protocol with B<ffmpeg> follow.

To stream over UDP to a remote endpoint:
	
	ffmpeg -i <input> -f <format> udp://<hostname>:<port>


To stream in mpegts format over UDP using 188 sized UDP packets, using a large input buffer:
	
	ffmpeg -i <input> -f mpegts udp://<hostname>:<port>?pkt_size=188&buffer_size=65535


To receive over UDP from a remote endpoint:
	
	ffmpeg -i udp://[<multicast-address>]:<port>



=head1 BITSTREAM FILTERS


When you configure your FFmpeg build, all the supported bitstream
filters are enabled by default. You can list all available ones using
the configure option C<--list-bsfs>.

You can disable all the bitstream filters using the configure option
C<--disable-bsfs>, and selectively enable any bitstream filter using
the option C<--enable-bsf=BSF>, or you can disable a particular
bitstream filter using the option C<--disable-bsf=BSF>.

The option C<-bsfs> of the ff* tools will display the list of
all the supported bitstream filters included in your build.

Below is a description of the currently available bitstream filters.


=head2 aac_adtstoasc



=head2 chomp



=head2 dump_extradata



=head2 h264_mp4toannexb


Convert an H.264 bitstream from length prefixed mode to start code
prefixed mode (as defined in the Annex B of the ITU-T H.264
specification).

This is required by some streaming formats, typically the MPEG-2
transport stream format ("mpegts").

For example to remux an MP4 file containing an H.264 stream to mpegts
format with B<ffmpeg>, you can use the command:

	
	ffmpeg -i INPUT.mp4 -codec copy -bsf:v h264_mp4toannexb OUTPUT.ts



=head2 imx_dump_header



=head2 mjpeg2jpeg


Convert MJPEG/AVI1 packets to full JPEG/JFIF packets.

MJPEG is a video codec wherein each video frame is essentially a
JPEG image. The individual frames can be extracted without loss,
e.g. by

	
	ffmpeg -i ../some_mjpeg.avi -c:v copy frames_%d.jpg


Unfortunately, these chunks are incomplete JPEG images, because
they lack the DHT segment required for decoding. Quoting from
E<lt>B<http://www.digitalpreservation.gov/formats/fdd/fdd000063.shtml>E<gt>:

Avery Lee, writing in the rec.video.desktop newsgroup in 2001,
commented that "MJPEG, or at least the MJPEG in AVIs having the
MJPG fourcc, is restricted JPEG with a fixed -- and *omitted* --
Huffman table. The JPEG must be YCbCr colorspace, it must be 4:2:2,
and it must use basic Huffman encoding, not arithmetic or
progressive. . . . You can indeed extract the MJPEG frames and
decode them with a regular JPEG decoder, but you have to prepend
the DHT segment to them, or else the decoder won't have any idea
how to decompress the data. The exact table necessary is given in
the OpenDML spec."

This bitstream filter patches the header of frames extracted from an MJPEG
stream (carrying the AVI1 header ID and lacking a DHT segment) to
produce fully qualified JPEG images.

	
	ffmpeg -i mjpeg-movie.avi -c:v copy -bsf:v mjpeg2jpeg frame_%d.jpg
	exiftran -i -9 frame*.jpg
	ffmpeg -i frame_%d.jpg -c:v copy rotated.avi



=head2 mjpega_dump_header



=head2 movsub



=head2 mp3_header_compress



=head2 mp3_header_decompress



=head2 noise



=head2 remove_extradata



=head1 FILTERING INTRODUCTION


Filtering in FFmpeg is enabled through the libavfilter library.

Libavfilter is the filtering API of FFmpeg. It is the substitute of
the now deprecated 'vhooks' and started as a Google Summer of Code
project.

Audio filtering integration into the main FFmpeg repository is a work in
progress, so audio API and ABI should not be considered stable yet.

In libavfilter, it is possible for filters to have multiple inputs and
multiple outputs.
To illustrate the sorts of things that are possible, we can
use a complex filter graph. For example, the following one:

	
	input --> split --> fifo -----------------------> overlay --> output
	            |                                        ^
	            |                                        |
	            +------> fifo --> crop --> vflip --------+


splits the stream in two streams, sends one stream through the crop filter
and the vflip filter before merging it back with the other stream by
overlaying it on top. You can use the following command to achieve this:

	
	ffmpeg -i input -vf "[in] split [T1], fifo, [T2] overlay=0:H/2 [out]; [T1] fifo, crop=iw:ih/2:0:ih/2, vflip [T2]" output


The result will be that in output the top half of the video is mirrored
onto the bottom half.

Filters are loaded using the I<-vf> or I<-af> option passed to
B<ffmpeg> or to B<ffplay>. Filters in the same linear
chain are separated by commas. In our example, I<split, fifo,
overlay> are in one linear chain, and I<fifo, crop, vflip> are in
another. The points where the linear chains join are labeled by names
enclosed in square brackets. In our example, that is I<[T1]> and
I<[T2]>. The special labels I<[in]> and I<[out]> are the points
where video is input and output.

Some filters take in input a list of parameters: they are specified
after the filter name and an equal sign, and are separated from each other
by a colon.

There exist so-called I<source filters> that do not have an
audio/video input, and I<sink filters> that will not have audio/video
output.


=head1 GRAPH


The F<graph2dot> program included in the FFmpeg F<tools>
directory can be used to parse a filter graph description and issue a
corresponding textual representation in the dot language.

Invoke the command:
	
	graph2dot -h


to see how to use F<graph2dot>.

You can then pass the dot description to the F<dot> program (from
the graphviz suite of programs) and obtain a graphical representation
of the filter graph.

For example the sequence of commands:
	
	echo <GRAPH_DESCRIPTION> | \
	tools/graph2dot -o graph.tmp && \
	dot -Tpng graph.tmp -o graph.png && \
	display graph.png


can be used to create and display an image representing the graph
described by the I<GRAPH_DESCRIPTION> string. Note that this string must be
a complete self-contained graph, with its inputs and outputs explicitly defined.
For example if your command line is of the form:
	
	ffmpeg -i infile -vf scale=640:360 outfile

your I<GRAPH_DESCRIPTION> string will need to be of the form:
	
	nullsrc,scale=640:360,nullsink

you may also need to set the I<nullsrc> parameters and add a I<format>
filter in order to simulate a specific input file.


=head1 FILTERGRAPH DESCRIPTION


A filtergraph is a directed graph of connected filters. It can contain
cycles, and there can be multiple links between a pair of
filters. Each link has one input pad on one side connecting it to one
filter from which it takes its input, and one output pad on the other
side connecting it to the one filter accepting its output.

Each filter in a filtergraph is an instance of a filter class
registered in the application, which defines the features and the
number of input and output pads of the filter.

A filter with no input pads is called a "source", a filter with no
output pads is called a "sink".



=head2 Filtergraph syntax


A filtergraph can be represented using a textual representation, which is
recognized by the B<-filter>/B<-vf> and B<-filter_complex>
options in B<ffmpeg> and B<-vf> in B<ffplay>, and by the
C<avfilter_graph_parse()>/C<avfilter_graph_parse2()> function defined in
F<libavfilter/avfiltergraph.h>.

A filterchain consists of a sequence of connected filters, each one
connected to the previous one in the sequence. A filterchain is
represented by a list of ","-separated filter descriptions.

A filtergraph consists of a sequence of filterchains. A sequence of
filterchains is represented by a list of ";"-separated filterchain
descriptions.

A filter is represented by a string of the form:
[I<in_link_1>]...[I<in_link_N>]I<filter_name>=I<arguments>[I<out_link_1>]...[I<out_link_M>]

I<filter_name> is the name of the filter class of which the
described filter is an instance of, and has to be the name of one of
the filter classes registered in the program.
The name of the filter class is optionally followed by a string
"=I<arguments>".

I<arguments> is a string which contains the parameters used to
initialize the filter instance, and are described in the filter
descriptions below.

The list of arguments can be quoted using the character "'" as initial
and ending mark, and the character '\' for escaping the characters
within the quoted text; otherwise the argument string is considered
terminated when the next special character (belonging to the set
"[]=;,") is encountered.

The name and arguments of the filter are optionally preceded and
followed by a list of link labels.
A link label allows to name a link and associate it to a filter output
or input pad. The preceding labels I<in_link_1>
... I<in_link_N>, are associated to the filter input pads,
the following labels I<out_link_1> ... I<out_link_M>, are
associated to the output pads.

When two link labels with the same name are found in the
filtergraph, a link between the corresponding input and output pad is
created.

If an output pad is not labelled, it is linked by default to the first
unlabelled input pad of the next filter in the filterchain.
For example in the filterchain:
	
	nullsrc, split[L1], [L2]overlay, nullsink

the split filter instance has two output pads, and the overlay filter
instance two input pads. The first output pad of split is labelled
"L1", the first input pad of overlay is labelled "L2", and the second
output pad of split is linked to the second input pad of overlay,
which are both unlabelled.

In a complete filterchain all the unlabelled filter input and output
pads must be connected. A filtergraph is considered valid if all the
filter input and output pads of all the filterchains are connected.

Libavfilter will automatically insert scale filters where format
conversion is required. It is possible to specify swscale flags
for those automatically inserted scalers by prepending
C<sws_flags=I<flags>;>
to the filtergraph description.

Follows a BNF description for the filtergraph syntax:
	
	<NAME>             ::= sequence of alphanumeric characters and '_'
	<LINKLABEL>        ::= "[" <NAME> "]"
	<LINKLABELS>       ::= <LINKLABEL> [<LINKLABELS>]
	<FILTER_ARGUMENTS> ::= sequence of chars (eventually quoted)
	<FILTER>           ::= [<LINKNAMES>] <NAME> ["=" <ARGUMENTS>] [<LINKNAMES>]
	<FILTERCHAIN>      ::= <FILTER> [,<FILTERCHAIN>]
	<FILTERGRAPH>      ::= [sws_flags=<flags>;] <FILTERCHAIN> [;<FILTERGRAPH>]



=head1 AUDIO FILTERS


When you configure your FFmpeg build, you can disable any of the
existing filters using C<--disable-filters>.
The configure output will show the audio filters included in your
build.

Below is a description of the currently available audio filters.


=head2 aconvert


Convert the input audio format to the specified formats.

The filter accepts a string of the form:
"I<sample_format>:I<channel_layout>".

I<sample_format> specifies the sample format, and can be a string or the
corresponding numeric value defined in F<libavutil/samplefmt.h>. Use 'p'
suffix for a planar sample format.

I<channel_layout> specifies the channel layout, and can be a string
or the corresponding number value defined in F<libavutil/audioconvert.h>.

The special parameter "auto", signifies that the filter will
automatically select the output format depending on the output filter.

Some examples follow.


=over 4


=item *

Convert input to float, planar, stereo:
	
	aconvert=fltp:stereo



=item *

Convert input to unsigned 8-bit, automatically select out channel layout:
	
	aconvert=u8:auto


=back



=head2 aformat


Convert the input audio to one of the specified formats. The framework will
negotiate the most appropriate format to minimize conversions.

The filter accepts the following named parameters:

=over 4



=item B<sample_fmts>

A comma-separated list of requested sample formats.


=item B<sample_rates>

A comma-separated list of requested sample rates.


=item B<channel_layouts>

A comma-separated list of requested channel layouts.


=back


If a parameter is omitted, all values are allowed.

For example to force the output to either unsigned 8-bit or signed 16-bit stereo:
	
	aformat=sample_fmts\=u8,s16:channel_layouts\=stereo



=head2 amerge


Merge two or more audio streams into a single multi-channel stream.

The filter accepts the following named options:


=over 4



=item B<inputs>

Set the number of inputs. Default is 2.


=back


If the channel layouts of the inputs are disjoint, and therefore compatible,
the channel layout of the output will be set accordingly and the channels
will be reordered as necessary. If the channel layouts of the inputs are not
disjoint, the output will have all the channels of the first input then all
the channels of the second input, in that order, and the channel layout of
the output will be the default value corresponding to the total number of
channels.

For example, if the first input is in 2.1 (FL+FR+LF) and the second input
is FC+BL+BR, then the output will be in 5.1, with the channels in the
following order: a1, a2, b1, a3, b2, b3 (a1 is the first channel of the
first input, b1 is the first channel of the second input).

On the other hand, if both input are in stereo, the output channels will be
in the default order: a1, a2, b1, b2, and the channel layout will be
arbitrarily set to 4.0, which may or may not be the expected value.

All inputs must have the same sample rate, and format.

If inputs do not have the same duration, the output will stop with the
shortest.

Example: merge two mono files into a stereo stream:
	
	amovie=left.wav [l] ; amovie=right.mp3 [r] ; [l] [r] amerge


Example: multiple merges:
	
	ffmpeg -f lavfi -i "
	amovie=input.mkv:si=0 [a0];
	amovie=input.mkv:si=1 [a1];
	amovie=input.mkv:si=2 [a2];
	amovie=input.mkv:si=3 [a3];
	amovie=input.mkv:si=4 [a4];
	amovie=input.mkv:si=5 [a5];
	[a0][a1][a2][a3][a4][a5] amerge=inputs=6" -c:a pcm_s16le output.mkv



=head2 amix


Mixes multiple audio inputs into a single output.

For example
	
	ffmpeg -i INPUT1 -i INPUT2 -i INPUT3 -filter_complex amix=inputs=3:duration=first:dropout_transition=3 OUTPUT

will mix 3 input audio streams to a single output with the same duration as the
first input and a dropout transition time of 3 seconds.

The filter accepts the following named parameters:

=over 4



=item B<inputs>

Number of inputs. If unspecified, it defaults to 2.


=item B<duration>

How to determine the end-of-stream.

=over 4



=item B<longest>

Duration of longest input. (default)


=item B<shortest>

Duration of shortest input.


=item B<first>

Duration of first input.


=back



=item B<dropout_transition>

Transition time, in seconds, for volume renormalization when an input
stream ends. The default value is 2 seconds.


=back



=head2 anull


Pass the audio source unchanged to the output.


=head2 aresample


Resample the input audio to the specified sample rate.

The filter accepts exactly one parameter, the output sample rate. If not
specified then the filter will automatically convert between its input
and output sample rates.

For example, to resample the input audio to 44100Hz:
	
	aresample=44100



=head2 asetnsamples


Set the number of samples per each output audio frame.

The last output packet may contain a different number of samples, as
the filter will flush all the remaining samples when the input audio
signal its end.

The filter accepts parameters as a list of I<key>=I<value> pairs,
separated by ":".


=over 4



=item B<nb_out_samples, n>

Set the number of frames per each output audio frame. The number is
intended as the number of samples I<per each channel>.
Default value is 1024.


=item B<pad, p>

If set to 1, the filter will pad the last audio frame with zeroes, so
that the last frame will contain the same number of samples as the
previous ones. Default value is 1.

=back


For example, to set the number of per-frame samples to 1234 and
disable padding for the last frame, use:
	
	asetnsamples=n=1234:p=0



=head2 ashowinfo


Show a line containing various information for each input audio frame.
The input audio is not modified.

The shown line contains a sequence of key/value pairs of the form
I<key>:I<value>.

A description of each shown parameter follows:


=over 4


=item B<n>

sequential number of the input frame, starting from 0


=item B<pts>

presentation TimeStamp of the input frame, expressed as a number of
time base units. The time base unit depends on the filter input pad, and
is usually 1/I<sample_rate>.


=item B<pts_time>

presentation TimeStamp of the input frame, expressed as a number of
seconds


=item B<pos>

position of the frame in the input stream, -1 if this information in
unavailable and/or meaningless (for example in case of synthetic audio)


=item B<fmt>

sample format name


=item B<chlayout>

channel layout description


=item B<nb_samples>

number of samples (per each channel) contained in the filtered frame


=item B<rate>

sample rate for the audio frame


=item B<checksum>

Adler-32 checksum (printed in hexadecimal) of all the planes of the input frame


=item B<plane_checksum>

Adler-32 checksum (printed in hexadecimal) for each input frame plane,
expressed in the form "[I<c0> I<c1> I<c2> I<c3> I<c4> I<c5>
I<c6> I<c7>]"

=back



=head2 asplit


Split input audio into several identical outputs.

The filter accepts a single parameter which specifies the number of outputs. If
unspecified, it defaults to 2.

For example:
	
	[in] asplit [out0][out1]


will create two separate outputs from the same input.

To create 3 or more outputs, you need to specify the number of
outputs, like in:
	
	[in] asplit=3 [out0][out1][out2]


	
	ffmpeg -i INPUT -filter_complex asplit=5 OUTPUT

will create 5 copies of the input audio.



=head2 astreamsync


Forward two audio streams and control the order the buffers are forwarded.

The argument to the filter is an expression deciding which stream should be
forwarded next: if the result is negative, the first stream is forwarded; if
the result is positive or zero, the second stream is forwarded. It can use
the following variables:


=over 4


=item I<b1 b2>

number of buffers forwarded so far on each stream

=item I<s1 s2>

number of samples forwarded so far on each stream

=item I<t1 t2>

current timestamp of each stream

=back


The default value is C<t1-t2>, which means to always forward the stream
that has a smaller timestamp.

Example: stress-test C<amerge> by randomly sending buffers on the wrong
input, while avoiding too much of a desynchronization:
	
	amovie=file.ogg [a] ; amovie=file.mp3 [b] ;
	[a] [b] astreamsync=(2*random(1))-1+tanh(5*(t1-t2)) [a2] [b2] ;
	[a2] [b2] amerge



=head2 atempo


Adjust audio tempo.

The filter accepts exactly one parameter, the audio tempo. If not
specified then the filter will assume nominal 1.0 tempo. Tempo must
be in the [0.5, 2.0] range.

For example, to slow down audio to 80% tempo:
	
	atempo=0.8


For example, to speed up audio to 125% tempo:
	
	atempo=1.25



=head2 earwax


Make audio easier to listen to on headphones.

This filter adds `cues' to 44.1kHz stereo (i.e. audio CD format) audio
so that when listened to on headphones the stereo image is moved from
inside your head (standard for headphones) to outside and in front of
the listener (standard for speakers).

Ported from SoX.


=head2 pan


Mix channels with specific gain levels. The filter accepts the output
channel layout followed by a set of channels definitions.

This filter is also designed to remap efficiently the channels of an audio
stream.

The filter accepts parameters of the form:
"I<l>:I<outdef>:I<outdef>:..."


=over 4


=item B<l>

output channel layout or number of channels


=item B<outdef>

output channel specification, of the form:
"I<out_name>=[I<gain>*]I<in_name>[+[I<gain>*]I<in_name>...]"


=item B<out_name>

output channel to define, either a channel name (FL, FR, etc.) or a channel
number (c0, c1, etc.)


=item B<gain>

multiplicative coefficient for the channel, 1 leaving the volume unchanged


=item B<in_name>

input channel to use, see out_name for details; it is not possible to mix
named and numbered input channels

=back


If the `=' in a channel specification is replaced by `E<lt>', then the gains for
that specification will be renormalized so that the total is 1, thus
avoiding clipping noise.


=head3 Mixing examples


For example, if you want to down-mix from stereo to mono, but with a bigger
factor for the left channel:
	
	pan=1:c0=0.9*c0+0.1*c1


A customized down-mix to stereo that works automatically for 3-, 4-, 5- and
7-channels surround:
	
	pan=stereo: FL < FL + 0.5*FC + 0.6*BL + 0.6*SL : FR < FR + 0.5*FC + 0.6*BR + 0.6*SR


Note that B<ffmpeg> integrates a default down-mix (and up-mix) system
that should be preferred (see "-ac" option) unless you have very specific
needs.


=head3 Remapping examples


The channel remapping will be effective if, and only if:


=over 4


=item *<gain coefficients are zeroes or ones,>


=item *<only one input per channel output,>


=back


If all these conditions are satisfied, the filter will notify the user ("Pure
channel mapping detected"), and use an optimized and lossless method to do the
remapping.

For example, if you have a 5.1 source and want a stereo audio stream by
dropping the extra channels:
	
	pan="stereo: c0=FL : c1=FR"


Given the same source, you can also switch front left and front right channels
and keep the input channel layout:
	
	pan="5.1: c0=c1 : c1=c0 : c2=c2 : c3=c3 : c4=c4 : c5=c5"


If the input is a stereo audio stream, you can mute the front left channel (and
still keep the stereo channel layout) with:
	
	pan="stereo:c1=c1"


Still with a stereo audio stream input, you can copy the right channel in both
front left and right:
	
	pan="stereo: c0=FR : c1=FR"



=head2 silencedetect


Detect silence in an audio stream.

This filter logs a message when it detects that the input audio volume is less
or equal to a noise tolerance value for a duration greater or equal to the
minimum detected noise duration.

The printed times and duration are expressed in seconds.


=over 4


=item B<duration, d>

Set silence duration until notification (default is 2 seconds).


=item B<noise, n>

Set noise tolerance. Can be specified in dB (in case "dB" is appended to the
specified value) or amplitude ratio. Default is -60dB, or 0.001.

=back


Detect 5 seconds of silence with -50dB noise tolerance:
	
	silencedetect=n=-50dB:d=5


Complete example with B<ffmpeg> to detect silence with 0.0001 noise
tolerance in F<silence.mp3>:
	
	ffmpeg -f lavfi -i amovie=silence.mp3,silencedetect=noise=0.0001 -f null -



=head2 volume


Adjust the input audio volume.

The filter accepts exactly one parameter I<vol>, which expresses
how the audio volume will be increased or decreased.

Output values are clipped to the maximum value.

If I<vol> is expressed as a decimal number, the output audio
volume is given by the relation:
	
	<output_volume> = <vol> * <input_volume>


If I<vol> is expressed as a decimal number followed by the string
"dB", the value represents the requested change in decibels of the
input audio power, and the output audio volume is given by the
relation:
	
	<output_volume> = 10^(<vol>/20) * <input_volume>


Otherwise I<vol> is considered an expression and its evaluated
value is used for computing the output audio volume according to the
first relation.

Default value for I<vol> is 1.0.


=head3 Examples



=over 4


=item *

Half the input audio volume:
	
	volume=0.5


The above example is equivalent to:
	
	volume=1/2



=item *

Decrease input audio power by 12 decibels:
	
	volume=-12dB


=back



=head2 volumedetect


Detect the volume of the input video.

The filter has no parameters. The input is not modified. Statistics about
the volume will be printed in the log when the input stream end is reached.

In particular it will show the mean volume (root mean square), maximum
volume (on a per-sample basis), and the beginning of an histogram of the
registered volume values (from the maximum value to a cumulated 1/1000 of
the samples).

All volumes are in decibels relative to the maximum PCM value.

Here is an excerpt of the output:
	
	[Parsed_volumedetect_0  0xa23120] mean_volume: -27 dB
	[Parsed_volumedetect_0  0xa23120] max_volume: -4 dB
	[Parsed_volumedetect_0  0xa23120] histogram_4db: 6
	[Parsed_volumedetect_0  0xa23120] histogram_5db: 62
	[Parsed_volumedetect_0  0xa23120] histogram_6db: 286
	[Parsed_volumedetect_0  0xa23120] histogram_7db: 1042
	[Parsed_volumedetect_0  0xa23120] histogram_8db: 2551
	[Parsed_volumedetect_0  0xa23120] histogram_9db: 4609
	[Parsed_volumedetect_0  0xa23120] histogram_10db: 8409


It means that:

=over 4


=item *

The mean square energy is approximately -27 dB, or 10^-2.7.

=item *

The largest sample is at -4 dB, or more precisely between -4 dB and -5 dB.

=item *

There are 6 samples at -4 dB, 62 at -5 dB, 286 at -6 dB, etc.

=back


In other words, raising the volume by +4 dB does not cause any clipping,
raising it by +5 dB causes clipping for 6 samples, etc.


=head2 asyncts

Synchronize audio data with timestamps by squeezing/stretching it and/or
dropping samples/adding silence when needed.

The filter accepts the following named parameters:

=over 4



=item B<compensate>

Enable stretching/squeezing the data to make it match the timestamps. Disabled
by default. When disabled, time gaps are covered with silence.


=item B<min_delta>

Minimum difference between timestamps and audio data (in seconds) to trigger
adding/dropping samples. Default value is 0.1. If you get non-perfect sync with
this filter, try setting this parameter to 0.


=item B<max_comp>

Maximum compensation in samples per second. Relevant only with compensate=1.
Default value 500.


=item B<first_pts>

Assume the first pts should be this value.
This allows for padding/trimming at the start of stream. By default, no
assumption is made about the first frame's expected pts, so no padding or
trimming is done. For example, this could be set to 0 to pad the beginning with
silence if an audio stream starts after the video stream.


=back



=head2 channelsplit

Split each channel in input audio stream into a separate output stream.

This filter accepts the following named parameters:

=over 4


=item B<channel_layout>

Channel layout of the input stream. Default is "stereo".

=back


For example, assuming a stereo input MP3 file
	
	ffmpeg -i in.mp3 -filter_complex channelsplit out.mkv

will create an output Matroska file with two audio streams, one containing only
the left channel and the other the right channel.

To split a 5.1 WAV file into per-channel files
	
	ffmpeg -i in.wav -filter_complex
	'channelsplit=channel_layout=5.1[FL][FR][FC][LFE][SL][SR]'
	-map '[FL]' front_left.wav -map '[FR]' front_right.wav -map '[FC]'
	front_center.wav -map '[LFE]' lfe.wav -map '[SL]' side_left.wav -map '[SR]'
	side_right.wav



=head2 channelmap

Remap input channels to new locations.

This filter accepts the following named parameters:

=over 4


=item B<channel_layout>

Channel layout of the output stream.


=item B<map>

Map channels from input to output. The argument is a comma-separated list of
mappings, each in the C<I<in_channel>-I<out_channel>> or
I<in_channel> form. I<in_channel> can be either the name of the input
channel (e.g. FL for front left) or its index in the input channel layout.
I<out_channel> is the name of the output channel or its index in the output
channel layout. If I<out_channel> is not given then it is implicitly an
index, starting with zero and increasing by one for each mapping.

=back


If no mapping is present, the filter will implicitly map input channels to
output channels preserving index.

For example, assuming a 5.1+downmix input MOV file
	
	ffmpeg -i in.mov -filter 'channelmap=map=DL-FL,DR-FR' out.wav

will create an output WAV file tagged as stereo from the downmix channels of
the input.

To fix a 5.1 WAV improperly encoded in AAC's native channel order
	
	ffmpeg -i in.wav -filter 'channelmap=1,2,0,5,3,4:channel_layout=5.1' out.wav



=head2 join

Join multiple input streams into one multi-channel stream.

The filter accepts the following named parameters:

=over 4



=item B<inputs>

Number of input streams. Defaults to 2.


=item B<channel_layout>

Desired output channel layout. Defaults to stereo.


=item B<map>

Map channels from inputs to output. The argument is a comma-separated list of
mappings, each in the C<I<input_idx>.I<in_channel>-I<out_channel>>
form. I<input_idx> is the 0-based index of the input stream. I<in_channel>
can be either the name of the input channel (e.g. FL for front left) or its
index in the specified input stream. I<out_channel> is the name of the output
channel.

=back


The filter will attempt to guess the mappings when those are not specified
explicitly. It does so by first trying to find an unused matching input channel
and if that fails it picks the first unused input channel.

E.g. to join 3 inputs (with properly set channel layouts)
	
	ffmpeg -i INPUT1 -i INPUT2 -i INPUT3 -filter_complex join=inputs=3 OUTPUT


To build a 5.1 output from 6 single-channel streams:
	
	ffmpeg -i fl -i fr -i fc -i sl -i sr -i lfe -filter_complex
	'join=inputs=6:channel_layout=5.1:map=0.0-FL,1.0-FR,2.0-FC,3.0-SL,4.0-SR,5.0-LFE'
	out



=head2 resample

Convert the audio sample format, sample rate and channel layout. This filter is
not meant to be used directly.


=head1 AUDIO SOURCES


Below is a description of the currently available audio sources.


=head2 abuffer


Buffer audio frames, and make them available to the filter chain.

This source is mainly intended for a programmatic use, in particular
through the interface defined in F<libavfilter/asrc_abuffer.h>.

It accepts the following mandatory parameters:
I<sample_rate>:I<sample_fmt>:I<channel_layout>


=over 4



=item B<sample_rate>

The sample rate of the incoming audio buffers.


=item B<sample_fmt>

The sample format of the incoming audio buffers.
Either a sample format name or its corresponging integer representation from
the enum AVSampleFormat in F<libavutil/samplefmt.h>


=item B<channel_layout>

The channel layout of the incoming audio buffers.
Either a channel layout name from channel_layout_map in
F<libavutil/audioconvert.c> or its corresponding integer representation
from the AV_CH_LAYOUT_* macros in F<libavutil/audioconvert.h>


=back


For example:
	
	abuffer=44100:s16p:stereo


will instruct the source to accept planar 16bit signed stereo at 44100Hz.
Since the sample format with name "s16p" corresponds to the number
6 and the "stereo" channel layout corresponds to the value 0x3, this is
equivalent to:
	
	abuffer=44100:6:0x3



=head2 aevalsrc


Generate an audio signal specified by an expression.

This source accepts in input one or more expressions (one for each
channel), which are evaluated and used to generate a corresponding
audio signal.

It accepts the syntax: I<exprs>[::I<options>].
I<exprs> is a list of expressions separated by ":", one for each
separate channel. In case the I<channel_layout> is not
specified, the selected channel layout depends on the number of
provided expressions.

I<options> is an optional sequence of I<key>=I<value> pairs,
separated by ":".

The description of the accepted options follows.


=over 4



=item B<channel_layout, c>

Set the channel layout. The number of channels in the specified layout
must be equal to the number of specified expressions.


=item B<duration, d>

Set the minimum duration of the sourced audio. See the function
C<av_parse_time()> for the accepted format.
Note that the resulting duration may be greater than the specified
duration, as the generated audio is always cut at the end of a
complete frame.

If not specified, or the expressed duration is negative, the audio is
supposed to be generated forever.


=item B<nb_samples, n>

Set the number of samples per channel per each output frame,
default to 1024.


=item B<sample_rate, s>

Specify the sample rate, default to 44100.

=back


Each expression in I<exprs> can contain the following constants:


=over 4


=item B<n>

number of the evaluated sample, starting from 0


=item B<t>

time of the evaluated sample expressed in seconds, starting from 0


=item B<s>

sample rate


=back



=head3 Examples



=over 4



=item *

Generate silence:
	
	aevalsrc=0



=item *


Generate a sin signal with frequency of 440 Hz, set sample rate to
8000 Hz:
	
	aevalsrc="sin(440*2*PI*t)::s=8000"



=item *

Generate a two channels signal, specify the channel layout (Front
Center + Back Center) explicitly:
	
	aevalsrc="sin(420*2*PI*t):cos(430*2*PI*t)::c=FC|BC"



=item *

Generate white noise:
	
	aevalsrc="-2+random(0)"



=item *

Generate an amplitude modulated signal:
	
	aevalsrc="sin(10*2*PI*t)*sin(880*2*PI*t)"



=item *

Generate 2.5 Hz binaural beats on a 360 Hz carrier:
	
	aevalsrc="0.1*sin(2*PI*(360-2.5/2)*t) : 0.1*sin(2*PI*(360+2.5/2)*t)"



=back



=head2 anullsrc


Null audio source, return unprocessed audio frames. It is mainly useful
as a template and to be employed in analysis / debugging tools, or as
the source for filters which ignore the input data (for example the sox
synth filter).

It accepts an optional sequence of I<key>=I<value> pairs,
separated by ":".

The description of the accepted options follows.


=over 4



=item B<sample_rate, s>

Specify the sample rate, and defaults to 44100.


=item B<channel_layout, cl>


Specify the channel layout, and can be either an integer or a string
representing a channel layout. The default value of I<channel_layout>
is "stereo".

Check the channel_layout_map definition in
F<libavcodec/audioconvert.c> for the mapping between strings and
channel layout values.


=item B<nb_samples, n>

Set the number of samples per requested frames.


=back


Follow some examples:
	
	#  set the sample rate to 48000 Hz and the channel layout to AV_CH_LAYOUT_MONO.
	anullsrc=r=48000:cl=4
	
	# same as
	anullsrc=r=48000:cl=mono



=head2 abuffer

Buffer audio frames, and make them available to the filter chain.

This source is not intended to be part of user-supplied graph descriptions but
for insertion by calling programs through the interface defined in
F<libavfilter/buffersrc.h>.

It accepts the following named parameters:

=over 4



=item B<time_base>

Timebase which will be used for timestamps of submitted frames. It must be
either a floating-point number or in I<numerator>/I<denominator> form.


=item B<sample_rate>

Audio sample rate.


=item B<sample_fmt>

Name of the sample format, as returned by C<av_get_sample_fmt_name()>.


=item B<channel_layout>

Channel layout of the audio data, in the form that can be accepted by
C<av_get_channel_layout()>.

=back


All the parameters need to be explicitly defined.


=head2 flite


Synthesize a voice utterance using the libflite library.

To enable compilation of this filter you need to configure FFmpeg with
C<--enable-libflite>.

Note that the flite library is not thread-safe.

The source accepts parameters as a list of I<key>=I<value> pairs,
separated by ":".

The description of the accepted parameters follows.


=over 4



=item B<list_voices>

If set to 1, list the names of the available voices and exit
immediately. Default value is 0.


=item B<nb_samples, n>

Set the maximum number of samples per frame. Default value is 512.


=item B<textfile>

Set the filename containing the text to speak.


=item B<text>

Set the text to speak.


=item B<voice, v>

Set the voice to use for the speech synthesis. Default value is
C<kal>. See also the I<list_voices> option.

=back



=head3 Examples



=over 4


=item *

Read from file F<speech.txt>, and synthetize the text using the
standard flite voice:
	
	flite=textfile=speech.txt



=item *

Read the specified text selecting the C<slt> voice:
	
	flite=text='So fare thee well, poor devil of a Sub-Sub, whose commentator I am':voice=slt



=item *

Input text to ffmpeg:
	
	ffmpeg -f lavfi -i flite=text='So fare thee well, poor devil of a Sub-Sub, whose commentator I am':voice=slt



=item *

Make F<ffplay> speak the specified text, using C<flite> and
the C<lavfi> device:
	
	ffplay -f lavfi flite=text='No more be grieved for which that thou hast done.'


=back


For more information about libflite, check:
E<lt>B<http://www.speech.cs.cmu.edu/flite/>E<gt>


=head1 AUDIO SINKS


Below is a description of the currently available audio sinks.


=head2 abuffersink


Buffer audio frames, and make them available to the end of filter chain.

This sink is mainly intended for programmatic use, in particular
through the interface defined in F<libavfilter/buffersink.h>.

It requires a pointer to an AVABufferSinkContext structure, which
defines the incoming buffers' formats, to be passed as the opaque
parameter to C<avfilter_init_filter> for initialization.


=head2 anullsink


Null audio sink, do absolutely nothing with the input audio. It is
mainly useful as a template and to be employed in analysis / debugging
tools.


=head2 abuffersink

This sink is intended for programmatic use. Frames that arrive on this sink can
be retrieved by the calling program using the interface defined in
F<libavfilter/buffersink.h>.

This filter accepts no parameters.


=head1 VIDEO FILTERS


When you configure your FFmpeg build, you can disable any of the
existing filters using C<--disable-filters>.
The configure output will show the video filters included in your
build.

Below is a description of the currently available video filters.


=head2 alphaextract


Extract the alpha component from the input as a grayscale video. This
is especially useful with the I<alphamerge> filter.


=head2 alphamerge


Add or replace the alpha component of the primary input with the
grayscale value of a second input. This is intended for use with
I<alphaextract> to allow the transmission or storage of frame
sequences that have alpha in a format that doesn't support an alpha
channel.

For example, to reconstruct full frames from a normal YUV-encoded video
and a separate video created with I<alphaextract>, you might use:
	
	movie=in_alpha.mkv [alpha]; [in][alpha] alphamerge [out]


Since this filter is designed for reconstruction, it operates on frame
sequences without considering timestamps, and terminates when either
input reaches end of stream. This will cause problems if your encoding
pipeline drops frames. If you're trying to apply an image as an
overlay to a video stream, consider the I<overlay> filter instead.


=head2 ass


Draw ASS (Advanced Substation Alpha) subtitles on top of input video
using the libass library.

To enable compilation of this filter you need to configure FFmpeg with
C<--enable-libass>.

This filter accepts the following named options, expressed as a
sequence of I<key>=I<value> pairs, separated by ":".


=over 4


=item B<filename, f>

Set the filename of the ASS file to read. It must be specified.


=item B<original_size>

Specify the size of the original video, the video for which the ASS file
was composed. Due to a misdesign in ASS aspect ratio arithmetic, this is
necessary to correctly scale the fonts if the aspect ratio has been changed.

=back


If the first key is not specified, it is assumed that the first value
specifies the B<filename>.

For example, to render the file F<sub.ass> on top of the input
video, use the command:
	
	ass=sub.ass


which is equivalent to:
	
	ass=filename=sub.ass



=head2 bbox


Compute the bounding box for the non-black pixels in the input frame
luminance plane.

This filter computes the bounding box containing all the pixels with a
luminance value greater than the minimum allowed value.
The parameters describing the bounding box are printed on the filter
log.


=head2 blackdetect


Detect video intervals that are (almost) completely black. Can be
useful to detect chapter transitions, commercials, or invalid
recordings. Output lines contains the time for the start, end and
duration of the detected black interval expressed in seconds.

In order to display the output lines, you need to set the loglevel at
least to the AV_LOG_INFO value.

This filter accepts a list of options in the form of
I<key>=I<value> pairs separated by ":". A description of the
accepted options follows.


=over 4


=item B<black_min_duration, d>

Set the minimum detected black duration expressed in seconds. It must
be a non-negative floating point number.

Default value is 2.0.


=item B<picture_black_ratio_th, pic_th>

Set the threshold for considering a picture "black".
Express the minimum value for the ratio:
	
	<nb_black_pixels> / <nb_pixels>


for which a picture is considered black.
Default value is 0.98.


=item B<pixel_black_th, pix_th>

Set the threshold for considering a pixel "black".

The threshold expresses the maximum pixel luminance value for which a
pixel is considered "black". The provided value is scaled according to
the following equation:
	
	<absolute_threshold> = <luminance_minimum_value> + <pixel_black_th> * <luminance_range_size>


I<luminance_range_size> and I<luminance_minimum_value> depend on
the input video format, the range is [0-255] for YUV full-range
formats and [16-235] for YUV non full-range formats.

Default value is 0.10.

=back


The following example sets the maximum pixel threshold to the minimum
value, and detects only black intervals of 2 or more seconds:
	
	blackdetect=d=2:pix_th=0.00



=head2 blackframe


Detect frames that are (almost) completely black. Can be useful to
detect chapter transitions or commercials. Output lines consist of
the frame number of the detected frame, the percentage of blackness,
the position in the file if known or -1 and the timestamp in seconds.

In order to display the output lines, you need to set the loglevel at
least to the AV_LOG_INFO value.

The filter accepts the syntax:
	
	blackframe[=<amount>:[<threshold>]]


I<amount> is the percentage of the pixels that have to be below the
threshold, and defaults to 98.

I<threshold> is the threshold below which a pixel value is
considered black, and defaults to 32.


=head2 boxblur


Apply boxblur algorithm to the input video.

This filter accepts the parameters:
I<luma_radius>:I<luma_power>:I<chroma_radius>:I<chroma_power>:I<alpha_radius>:I<alpha_power>

Chroma and alpha parameters are optional, if not specified they default
to the corresponding values set for I<luma_radius> and
I<luma_power>.

I<luma_radius>, I<chroma_radius>, and I<alpha_radius> represent
the radius in pixels of the box used for blurring the corresponding
input plane. They are expressions, and can contain the following
constants:

=over 4


=item B<w, h>

the input width and height in pixels


=item B<cw, ch>

the input chroma image width and height in pixels


=item B<hsub, vsub>

horizontal and vertical chroma subsample values. For example for the
pixel format "yuv422p" I<hsub> is 2 and I<vsub> is 1.

=back


The radius must be a non-negative number, and must not be greater than
the value of the expression C<min(w,h)/2> for the luma and alpha planes,
and of C<min(cw,ch)/2> for the chroma planes.

I<luma_power>, I<chroma_power>, and I<alpha_power> represent
how many times the boxblur filter is applied to the corresponding
plane.

Some examples follow:


=over 4



=item *

Apply a boxblur filter with luma, chroma, and alpha radius
set to 2:
	
	boxblur=2:1



=item *

Set luma radius to 2, alpha and chroma radius to 0
	
	boxblur=2:1:0:0:0:0



=item *

Set luma and chroma radius to a fraction of the video dimension
	
	boxblur=min(h,w)/10:1:min(cw,ch)/10:1



=back



=head2 colormatrix


The colormatrix filter allows conversion between any of the following color
space: BT.709 (I<bt709>), BT.601 (I<bt601>), SMPTE-240M (I<smpte240m>)
and FCC (I<fcc>).

The syntax of the parameters is I<source>:I<destination>:

	
	colormatrix=bt601:smpte240m



=head2 copy


Copy the input source unchanged to the output. Mainly useful for
testing purposes.


=head2 crop


Crop the input video to I<out_w>:I<out_h>:I<x>:I<y>:I<keep_aspect>

The I<keep_aspect> parameter is optional, if specified and set to a
non-zero value will force the output display aspect ratio to be the
same of the input, by changing the output sample aspect ratio.

The I<out_w>, I<out_h>, I<x>, I<y> parameters are
expressions containing the following constants:


=over 4


=item B<x, y>

the computed values for I<x> and I<y>. They are evaluated for
each new frame.


=item B<in_w, in_h>

the input width and height


=item B<iw, ih>

same as I<in_w> and I<in_h>


=item B<out_w, out_h>

the output (cropped) width and height


=item B<ow, oh>

same as I<out_w> and I<out_h>


=item B<a>

same as I<iw> / I<ih>


=item B<sar>

input sample aspect ratio


=item B<dar>

input display aspect ratio, it is the same as (I<iw> / I<ih>) * I<sar>


=item B<hsub, vsub>

horizontal and vertical chroma subsample values. For example for the
pixel format "yuv422p" I<hsub> is 2 and I<vsub> is 1.


=item B<n>

the number of input frame, starting from 0


=item B<pos>

the position in the file of the input frame, NAN if unknown


=item B<t>

timestamp expressed in seconds, NAN if the input timestamp is unknown


=back


The I<out_w> and I<out_h> parameters specify the expressions for
the width and height of the output (cropped) video. They are
evaluated just at the configuration of the filter.

The default value of I<out_w> is "in_w", and the default value of
I<out_h> is "in_h".

The expression for I<out_w> may depend on the value of I<out_h>,
and the expression for I<out_h> may depend on I<out_w>, but they
cannot depend on I<x> and I<y>, as I<x> and I<y> are
evaluated after I<out_w> and I<out_h>.

The I<x> and I<y> parameters specify the expressions for the
position of the top-left corner of the output (non-cropped) area. They
are evaluated for each frame. If the evaluated value is not valid, it
is approximated to the nearest valid value.

The default value of I<x> is "(in_w-out_w)/2", and the default
value for I<y> is "(in_h-out_h)/2", which set the cropped area at
the center of the input image.

The expression for I<x> may depend on I<y>, and the expression
for I<y> may depend on I<x>.

Follow some examples:
	
	# crop the central input area with size 100x100
	crop=100:100
	
	# crop the central input area with size 2/3 of the input video
	"crop=2/3*in_w:2/3*in_h"
	
	# crop the input video central square
	crop=in_h
	
	# delimit the rectangle with the top-left corner placed at position
	# 100:100 and the right-bottom corner corresponding to the right-bottom
	# corner of the input image.
	crop=in_w-100:in_h-100:100:100
	
	# crop 10 pixels from the left and right borders, and 20 pixels from
	# the top and bottom borders
	"crop=in_w-2*10:in_h-2*20"
	
	# keep only the bottom right quarter of the input image
	"crop=in_w/2:in_h/2:in_w/2:in_h/2"
	
	# crop height for getting Greek harmony
	"crop=in_w:1/PHI*in_w"
	
	# trembling effect
	"crop=in_w/2:in_h/2:(in_w-out_w)/2+((in_w-out_w)/2)*sin(n/10):(in_h-out_h)/2 +((in_h-out_h)/2)*sin(n/7)"
	
	# erratic camera effect depending on timestamp
	"crop=in_w/2:in_h/2:(in_w-out_w)/2+((in_w-out_w)/2)*sin(t*10):(in_h-out_h)/2 +((in_h-out_h)/2)*sin(t*13)"
	
	# set x depending on the value of y
	"crop=in_w/2:in_h/2:y:10+10*sin(n/10)"



=head2 cropdetect


Auto-detect crop size.

Calculate necessary cropping parameters and prints the recommended
parameters through the logging system. The detected dimensions
correspond to the non-black area of the input video.

It accepts the syntax:
	
	cropdetect[=<limit>[:<round>[:<reset>]]]



=over 4



=item B<limit>

Threshold, which can be optionally specified from nothing (0) to
everything (255), defaults to 24.


=item B<round>

Value which the width/height should be divisible by, defaults to
16. The offset is automatically adjusted to center the video. Use 2 to
get only even dimensions (needed for 4:2:2 video). 16 is best when
encoding to most video codecs.


=item B<reset>

Counter that determines after how many frames cropdetect will reset
the previously detected largest video area and start over to detect
the current optimal crop area. Defaults to 0.

This can be useful when channel logos distort the video area. 0
indicates never reset and return the largest area encountered during
playback.

=back



=head2 decimate


This filter drops frames that do not differ greatly from the previous
frame in order to reduce framerate.  The main use of this filter is
for very-low-bitrate encoding (e.g. streaming over dialup modem), but
it could in theory be used for fixing movies that were
inverse-telecined incorrectly.

It accepts the following parameters:
I<max>:I<hi>:I<lo>:I<frac>.


=over 4



=item B<max>

Set the maximum number of consecutive frames which can be dropped (if
positive), or the minimum interval between dropped frames (if
negative). If the value is 0, the frame is dropped unregarding the
number of previous sequentially dropped frames.

Default value is 0.


=item B<hi, lo, frac>

Set the dropping threshold values.

Values for I<hi> and I<lo> are for 8x8 pixel blocks and
represent actual pixel value differences, so a threshold of 64
corresponds to 1 unit of difference for each pixel, or the same spread
out differently over the block.

A frame is a candidate for dropping if no 8x8 blocks differ by more
than a threshold of I<hi>, and if no more than I<frac> blocks (1
meaning the whole image) differ by more than a threshold of I<lo>.

Default value for I<hi> is 64*12, default value for I<lo> is
64*5, and default value for I<frac> is 0.33.

=back



=head2 delogo


Suppress a TV station logo by a simple interpolation of the surrounding
pixels. Just set a rectangle covering the logo and watch it disappear
(and sometimes something even uglier appear - your mileage may vary).

The filter accepts parameters as a string of the form
"I<x>:I<y>:I<w>:I<h>:I<band>", or as a list of
I<key>=I<value> pairs, separated by ":".

The description of the accepted parameters follows.


=over 4



=item B<x, y>

Specify the top left corner coordinates of the logo. They must be
specified.


=item B<w, h>

Specify the width and height of the logo to clear. They must be
specified.


=item B<band, t>

Specify the thickness of the fuzzy edge of the rectangle (added to
I<w> and I<h>). The default value is 4.


=item B<show>

When set to 1, a green rectangle is drawn on the screen to simplify
finding the right I<x>, I<y>, I<w>, I<h> parameters, and
I<band> is set to 4. The default value is 0.


=back


Some examples follow.


=over 4



=item *

Set a rectangle covering the area with top left corner coordinates 0,0
and size 100x77, setting a band of size 10:
	
	delogo=0:0:100:77:10



=item *

As the previous example, but use named options:
	
	delogo=x=0:y=0:w=100:h=77:band=10



=back



=head2 deshake


Attempt to fix small changes in horizontal and/or vertical shift. This
filter helps remove camera shake from hand-holding a camera, bumping a
tripod, moving on a vehicle, etc.

The filter accepts parameters as a string of the form
"I<x>:I<y>:I<w>:I<h>:I<rx>:I<ry>:I<edge>:I<blocksize>:I<contrast>:I<search>:I<filename>"

A description of the accepted parameters follows.


=over 4



=item B<x, y, w, h>

Specify a rectangular area where to limit the search for motion
vectors.
If desired the search for motion vectors can be limited to a
rectangular area of the frame defined by its top left corner, width
and height. These parameters have the same meaning as the drawbox
filter which can be used to visualise the position of the bounding
box.

This is useful when simultaneous movement of subjects within the frame
might be confused for camera motion by the motion vector search.

If any or all of I<x>, I<y>, I<w> and I<h> are set to -1
then the full frame is used. This allows later options to be set
without specifying the bounding box for the motion vector search.

Default - search the whole frame.


=item B<rx, ry>

Specify the maximum extent of movement in x and y directions in the
range 0-64 pixels. Default 16.


=item B<edge>

Specify how to generate pixels to fill blanks at the edge of the
frame. An integer from 0 to 3 as follows:

=over 4


=item B<0>

Fill zeroes at blank locations

=item B<1>

Original image at blank locations

=item B<2>

Extruded edge value at blank locations

=item B<3>

Mirrored edge at blank locations

=back


The default setting is mirror edge at blank locations.


=item B<blocksize>

Specify the blocksize to use for motion search. Range 4-128 pixels,
default 8.


=item B<contrast>

Specify the contrast threshold for blocks. Only blocks with more than
the specified contrast (difference between darkest and lightest
pixels) will be considered. Range 1-255, default 125.


=item B<search>

Specify the search strategy 0 = exhaustive search, 1 = less exhaustive
search. Default - exhaustive search.


=item B<filename>

If set then a detailed log of the motion search is written to the
specified file.


=back



=head2 drawbox


Draw a colored box on the input image.

It accepts the syntax:
	
	drawbox=<x>:<y>:<width>:<height>:<color>



=over 4



=item B<x, y>

Specify the top left corner coordinates of the box. Default to 0.


=item B<width, height>

Specify the width and height of the box, if 0 they are interpreted as
the input width and height. Default to 0.


=item B<color>

Specify the color of the box to write, it can be the name of a color
(case insensitive match) or a 0xRRGGBB[AA] sequence.

=back


Follow some examples:
	
	# draw a black box around the edge of the input image
	drawbox
	
	# draw a box with color red and an opacity of 50%
	drawbox=10:20:200:60:red@0.5"



=head2 drawtext


Draw text string or text from specified file on top of video using the
libfreetype library.

To enable compilation of this filter you need to configure FFmpeg with
C<--enable-libfreetype>.

The filter also recognizes strftime() sequences in the provided text
and expands them accordingly. Check the documentation of strftime().

The filter accepts parameters as a list of I<key>=I<value> pairs,
separated by ":".

The description of the accepted parameters follows.


=over 4



=item B<box>

Used to draw a box around text using background color.
Value should be either 1 (enable) or 0 (disable).
The default value of I<box> is 0.


=item B<boxcolor>

The color to be used for drawing box around text.
Either a string (e.g. "yellow") or in 0xRRGGBB[AA] format
(e.g. "0xff00ff"), possibly followed by an alpha specifier.
The default value of I<boxcolor> is "white".


=item B<draw>

Set an expression which specifies if the text should be drawn. If the
expression evaluates to 0, the text is not drawn. This is useful for
specifying that the text should be drawn only when specific conditions
are met.

Default value is "1".

See below for the list of accepted constants and functions.


=item B<fix_bounds>

If true, check and fix text coords to avoid clipping.


=item B<fontcolor>

The color to be used for drawing fonts.
Either a string (e.g. "red") or in 0xRRGGBB[AA] format
(e.g. "0xff000033"), possibly followed by an alpha specifier.
The default value of I<fontcolor> is "black".


=item B<fontfile>

The font file to be used for drawing text. Path must be included.
This parameter is mandatory.


=item B<fontsize>

The font size to be used for drawing text.
The default value of I<fontsize> is 16.


=item B<ft_load_flags>

Flags to be used for loading the fonts.

The flags map the corresponding flags supported by libfreetype, and are
a combination of the following values:

=over 4


=item I<default>


=item I<no_scale>


=item I<no_hinting>


=item I<render>


=item I<no_bitmap>


=item I<vertical_layout>


=item I<force_autohint>


=item I<crop_bitmap>


=item I<pedantic>


=item I<ignore_global_advance_width>


=item I<no_recurse>


=item I<ignore_transform>


=item I<monochrome>


=item I<linear_design>


=item I<no_autohint>


=item I<end table>


=back


Default value is "render".

For more information consult the documentation for the FT_LOAD_*
libfreetype flags.


=item B<shadowcolor>

The color to be used for drawing a shadow behind the drawn text.  It
can be a color name (e.g. "yellow") or a string in the 0xRRGGBB[AA]
form (e.g. "0xff00ff"), possibly followed by an alpha specifier.
The default value of I<shadowcolor> is "black".


=item B<shadowx, shadowy>

The x and y offsets for the text shadow position with respect to the
position of the text. They can be either positive or negative
values. Default value for both is "0".


=item B<tabsize>

The size in number of spaces to use for rendering the tab.
Default value is 4.


=item B<timecode>

Set the initial timecode representation in "hh:mm:ss[:;.]ff"
format. It can be used with or without text parameter. I<timecode_rate>
option must be specified.


=item B<timecode_rate, rate, r>

Set the timecode frame rate (timecode only).


=item B<text>

The text string to be drawn. The text must be a sequence of UTF-8
encoded characters.
This parameter is mandatory if no file is specified with the parameter
I<textfile>.


=item B<textfile>

A text file containing text to be drawn. The text must be a sequence
of UTF-8 encoded characters.

This parameter is mandatory if no text string is specified with the
parameter I<text>.

If both I<text> and I<textfile> are specified, an error is thrown.


=item B<x, y>

The expressions which specify the offsets where text will be drawn
within the video frame. They are relative to the top/left border of the
output image.

The default value of I<x> and I<y> is "0".

See below for the list of accepted constants and functions.

=back


The parameters for I<x> and I<y> are expressions containing the
following constants and functions:


=over 4


=item B<dar>

input display aspect ratio, it is the same as (I<w> / I<h>) * I<sar>


=item B<hsub, vsub>

horizontal and vertical chroma subsample values. For example for the
pixel format "yuv422p" I<hsub> is 2 and I<vsub> is 1.


=item B<line_h, lh>

the height of each text line


=item B<main_h, h, H>

the input height


=item B<main_w, w, W>

the input width


=item B<max_glyph_a, ascent>

the maximum distance from the baseline to the highest/upper grid
coordinate used to place a glyph outline point, for all the rendered
glyphs.
It is a positive value, due to the grid's orientation with the Y axis
upwards.


=item B<max_glyph_d, descent>

the maximum distance from the baseline to the lowest grid coordinate
used to place a glyph outline point, for all the rendered glyphs.
This is a negative value, due to the grid's orientation, with the Y axis
upwards.


=item B<max_glyph_h>

maximum glyph height, that is the maximum height for all the glyphs
contained in the rendered text, it is equivalent to I<ascent> -
I<descent>.


=item B<max_glyph_w>

maximum glyph width, that is the maximum width for all the glyphs
contained in the rendered text


=item B<n>

the number of input frame, starting from 0


=item B<rand(min, max)>

return a random number included between I<min> and I<max>


=item B<sar>

input sample aspect ratio


=item B<t>

timestamp expressed in seconds, NAN if the input timestamp is unknown


=item B<text_h, th>

the height of the rendered text


=item B<text_w, tw>

the width of the rendered text


=item B<x, y>

the x and y offset coordinates where the text is drawn.

These parameters allow the I<x> and I<y> expressions to refer
each other, so you can for example specify C<y=x/dar>.

=back


If libavfilter was built with C<--enable-fontconfig>, then
B<fontfile> can be a fontconfig pattern or omitted.

Some examples follow.


=over 4



=item *

Draw "Test Text" with font FreeSerif, using the default values for the
optional parameters.

	
	drawtext="fontfile=/usr/share/fonts/truetype/freefont/FreeSerif.ttf: text='Test Text'"



=item *

Draw 'Test Text' with font FreeSerif of size 24 at position x=100
and y=50 (counting from the top-left corner of the screen), text is
yellow with a red box around it. Both the text and the box have an
opacity of 20%.

	
	drawtext="fontfile=/usr/share/fonts/truetype/freefont/FreeSerif.ttf: text='Test Text':\
	          x=100: y=50: fontsize=24: fontcolor=yellow@0.2: box=1: boxcolor=red@0.2"


Note that the double quotes are not necessary if spaces are not used
within the parameter list.


=item *

Show the text at the center of the video frame:
	
	drawtext="fontsize=30:fontfile=FreeSerif.ttf:text='hello world':x=(w-text_w)/2:y=(h-text_h-line_h)/2"



=item *

Show a text line sliding from right to left in the last row of the video
frame. The file F<LONG_LINE> is assumed to contain a single line
with no newlines.
	
	drawtext="fontsize=15:fontfile=FreeSerif.ttf:text=LONG_LINE:y=h-line_h:x=-50*t"



=item *

Show the content of file F<CREDITS> off the bottom of the frame and scroll up.
	
	drawtext="fontsize=20:fontfile=FreeSerif.ttf:textfile=CREDITS:y=h-20*t"



=item *

Draw a single green letter "g", at the center of the input video.
The glyph baseline is placed at half screen height.
	
	drawtext="fontsize=60:fontfile=FreeSerif.ttf:fontcolor=green:text=g:x=(w-max_glyph_w)/2:y=h/2-ascent"



=item *

Show text for 1 second every 3 seconds:
	
	drawtext="fontfile=FreeSerif.ttf:fontcolor=white:x=100:y=x/dar:draw=lt(mod(t\,3)\,1):text='blink'"



=item *

Use fontconfig to set the font. Note that the colons need to be escaped.
	
	drawtext='fontfile=Linux Libertine O-40\\:style=Semibold:text=FFmpeg'



=back


For more information about libfreetype, check:
E<lt>B<http://www.freetype.org/>E<gt>.

For more information about fontconfig, check:
E<lt>B<http://freedesktop.org/software/fontconfig/fontconfig-user.html>E<gt>.


=head2 edgedetect


Detect and draw edges. The filter uses the Canny Edge Detection algorithm.

This filter accepts the following optional named parameters:


=over 4


=item B<low, high>

Set low and high threshold values used by the Canny thresholding
algorithm.

The high threshold selects the "strong" edge pixels, which are then
connected through 8-connectivity with the "weak" edge pixels selected
by the low threshold.

I<low> and I<high> threshold values must be choosen in the range
[0,1], and I<low> should be lesser or equal to I<high>.

Default value for I<low> is C<20/255>, and default value for I<high>
is C<50/255>.

=back


Example:
	
	edgedetect=low=0.1:high=0.4



=head2 fade


Apply fade-in/out effect to input video.

It accepts the parameters:
I<type>:I<start_frame>:I<nb_frames>[:I<options>]

I<type> specifies if the effect type, can be either "in" for
fade-in, or "out" for a fade-out effect.

I<start_frame> specifies the number of the start frame for starting
to apply the fade effect.

I<nb_frames> specifies the number of frames for which the fade
effect has to last. At the end of the fade-in effect the output video
will have the same intensity as the input video, at the end of the
fade-out transition the output video will be completely black.

I<options> is an optional sequence of I<key>=I<value> pairs,
separated by ":". The description of the accepted options follows.


=over 4



=item B<type, t>

See I<type>.


=item B<start_frame, s>

See I<start_frame>.


=item B<nb_frames, n>

See I<nb_frames>.


=item B<alpha>

If set to 1, fade only alpha channel, if one exists on the input.
Default value is 0.

=back


A few usage examples follow, usable too as test scenarios.
	
	# fade in first 30 frames of video
	fade=in:0:30
	
	# fade out last 45 frames of a 200-frame video
	fade=out:155:45
	
	# fade in first 25 frames and fade out last 25 frames of a 1000-frame video
	fade=in:0:25, fade=out:975:25
	
	# make first 5 frames black, then fade in from frame 5-24
	fade=in:5:20
	
	# fade in alpha over first 25 frames of video
	fade=in:0:25:alpha=1



=head2 fieldorder


Transform the field order of the input video.

It accepts one parameter which specifies the required field order that
the input interlaced video will be transformed to. The parameter can
assume one of the following values:


=over 4


=item B<0 or bff>

output bottom field first

=item B<1 or tff>

output top field first

=back


Default value is "tff".

Transformation is achieved by shifting the picture content up or down
by one line, and filling the remaining line with appropriate picture content.
This method is consistent with most broadcast field order converters.

If the input video is not flagged as being interlaced, or it is already
flagged as being of the required output field order then this filter does
not alter the incoming video.

This filter is very useful when converting to or from PAL DV material,
which is bottom field first.

For example:
	
	ffmpeg -i in.vob -vf "fieldorder=bff" out.dv



=head2 fifo


Buffer input images and send them when they are requested.

This filter is mainly useful when auto-inserted by the libavfilter
framework.

The filter does not take parameters.


=head2 format


Convert the input video to one of the specified pixel formats.
Libavfilter will try to pick one that is supported for the input to
the next filter.

The filter accepts a list of pixel format names, separated by ":",
for example "yuv420p:monow:rgb24".

Some examples follow:
	
	# convert the input video to the format "yuv420p"
	format=yuv420p
	
	# convert the input video to any of the formats in the list
	format=yuv420p:yuv444p:yuv410p



=head2 fps


Convert the video to specified constant framerate by duplicating or dropping
frames as necessary.

This filter accepts the following named parameters:

=over 4



=item B<fps>

Desired output framerate.


=back



=head2 framestep


Select one frame every N.

This filter accepts in input a string representing a positive
integer. Default argument is C<1>.



=head2 frei0r


Apply a frei0r effect to the input video.

To enable compilation of this filter you need to install the frei0r
header and configure FFmpeg with C<--enable-frei0r>.

The filter supports the syntax:
	
	<filter_name>[{:|=}<param1>:<param2>:...:<paramN>]


I<filter_name> is the name to the frei0r effect to load. If the
environment variable B<FREI0R_PATH> is defined, the frei0r effect
is searched in each one of the directories specified by the colon
separated list in B<FREIOR_PATH>, otherwise in the standard frei0r
paths, which are in this order: F<HOME/.frei0r-1/lib/>,
F</usr/local/lib/frei0r-1/>, F</usr/lib/frei0r-1/>.

I<param1>, I<param2>, ... , I<paramN> specify the parameters
for the frei0r effect.

A frei0r effect parameter can be a boolean (whose values are specified
with "y" and "n"), a double, a color (specified by the syntax
I<R>/I<G>/I<B>, I<R>, I<G>, and I<B> being float
numbers from 0.0 to 1.0) or by an C<av_parse_color()> color
description), a position (specified by the syntax I<X>/I<Y>,
I<X> and I<Y> being float numbers) and a string.

The number and kind of parameters depend on the loaded effect. If an
effect parameter is not specified the default value is set.

Some examples follow:


=over 4


=item *

Apply the distort0r effect, set the first two double parameters:
	
	frei0r=distort0r:0.5:0.01



=item *

Apply the colordistance effect, takes a color as first parameter:
	
	frei0r=colordistance:0.2/0.3/0.4
	frei0r=colordistance:violet
	frei0r=colordistance:0x112233



=item *

Apply the perspective effect, specify the top left and top right image
positions:
	
	frei0r=perspective:0.2/0.2:0.8/0.2


=back


For more information see:
E<lt>B<http://frei0r.dyne.org>E<gt>


=head2 gradfun


Fix the banding artifacts that are sometimes introduced into nearly flat
regions by truncation to 8bit color depth.
Interpolate the gradients that should go where the bands are, and
dither them.

This filter is designed for playback only.  Do not use it prior to
lossy compression, because compression tends to lose the dither and
bring back the bands.

The filter takes two optional parameters, separated by ':':
I<strength>:I<radius>

I<strength> is the maximum amount by which the filter will change
any one pixel. Also the threshold for detecting nearly flat
regions. Acceptable values range from .51 to 255, default value is
1.2, out-of-range values will be clipped to the valid range.

I<radius> is the neighborhood to fit the gradient to. A larger
radius makes for smoother gradients, but also prevents the filter from
modifying the pixels near detailed regions. Acceptable values are
8-32, default value is 16, out-of-range values will be clipped to the
valid range.

	
	# default parameters
	gradfun=1.2:16
	
	# omitting radius
	gradfun=1.2



=head2 hflip


Flip the input video horizontally.

For example to horizontally flip the input video with B<ffmpeg>:
	
	ffmpeg -i in.avi -vf "hflip" out.avi



=head2 hqdn3d


High precision/quality 3d denoise filter. This filter aims to reduce
image noise producing smooth images and making still images really
still. It should enhance compressibility.

It accepts the following optional parameters:
I<luma_spatial>:I<chroma_spatial>:I<luma_tmp>:I<chroma_tmp>


=over 4


=item B<luma_spatial>

a non-negative float number which specifies spatial luma strength,
defaults to 4.0


=item B<chroma_spatial>

a non-negative float number which specifies spatial chroma strength,
defaults to 3.0*I<luma_spatial>/4.0


=item B<luma_tmp>

a float number which specifies luma temporal strength, defaults to
6.0*I<luma_spatial>/4.0


=item B<chroma_tmp>

a float number which specifies chroma temporal strength, defaults to
I<luma_tmp>*I<chroma_spatial>/I<luma_spatial>

=back



=head2 hue


Modify the hue and/or the saturation of the input.

This filter accepts the following optional named options:


=over 4


=item B<h>

Specify the hue angle as a number of degrees. It accepts a float
number or an expression, and defaults to 0.0.


=item B<H>

Specify the hue angle as a number of degrees. It accepts a float
number or an expression, and defaults to 0.0.


=item B<s>

Specify the saturation in the [-10,10] range. It accepts a float number and
defaults to 1.0.

=back


The I<h>, I<H> and I<s> parameters are expressions containing the
following constants:


=over 4


=item B<n>

frame count of the input frame starting from 0


=item B<pts>

presentation timestamp of the input frame expressed in time base units


=item B<r>

frame rate of the input video, NAN if the input frame rate is unknown


=item B<t>

timestamp expressed in seconds, NAN if the input timestamp is unknown


=item B<tb>

time base of the input video

=back


The options can also be set using the syntax: I<hue>:I<saturation>

In this case I<hue> is expressed in degrees.

Some examples follow:

=over 4


=item *

Set the hue to 90 degrees and the saturation to 1.0:
	
	hue=h=90:s=1



=item *

Same command but expressing the hue in radians:
	
	hue=H=PI/2:s=1



=item *

Same command without named options, hue must be expressed in degrees:
	
	hue=90:1



=item *

Note that "h:s" syntax does not support expressions for the values of
h and s, so the following example will issue an error:
	
	hue=PI/2:1



=item *

Rotate hue and make the saturation swing between 0
and 2 over a period of 1 second:
	
	hue="H=2*PI*t: s=sin(2*PI*t)+1"



=item *

Apply a 3 seconds saturation fade-in effect starting at 0:
	
	hue="s=min(t/3,1)"


The general fade-in expression can be written as:
	
	hue="s=min(0, max((t-START)/DURATION, 1))"



=item *

Apply a 3 seconds saturation fade-out effect starting at 5 seconds:
	
	hue="s=max(0, min(1, (8-t)/3))"


The general fade-out expression can be written as:
	
	hue="s=max(0, min(1, (START+DURATION-t)/DURATION))"



=back



=head3 Commands


This filter supports the following command:

=over 4


=item B<reinit>

Modify the hue and/or the saturation of the input video.
The command accepts the same named options and syntax than when calling the
filter from the command-line.

If a parameter is omitted, it is kept at its current value.

=back



=head2 idet


Interlaceing detect filter. This filter tries to detect if the input is
interlaced or progressive. Top or bottom field first.


=head2 lut, lutrgb, lutyuv


Compute a look-up table for binding each pixel component input value
to an output value, and apply it to input video.

I<lutyuv> applies a lookup table to a YUV input video, I<lutrgb>
to an RGB input video.

These filters accept in input a ":"-separated list of options, which
specify the expressions used for computing the lookup table for the
corresponding pixel component values.

The I<lut> filter requires either YUV or RGB pixel formats in
input, and accepts the options:

=over 4


=item I<c0> B<(first  pixel component)>


=item I<c1> B<(second pixel component)>


=item I<c2> B<(third  pixel component)>


=item I<c3> B<(fourth pixel component, corresponds to the alpha component)>


=back


The exact component associated to each option depends on the format in
input.

The I<lutrgb> filter requires RGB pixel formats in input, and
accepts the options:

=over 4


=item I<r> B<(red component)>


=item I<g> B<(green component)>


=item I<b> B<(blue component)>


=item I<a> B<(alpha component)>


=back


The I<lutyuv> filter requires YUV pixel formats in input, and
accepts the options:

=over 4


=item I<y> B<(Y/luminance component)>


=item I<u> B<(U/Cb component)>


=item I<v> B<(V/Cr component)>


=item I<a> B<(alpha component)>


=back


The expressions can contain the following constants and functions:


=over 4


=item B<w, h>

the input width and height


=item B<val>

input value for the pixel component


=item B<clipval>

the input value clipped in the I<minval>-I<maxval> range


=item B<maxval>

maximum value for the pixel component


=item B<minval>

minimum value for the pixel component


=item B<negval>

the negated value for the pixel component value clipped in the
I<minval>-I<maxval> range , it corresponds to the expression
"maxval-clipval+minval"


=item B<clip(val)>

the computed value in I<val> clipped in the
I<minval>-I<maxval> range


=item B<gammaval(gamma)>

the computed gamma correction value of the pixel component value
clipped in the I<minval>-I<maxval> range, corresponds to the
expression
"pow((clipval-minval)/(maxval-minval),I<gamma>)*(maxval-minval)+minval"


=back


All expressions default to "val".

Some examples follow:
	
	# negate input video
	lutrgb="r=maxval+minval-val:g=maxval+minval-val:b=maxval+minval-val"
	lutyuv="y=maxval+minval-val:u=maxval+minval-val:v=maxval+minval-val"
	
	# the above is the same as
	lutrgb="r=negval:g=negval:b=negval"
	lutyuv="y=negval:u=negval:v=negval"
	
	# negate luminance
	lutyuv=y=negval
	
	# remove chroma components, turns the video into a graytone image
	lutyuv="u=128:v=128"
	
	# apply a luma burning effect
	lutyuv="y=2*val"
	
	# remove green and blue components
	lutrgb="g=0:b=0"
	
	# set a constant alpha channel value on input
	format=rgba,lutrgb=a="maxval-minval/2"
	
	# correct luminance gamma by a 0.5 factor
	lutyuv=y=gammaval(0.5)



=head2 mp


Apply an MPlayer filter to the input video.

This filter provides a wrapper around most of the filters of
MPlayer/MEncoder.

This wrapper is considered experimental. Some of the wrapped filters
may not work properly and we may drop support for them, as they will
be implemented natively into FFmpeg. Thus you should avoid
depending on them when writing portable scripts.

The filters accepts the parameters:
I<filter_name>[:=]I<filter_params>

I<filter_name> is the name of a supported MPlayer filter,
I<filter_params> is a string containing the parameters accepted by
the named filter.

The list of the currently supported filters follows:

=over 4


=item I<denoise3d>


=item I<detc>


=item I<dint>


=item I<divtc>


=item I<down3dright>


=item I<dsize>


=item I<eq2>


=item I<eq>


=item I<field>


=item I<fil>


=item I<fixpts>


=item I<fspp>


=item I<geq>


=item I<harddup>


=item I<hqdn3d>


=item I<il>


=item I<ilpack>


=item I<ivtc>


=item I<kerndeint>


=item I<mcdeint>


=item I<noise>


=item I<ow>


=item I<palette>


=item I<perspective>


=item I<phase>


=item I<pp7>


=item I<pullup>


=item I<qp>


=item I<rectangle>


=item I<sab>


=item I<softpulldown>


=item I<softskip>


=item I<spp>


=item I<telecine>


=item I<tile>


=item I<tinterlace>


=item I<unsharp>


=item I<uspp>


=item I<yuvcsp>


=item I<yvu9>


=back


The parameter syntax and behavior for the listed filters are the same
of the corresponding MPlayer filters. For detailed instructions check
the "VIDEO FILTERS" section in the MPlayer manual.

Some examples follow:

=over 4


=item *

Adjust gamma, brightness, contrast:
	
	mp=eq2=1.0:2:0.5



=item *

Add temporal noise to input video:
	
	mp=noise=20t


=back


See also mplayer(1), E<lt>B<http://www.mplayerhq.hu/>E<gt>.


=head2 negate


Negate input video.

This filter accepts an integer in input, if non-zero it negates the
alpha component (if available). The default value in input is 0.


=head2 noformat


Force libavfilter not to use any of the specified pixel formats for the
input to the next filter.

The filter accepts a list of pixel format names, separated by ":",
for example "yuv420p:monow:rgb24".

Some examples follow:
	
	# force libavfilter to use a format different from "yuv420p" for the
	# input to the vflip filter
	noformat=yuv420p,vflip
	
	# convert the input video to any of the formats not contained in the list
	noformat=yuv420p:yuv444p:yuv410p



=head2 null


Pass the video source unchanged to the output.


=head2 ocv


Apply video transform using libopencv.

To enable this filter install libopencv library and headers and
configure FFmpeg with C<--enable-libopencv>.

The filter takes the parameters: I<filter_name>{:=}I<filter_params>.

I<filter_name> is the name of the libopencv filter to apply.

I<filter_params> specifies the parameters to pass to the libopencv
filter. If not specified the default values are assumed.

Refer to the official libopencv documentation for more precise
information:
E<lt>B<http://opencv.willowgarage.com/documentation/c/image_filtering.html>E<gt>

Follows the list of supported libopencv filters.



=head3 dilate


Dilate an image by using a specific structuring element.
This filter corresponds to the libopencv function C<cvDilate>.

It accepts the parameters: I<struct_el>:I<nb_iterations>.

I<struct_el> represents a structuring element, and has the syntax:
I<cols>xI<rows>+I<anchor_x>xI<anchor_y>/I<shape>

I<cols> and I<rows> represent the number of columns and rows of
the structuring element, I<anchor_x> and I<anchor_y> the anchor
point, and I<shape> the shape for the structuring element, and
can be one of the values "rect", "cross", "ellipse", "custom".

If the value for I<shape> is "custom", it must be followed by a
string of the form "=I<filename>". The file with name
I<filename> is assumed to represent a binary image, with each
printable character corresponding to a bright pixel. When a custom
I<shape> is used, I<cols> and I<rows> are ignored, the number
or columns and rows of the read file are assumed instead.

The default value for I<struct_el> is "3x3+0x0/rect".

I<nb_iterations> specifies the number of times the transform is
applied to the image, and defaults to 1.

Follow some example:
	
	# use the default values
	ocv=dilate
	
	# dilate using a structuring element with a 5x5 cross, iterate two times
	ocv=dilate=5x5+2x2/cross:2
	
	# read the shape from the file diamond.shape, iterate two times
	# the file diamond.shape may contain a pattern of characters like this:
	#   *
	#  ***
	# *****
	#  ***
	#   *
	# the specified cols and rows are ignored (but not the anchor point coordinates)
	ocv=0x0+2x2/custom=diamond.shape:2



=head3 erode


Erode an image by using a specific structuring element.
This filter corresponds to the libopencv function C<cvErode>.

The filter accepts the parameters: I<struct_el>:I<nb_iterations>,
with the same syntax and semantics as the dilate filter.


=head3 smooth


Smooth the input video.

The filter takes the following parameters:
I<type>:I<param1>:I<param2>:I<param3>:I<param4>.

I<type> is the type of smooth filter to apply, and can be one of
the following values: "blur", "blur_no_scale", "median", "gaussian",
"bilateral". The default value is "gaussian".

I<param1>, I<param2>, I<param3>, and I<param4> are
parameters whose meanings depend on smooth type. I<param1> and
I<param2> accept integer positive values or 0, I<param3> and
I<param4> accept float values.

The default value for I<param1> is 3, the default value for the
other parameters is 0.

These parameters correspond to the parameters assigned to the
libopencv function C<cvSmooth>.



=head2 overlay


Overlay one video on top of another.

It takes two inputs and one output, the first input is the "main"
video on which the second input is overlayed.

It accepts the parameters: I<x>:I<y>[:I<options>].

I<x> is the x coordinate of the overlayed video on the main video,
I<y> is the y coordinate. I<x> and I<y> are expressions containing
the following parameters:


=over 4


=item B<main_w, main_h>

main input width and height


=item B<W, H>

same as I<main_w> and I<main_h>


=item B<overlay_w, overlay_h>

overlay input width and height


=item B<w, h>

same as I<overlay_w> and I<overlay_h>

=back


I<options> is an optional list of I<key>=I<value> pairs,
separated by ":".

The description of the accepted options follows.


=over 4


=item B<rgb>

If set to 1, force the filter to accept inputs in the RGB
color space. Default value is 0.

=back


Be aware that frames are taken from each input video in timestamp
order, hence, if their initial timestamps differ, it is a a good idea
to pass the two inputs through a I<setpts=PTS-STARTPTS> filter to
have them begin in the same zero timestamp, as it does the example for
the I<movie> filter.

Follow some examples:
	
	# draw the overlay at 10 pixels from the bottom right
	# corner of the main video.
	overlay=main_w-overlay_w-10:main_h-overlay_h-10
	
	# insert a transparent PNG logo in the bottom left corner of the input
	ffmpeg -i input -i logo -filter_complex 'overlay=10:main_h-overlay_h-10' output
	
	# insert 2 different transparent PNG logos (second logo on bottom
	# right corner):
	ffmpeg -i input -i logo1 -i logo2 -filter_complex
	'overlay=10:H-h-10,overlay=W-w-10:H-h-10' output
	
	# add a transparent color layer on top of the main video,
	# WxH specifies the size of the main input to the overlay filter
	color=red.3:WxH [over]; [in][over] overlay [out]
	
	# play an original video and a filtered version (here with the deshake filter)
	# side by side
	ffplay input.avi -vf 'split[a][b]; [a]pad=iw*2:ih[src]; [b]deshake[filt]; [src][filt]overlay=w'
	
	# the previous example is the same as:
	ffplay input.avi -vf 'split[b], pad=iw*2[src], [b]deshake, [src]overlay=w'


You can chain together more overlays but the efficiency of such
approach is yet to be tested.


=head2 pad


Add paddings to the input image, and places the original input at the
given coordinates I<x>, I<y>.

It accepts the following parameters:
I<width>:I<height>:I<x>:I<y>:I<color>.

The parameters I<width>, I<height>, I<x>, and I<y> are
expressions containing the following constants:


=over 4


=item B<in_w, in_h>

the input video width and height


=item B<iw, ih>

same as I<in_w> and I<in_h>


=item B<out_w, out_h>

the output width and height, that is the size of the padded area as
specified by the I<width> and I<height> expressions


=item B<ow, oh>

same as I<out_w> and I<out_h>


=item B<x, y>

x and y offsets as specified by the I<x> and I<y>
expressions, or NAN if not yet specified


=item B<a>

same as I<iw> / I<ih>


=item B<sar>

input sample aspect ratio


=item B<dar>

input display aspect ratio, it is the same as (I<iw> / I<ih>) * I<sar>


=item B<hsub, vsub>

horizontal and vertical chroma subsample values. For example for the
pixel format "yuv422p" I<hsub> is 2 and I<vsub> is 1.

=back


Follows the description of the accepted parameters.


=over 4


=item B<width, height>


Specify the size of the output image with the paddings added. If the
value for I<width> or I<height> is 0, the corresponding input size
is used for the output.

The I<width> expression can reference the value set by the
I<height> expression, and vice versa.

The default value of I<width> and I<height> is 0.


=item B<x, y>


Specify the offsets where to place the input image in the padded area
with respect to the top/left border of the output image.

The I<x> expression can reference the value set by the I<y>
expression, and vice versa.

The default value of I<x> and I<y> is 0.


=item B<color>


Specify the color of the padded area, it can be the name of a color
(case insensitive match) or a 0xRRGGBB[AA] sequence.

The default value of I<color> is "black".


=back



=head3 Examples



=over 4


=item *

Add paddings with color "violet" to the input video. Output video
size is 640x480, the top-left corner of the input video is placed at
column 0, row 40:
	
	pad=640:480:0:40:violet



=item *

Pad the input to get an output with dimensions increased by 3/2,
and put the input video at the center of the padded area:
	
	pad="3/2*iw:3/2*ih:(ow-iw)/2:(oh-ih)/2"



=item *

Pad the input to get a squared output with size equal to the maximum
value between the input width and height, and put the input video at
the center of the padded area:
	
	pad="max(iw,ih):ow:(ow-iw)/2:(oh-ih)/2"



=item *

Pad the input to get a final w/h ratio of 16:9:
	
	pad="ih*16/9:ih:(ow-iw)/2:(oh-ih)/2"



=item *

In case of anamorphic video, in order to set the output display aspect
correctly, it is necessary to use I<sar> in the expression,
according to the relation:
	
	(ih * X / ih) * sar = output_dar
	X = output_dar / sar


Thus the previous example needs to be modified to:
	
	pad="ih*16/9/sar:ih:(ow-iw)/2:(oh-ih)/2"



=item *

Double output size and put the input video in the bottom-right
corner of the output padded area:
	
	pad="2*iw:2*ih:ow-iw:oh-ih"


=back



=head2 pixdesctest


Pixel format descriptor test filter, mainly useful for internal
testing. The output video should be equal to the input video.

For example:
	
	format=monow, pixdesctest


can be used to test the monowhite pixel format descriptor definition.


=head2 removelogo


Suppress a TV station logo, using an image file to determine which
pixels comprise the logo. It works by filling in the pixels that
comprise the logo with neighboring pixels.

This filter requires one argument which specifies the filter bitmap
file, which can be any image format supported by libavformat. The
width and height of the image file must match those of the video
stream being processed.

Pixels in the provided bitmap image with a value of zero are not
considered part of the logo, non-zero pixels are considered part of
the logo. If you use white (255) for the logo and black (0) for the
rest, you will be safe. For making the filter bitmap, it is
recommended to take a screen capture of a black frame with the logo
visible, and then using a threshold filter followed by the erode
filter once or twice.

If needed, little splotches can be fixed manually. Remember that if
logo pixels are not covered, the filter quality will be much
reduced. Marking too many pixels as part of the logo does not hurt as
much, but it will increase the amount of blurring needed to cover over
the image and will destroy more information than necessary, and extra
pixels will slow things down on a large logo.


=head2 scale


Scale (resize) the input video to I<width>:I<height>[:I<interl>={1|-1}] and/or convert the image format.

The scale filter forces the output display aspect ratio to be the same
of the input, by changing the output sample aspect ratio.

The parameters I<width> and I<height> are expressions containing
the following constants:


=over 4


=item B<in_w, in_h>

the input width and height


=item B<iw, ih>

same as I<in_w> and I<in_h>


=item B<out_w, out_h>

the output (cropped) width and height


=item B<ow, oh>

same as I<out_w> and I<out_h>


=item B<a>

same as I<iw> / I<ih>


=item B<sar>

input sample aspect ratio


=item B<dar>

input display aspect ratio, it is the same as (I<iw> / I<ih>) * I<sar>


=item B<hsub, vsub>

horizontal and vertical chroma subsample values. For example for the
pixel format "yuv422p" I<hsub> is 2 and I<vsub> is 1.

=back


If the input image format is different from the format requested by
the next filter, the scale filter will convert the input to the
requested format.

If the value for I<width> or I<height> is 0, the respective input
size is used for the output.

If the value for I<width> or I<height> is -1, the scale filter will
use, for the respective output size, a value that maintains the aspect
ratio of the input image.

The default value of I<width> and I<height> is 0.

Valid values for the optional parameter I<interl> are:


=over 4


=item B<1>

force interlaced aware scaling


=item B<-1>

select interlaced aware scaling depending on whether the source frames
are flagged as interlaced or not

=back


Unless I<interl> is set to one of the above options, interlaced scaling will not be used.

Some examples follow:
	
	# scale the input video to a size of 200x100.
	scale=200:100
	
	# scale the input to 2x
	scale=2*iw:2*ih
	# the above is the same as
	scale=2*in_w:2*in_h
	
	# scale the input to 2x with forced interlaced scaling
	scale=2*iw:2*ih:interl=1
	
	# scale the input to half size
	scale=iw/2:ih/2
	
	# increase the width, and set the height to the same size
	scale=3/2*iw:ow
	
	# seek for Greek harmony
	scale=iw:1/PHI*iw
	scale=ih*PHI:ih
	
	# increase the height, and set the width to 3/2 of the height
	scale=3/2*oh:3/5*ih
	
	# increase the size, but make the size a multiple of the chroma
	scale="trunc(3/2*iw/hsub)*hsub:trunc(3/2*ih/vsub)*vsub"
	
	# increase the width to a maximum of 500 pixels, keep the same input aspect ratio
	scale='min(500, iw*3/2):-1'



=head2 select

Select frames to pass in output.

It accepts in input an expression, which is evaluated for each input
frame. If the expression is evaluated to a non-zero value, the frame
is selected and passed to the output, otherwise it is discarded.

The expression can contain the following constants:


=over 4


=item B<n>

the sequential number of the filtered frame, starting from 0


=item B<selected_n>

the sequential number of the selected frame, starting from 0


=item B<prev_selected_n>

the sequential number of the last selected frame, NAN if undefined


=item B<TB>

timebase of the input timestamps


=item B<pts>

the PTS (Presentation TimeStamp) of the filtered video frame,
expressed in I<TB> units, NAN if undefined


=item B<t>

the PTS (Presentation TimeStamp) of the filtered video frame,
expressed in seconds, NAN if undefined


=item B<prev_pts>

the PTS of the previously filtered video frame, NAN if undefined


=item B<prev_selected_pts>

the PTS of the last previously filtered video frame, NAN if undefined


=item B<prev_selected_t>

the PTS of the last previously selected video frame, NAN if undefined


=item B<start_pts>

the PTS of the first video frame in the video, NAN if undefined


=item B<start_t>

the time of the first video frame in the video, NAN if undefined


=item B<pict_type>

the type of the filtered frame, can assume one of the following
values:

=over 4


=item B<I>


=item B<P>


=item B<B>


=item B<S>


=item B<SI>


=item B<SP>


=item B<BI>


=back



=item B<interlace_type>

the frame interlace type, can assume one of the following values:

=over 4


=item B<PROGRESSIVE>

the frame is progressive (not interlaced)

=item B<TOPFIRST>

the frame is top-field-first

=item B<BOTTOMFIRST>

the frame is bottom-field-first

=back



=item B<key>

1 if the filtered frame is a key-frame, 0 otherwise


=item B<pos>

the position in the file of the filtered frame, -1 if the information
is not available (e.g. for synthetic video)


=item B<scene>

value between 0 and 1 to indicate a new scene; a low value reflects a low
probability for the current frame to introduce a new scene, while a higher
value means the current frame is more likely to be one (see the example below)


=back


The default value of the select expression is "1".

Some examples follow:

	
	# select all frames in input
	select
	
	# the above is the same as:
	select=1
	
	# skip all frames:
	select=0
	
	# select only I-frames
	select='eq(pict_type,I)'
	
	# select one frame every 100
	select='not(mod(n,100))'
	
	# select only frames contained in the 10-20 time interval
	select='gte(t,10)*lte(t,20)'
	
	# select only I frames contained in the 10-20 time interval
	select='gte(t,10)*lte(t,20)*eq(pict_type,I)'
	
	# select frames with a minimum distance of 10 seconds
	select='isnan(prev_selected_t)+gte(t-prev_selected_t,10)'


Complete example to create a mosaic of the first scenes:

	
	ffmpeg -i video.avi -vf select='gt(scene,0.4)',scale=160:120,tile -frames:v 1 preview.png


Comparing I<scene> against a value between 0.3 and 0.5 is generally a sane
choice.


=head2 setdar, setsar


The C<setdar> filter sets the Display Aspect Ratio for the filter
output video.

This is done by changing the specified Sample (aka Pixel) Aspect
Ratio, according to the following equation:
	
	<DAR> = <HORIZONTAL_RESOLUTION> / <VERTICAL_RESOLUTION> * <SAR>


Keep in mind that the C<setdar> filter does not modify the pixel
dimensions of the video frame. Also the display aspect ratio set by
this filter may be changed by later filters in the filterchain,
e.g. in case of scaling or if another "setdar" or a "setsar" filter is
applied.

The C<setsar> filter sets the Sample (aka Pixel) Aspect Ratio for
the filter output video.

Note that as a consequence of the application of this filter, the
output display aspect ratio will change according to the equation
above.

Keep in mind that the sample aspect ratio set by the C<setsar>
filter may be changed by later filters in the filterchain, e.g. if
another "setsar" or a "setdar" filter is applied.

The C<setdar> and C<setsar> filters accept a string in the
form I<num>:I<den> expressing an aspect ratio, or the following
named options, expressed as a sequence of I<key>=I<value> pairs,
separated by ":".


=over 4


=item B<max>

Set the maximum integer value to use for expressing numerator and
denominator when reducing the expressed aspect ratio to a rational.
Default value is C<100>.


=item B<r, ratio:>

Set the aspect ratio used by the filter.

The parameter can be a floating point number string, an expression, or
a string of the form I<num>:I<den>, where I<num> and
I<den> are the numerator and denominator of the aspect ratio. If
the parameter is not specified, it is assumed the value "0".
In case the form "I<num>:I<den>" the C<:> character should
be escaped.

=back


If the keys are omitted in the named options list, the specifed values
are assumed to be I<ratio> and I<max> in that order.

For example to change the display aspect ratio to 16:9, specify:
	
	setdar='16:9'


The example above is equivalent to:
	
	setdar=1.77777


To change the sample aspect ratio to 10:11, specify:
	
	setsar='10:11'


To set a display aspect ratio of 16:9, and specify a maximum integer value of
1000 in the aspect ratio reduction, use the command:
	
	setdar=ratio='16:9':max=1000



=head2 setfield


Force field for the output video frame.

The C<setfield> filter marks the interlace type field for the
output frames. It does not change the input frame, but only sets the
corresponding property, which affects how the frame is treated by
following filters (e.g. C<fieldorder> or C<yadif>).

It accepts a string parameter, which can assume the following values:

=over 4


=item B<auto>

Keep the same field property.


=item B<bff>

Mark the frame as bottom-field-first.


=item B<tff>

Mark the frame as top-field-first.


=item B<prog>

Mark the frame as progressive.

=back



=head2 showinfo


Show a line containing various information for each input video frame.
The input video is not modified.

The shown line contains a sequence of key/value pairs of the form
I<key>:I<value>.

A description of each shown parameter follows:


=over 4


=item B<n>

sequential number of the input frame, starting from 0


=item B<pts>

Presentation TimeStamp of the input frame, expressed as a number of
time base units. The time base unit depends on the filter input pad.


=item B<pts_time>

Presentation TimeStamp of the input frame, expressed as a number of
seconds


=item B<pos>

position of the frame in the input stream, -1 if this information in
unavailable and/or meaningless (for example in case of synthetic video)


=item B<fmt>

pixel format name


=item B<sar>

sample aspect ratio of the input frame, expressed in the form
I<num>/I<den>


=item B<s>

size of the input frame, expressed in the form
I<width>xI<height>


=item B<i>

interlaced mode ("P" for "progressive", "T" for top field first, "B"
for bottom field first)


=item B<iskey>

1 if the frame is a key frame, 0 otherwise


=item B<type>

picture type of the input frame ("I" for an I-frame, "P" for a
P-frame, "B" for a B-frame, "?" for unknown type).
Check also the documentation of the C<AVPictureType> enum and of
the C<av_get_picture_type_char> function defined in
F<libavutil/avutil.h>.


=item B<checksum>

Adler-32 checksum (printed in hexadecimal) of all the planes of the input frame


=item B<plane_checksum>

Adler-32 checksum (printed in hexadecimal) of each plane of the input frame,
expressed in the form "[I<c0> I<c1> I<c2> I<c3>]"

=back



=head2 slicify


Pass the images of input video on to next video filter as multiple
slices.

	
	ffmpeg -i in.avi -vf "slicify=32" out.avi


The filter accepts the slice height as parameter. If the parameter is
not specified it will use the default value of 16.

Adding this in the beginning of filter chains should make filtering
faster due to better use of the memory cache.


=head2 smartblur


Blur the input video without impacting the outlines.

The filter accepts the following parameters:
I<luma_radius>:I<luma_strength>:I<luma_threshold>[:I<chroma_radius>:I<chroma_strength>:I<chroma_threshold>]

Parameters prefixed by I<luma> indicate that they work on the
luminance of the pixels whereas parameters prefixed by I<chroma>
refer to the chrominance of the pixels.

If the chroma parameters are not set, the luma parameters are used for
either the luminance and the chrominance of the pixels.

I<luma_radius> or I<chroma_radius> must be a float number in the
range [0.1,5.0] that specifies the variance of the gaussian filter
used to blur the image (slower if larger).

I<luma_strength> or I<chroma_strength> must be a float number in
the range [-1.0,1.0] that configures the blurring. A value included in
[0.0,1.0] will blur the image whereas a value included in [-1.0,0.0]
will sharpen the image.

I<luma_threshold> or I<chroma_threshold> must be an integer in
the range [-30,30] that is used as a coefficient to determine whether
a pixel should be blurred or not. A value of 0 will filter all the
image, a value included in [0,30] will filter flat areas and a value
included in [-30,0] will filter edges.


=head2 split


Split input video into several identical outputs.

The filter accepts a single parameter which specifies the number of outputs. If
unspecified, it defaults to 2.

For example
	
	ffmpeg -i INPUT -filter_complex split=5 OUTPUT

will create 5 copies of the input video.

For example:
	
	[in] split [splitout1][splitout2];
	[splitout1] crop=100:100:0:0    [cropout];
	[splitout2] pad=200:200:100:100 [padout];


will create two separate outputs from the same input, one cropped and
one padded.


=head2 super2xsai


Scale the input by 2x and smooth using the Super2xSaI (Scale and
Interpolate) pixel art scaling algorithm.

Useful for enlarging pixel art images without reducing sharpness.


=head2 swapuv

Swap U & V plane.


=head2 thumbnail

Select the most representative frame in a given sequence of consecutive frames.

It accepts as argument the frames batch size to analyze (default I<N>=100);
in a set of I<N> frames, the filter will pick one of them, and then handle
the next batch of I<N> frames until the end.

Since the filter keeps track of the whole frames sequence, a bigger I<N>
value will result in a higher memory usage, so a high value is not recommended.

The following example extract one picture each 50 frames:
	
	thumbnail=50


Complete example of a thumbnail creation with B<ffmpeg>:
	
	ffmpeg -i in.avi -vf thumbnail,scale=300:200 -frames:v 1 out.png



=head2 tile


Tile several successive frames together.

It accepts as argument the tile size (i.e. the number of lines and columns)
in the form "I<w>xI<h>".

For example, produce 8×8 PNG tiles of all keyframes (B<-skip_frame
nokey>) in a movie:
	
	ffmpeg -skip_frame nokey -i file.avi -vf 'scale=128:72,tile=8x8' -an -vsync 0 keyframes%03d.png

The B<-vsync 0> is necessary to prevent B<ffmpeg> from
duplicating each output frame to accomodate the originally detected frame
rate.


=head2 tinterlace


Perform various types of temporal field interlacing.

Frames are counted starting from 1, so the first input frame is
considered odd.

This filter accepts a single parameter specifying the mode. Available
modes are:


=over 4


=item B<merge, 0>

Move odd frames into the upper field, even into the lower field,
generating a double height frame at half framerate.


=item B<drop_odd, 1>

Only output even frames, odd frames are dropped, generating a frame with
unchanged height at half framerate.


=item B<drop_even, 2>

Only output odd frames, even frames are dropped, generating a frame with
unchanged height at half framerate.


=item B<pad, 3>

Expand each frame to full height, but pad alternate lines with black,
generating a frame with double height at the same input framerate.


=item B<interleave_top, 4>

Interleave the upper field from odd frames with the lower field from
even frames, generating a frame with unchanged height at half framerate.


=item B<interleave_bottom, 5>

Interleave the lower field from odd frames with the upper field from
even frames, generating a frame with unchanged height at half framerate.


=item B<interlacex2, 6>

Double frame rate with unchanged height. Frames are inserted each
containing the second temporal field from the previous input frame and
the first temporal field from the next input frame. This mode relies on
the top_field_first flag. Useful for interlaced video displays with no
field synchronisation.

=back


Numeric values are deprecated but are accepted for backward
compatibility reasons.

Default mode is C<merge>.


=head2 transpose


Transpose rows with columns in the input video and optionally flip it.

This filter accepts the following named parameters:


=over 4


=item B<dir>

Specify the transposition direction. Can assume the following values:


=over 4


=item B<0, 4>

Rotate by 90 degrees counterclockwise and vertically flip (default), that is:
	
	L.R     L.l
	. . ->  . .
	l.r     R.r



=item B<1, 5>

Rotate by 90 degrees clockwise, that is:
	
	L.R     l.L
	. . ->  . .
	l.r     r.R



=item B<2, 6>

Rotate by 90 degrees counterclockwise, that is:
	
	L.R     R.r
	. . ->  . .
	l.r     L.l



=item B<3, 7>

Rotate by 90 degrees clockwise and vertically flip, that is:
	
	L.R     r.R
	. . ->  . .
	l.r     l.L


=back


For values between 4-7, the transposition is only done if the input
video geometry is portrait and not landscape. These values are
deprecated, the C<passthrough> option should be used instead.


=item B<passthrough>

Do not apply the transposition if the input geometry matches the one
specified by the specified value. It accepts the following values:

=over 4


=item B<none>

Always apply transposition.

=item B<portrait>

Preserve portrait geometry (when I<height> E<gt>= I<width>).

=item B<landscape>

Preserve landscape geometry (when I<width> E<gt>= I<height>).

=back


Default value is C<none>.

=back



=head2 unsharp


Sharpen or blur the input video.

It accepts the following parameters:
I<luma_msize_x>:I<luma_msize_y>:I<luma_amount>:I<chroma_msize_x>:I<chroma_msize_y>:I<chroma_amount>

Negative values for the amount will blur the input video, while positive
values will sharpen. All parameters are optional and default to the
equivalent of the string '5:5:1.0:5:5:0.0'.


=over 4



=item B<luma_msize_x>

Set the luma matrix horizontal size. It can be an integer between 3
and 13, default value is 5.


=item B<luma_msize_y>

Set the luma matrix vertical size. It can be an integer between 3
and 13, default value is 5.


=item B<luma_amount>

Set the luma effect strength. It can be a float number between -2.0
and 5.0, default value is 1.0.


=item B<chroma_msize_x>

Set the chroma matrix horizontal size. It can be an integer between 3
and 13, default value is 5.


=item B<chroma_msize_y>

Set the chroma matrix vertical size. It can be an integer between 3
and 13, default value is 5.


=item B<chroma_amount>

Set the chroma effect strength. It can be a float number between -2.0
and 5.0, default value is 0.0.


=back


	
	# Strong luma sharpen effect parameters
	unsharp=7:7:2.5
	
	# Strong blur of both luma and chroma parameters
	unsharp=7:7:-2:7:7:-2
	
	# Use the default values with B<ffmpeg>
	ffmpeg -i in.avi -vf "unsharp" out.mp4



=head2 vflip


Flip the input video vertically.

	
	ffmpeg -i in.avi -vf "vflip" out.avi



=head2 yadif


Deinterlace the input video ("yadif" means "yet another deinterlacing
filter").

It accepts the optional parameters: I<mode>:I<parity>:I<auto>.

I<mode> specifies the interlacing mode to adopt, accepts one of the
following values:


=over 4


=item B<0>

output 1 frame for each frame

=item B<1>

output 1 frame for each field

=item B<2>

like 0 but skips spatial interlacing check

=item B<3>

like 1 but skips spatial interlacing check

=back


Default value is 0.

I<parity> specifies the picture field parity assumed for the input
interlaced video, accepts one of the following values:


=over 4


=item B<0>

assume top field first

=item B<1>

assume bottom field first

=item B<-1>

enable automatic detection

=back


Default value is -1.
If interlacing is unknown or decoder does not export this information,
top field first will be assumed.

I<auto> specifies if deinterlacer should trust the interlaced flag
and only deinterlace frames marked as interlaced


=over 4


=item B<0>

deinterlace all frames

=item B<1>

only deinterlace frames marked as interlaced

=back


Default value is 0.


=head1 VIDEO SOURCES


Below is a description of the currently available video sources.


=head2 buffer


Buffer video frames, and make them available to the filter chain.

This source is mainly intended for a programmatic use, in particular
through the interface defined in F<libavfilter/vsrc_buffer.h>.

It accepts a list of options in the form of I<key>=I<value> pairs
separated by ":". A description of the accepted options follows.


=over 4



=item B<video_size>

Specify the size (width and height) of the buffered video frames.


=item B<pix_fmt>

A string representing the pixel format of the buffered video frames.
It may be a number corresponding to a pixel format, or a pixel format
name.


=item B<time_base>

Specify the timebase assumed by the timestamps of the buffered frames.


=item B<time_base>

Specify the frame rate expected for the video stream.


=item B<pixel_aspect>

Specify the sample aspect ratio assumed by the video frames.


=item B<sws_param>

Specify the optional parameters to be used for the scale filter which
is automatically inserted when an input change is detected in the
input size or format.

=back


For example:
	
	buffer=size=320x240:pix_fmt=yuv410p:time_base=1/24:pixel_aspect=1/1


will instruct the source to accept video frames with size 320x240 and
with format "yuv410p", assuming 1/24 as the timestamps timebase and
square pixels (1:1 sample aspect ratio).
Since the pixel format with name "yuv410p" corresponds to the number 6
(check the enum AVPixelFormat definition in F<libavutil/pixfmt.h>),
this example corresponds to:
	
	buffer=size=320x240:pixfmt=6:time_base=1/24:pixel_aspect=1/1


Alternatively, the options can be specified as a flat string, but this
syntax is deprecated:

I<width>:I<height>:I<pix_fmt>:I<time_base.num>:I<time_base.den>:I<pixel_aspect.num>:I<pixel_aspect.den>[:I<sws_param>]


=head2 cellauto


Create a pattern generated by an elementary cellular automaton.

The initial state of the cellular automaton can be defined through the
B<filename>, and B<pattern> options. If such options are
not specified an initial state is created randomly.

At each new frame a new row in the video is filled with the result of
the cellular automaton next generation. The behavior when the whole
frame is filled is defined by the B<scroll> option.

This source accepts a list of options in the form of
I<key>=I<value> pairs separated by ":". A description of the
accepted options follows.


=over 4


=item B<filename, f>

Read the initial cellular automaton state, i.e. the starting row, from
the specified file.
In the file, each non-whitespace character is considered an alive
cell, a newline will terminate the row, and further characters in the
file will be ignored.


=item B<pattern, p>

Read the initial cellular automaton state, i.e. the starting row, from
the specified string.

Each non-whitespace character in the string is considered an alive
cell, a newline will terminate the row, and further characters in the
string will be ignored.


=item B<rate, r>

Set the video rate, that is the number of frames generated per second.
Default is 25.


=item B<random_fill_ratio, ratio>

Set the random fill ratio for the initial cellular automaton row. It
is a floating point number value ranging from 0 to 1, defaults to
1/PHI.

This option is ignored when a file or a pattern is specified.


=item B<random_seed, seed>

Set the seed for filling randomly the initial row, must be an integer
included between 0 and UINT32_MAX. If not specified, or if explicitly
set to -1, the filter will try to use a good random seed on a best
effort basis.


=item B<rule>

Set the cellular automaton rule, it is a number ranging from 0 to 255.
Default value is 110.


=item B<size, s>

Set the size of the output video.

If B<filename> or B<pattern> is specified, the size is set
by default to the width of the specified initial state row, and the
height is set to I<width> * PHI.

If B<size> is set, it must contain the width of the specified
pattern string, and the specified pattern will be centered in the
larger row.

If a filename or a pattern string is not specified, the size value
defaults to "320x518" (used for a randomly generated initial state).


=item B<scroll>

If set to 1, scroll the output upward when all the rows in the output
have been already filled. If set to 0, the new generated row will be
written over the top row just after the bottom row is filled.
Defaults to 1.


=item B<start_full, full>

If set to 1, completely fill the output with generated rows before
outputting the first frame.
This is the default behavior, for disabling set the value to 0.


=item B<stitch>

If set to 1, stitch the left and right row edges together.
This is the default behavior, for disabling set the value to 0.

=back



=head3 Examples



=over 4


=item *

Read the initial state from F<pattern>, and specify an output of
size 200x400.
	
	cellauto=f=pattern:s=200x400



=item *

Generate a random initial row with a width of 200 cells, with a fill
ratio of 2/3:
	
	cellauto=ratio=2/3:s=200x200



=item *

Create a pattern generated by rule 18 starting by a single alive cell
centered on an initial row with width 100:
	
	cellauto=p=@s=100x400:full=0:rule=18



=item *

Specify a more elaborated initial pattern:
	
	cellauto=p='@@ @ @@':s=100x400:full=0:rule=18



=back



=head2 mandelbrot


Generate a Mandelbrot set fractal, and progressively zoom towards the
point specified with I<start_x> and I<start_y>.

This source accepts a list of options in the form of
I<key>=I<value> pairs separated by ":". A description of the
accepted options follows.


=over 4



=item B<end_pts>

Set the terminal pts value. Default value is 400.


=item B<end_scale>

Set the terminal scale value.
Must be a floating point value. Default value is 0.3.


=item B<inner>

Set the inner coloring mode, that is the algorithm used to draw the
Mandelbrot fractal internal region.

It shall assume one of the following values:

=over 4


=item B<black>

Set black mode.

=item B<convergence>

Show time until convergence.

=item B<mincol>

Set color based on point closest to the origin of the iterations.

=item B<period>

Set period mode.

=back


Default value is I<mincol>.


=item B<bailout>

Set the bailout value. Default value is 10.0.


=item B<maxiter>

Set the maximum of iterations performed by the rendering
algorithm. Default value is 7189.


=item B<outer>

Set outer coloring mode.
It shall assume one of following values:

=over 4


=item B<iteration_count>

Set iteration cound mode.

=item B<normalized_iteration_count>

set normalized iteration count mode.

=back

Default value is I<normalized_iteration_count>.


=item B<rate, r>

Set frame rate, expressed as number of frames per second. Default
value is "25".


=item B<size, s>

Set frame size. Default value is "640x480".


=item B<start_scale>

Set the initial scale value. Default value is 3.0.


=item B<start_x>

Set the initial x position. Must be a floating point value between
-100 and 100. Default value is -0.743643887037158704752191506114774.


=item B<start_y>

Set the initial y position. Must be a floating point value between
-100 and 100. Default value is -0.131825904205311970493132056385139.

=back



=head2 mptestsrc


Generate various test patterns, as generated by the MPlayer test filter.

The size of the generated video is fixed, and is 256x256.
This source is useful in particular for testing encoding features.

This source accepts an optional sequence of I<key>=I<value> pairs,
separated by ":". The description of the accepted options follows.


=over 4



=item B<rate, r>

Specify the frame rate of the sourced video, as the number of frames
generated per second. It has to be a string in the format
I<frame_rate_num>/I<frame_rate_den>, an integer number, a float
number or a valid video frame rate abbreviation. The default value is
"25".


=item B<duration, d>

Set the video duration of the sourced video. The accepted syntax is:
	
	[-]HH:MM:SS[.m...]
	[-]S+[.m...]

See also the function C<av_parse_time()>.

If not specified, or the expressed duration is negative, the video is
supposed to be generated forever.


=item B<test, t>


Set the number or the name of the test to perform. Supported tests are:

=over 4


=item B<dc_luma>


=item B<dc_chroma>


=item B<freq_luma>


=item B<freq_chroma>


=item B<amp_luma>


=item B<amp_chroma>


=item B<cbp>


=item B<mv>


=item B<ring1>


=item B<ring2>


=item B<all>


=back


Default value is "all", which will cycle through the list of all tests.

=back


For example the following:
	
	testsrc=t=dc_luma


will generate a "dc_luma" test pattern.


=head2 frei0r_src


Provide a frei0r source.

To enable compilation of this filter you need to install the frei0r
header and configure FFmpeg with C<--enable-frei0r>.

The source supports the syntax:
	
	<size>:<rate>:<src_name>[{=|:}<param1>:<param2>:...:<paramN>]


I<size> is the size of the video to generate, may be a string of the
form I<width>xI<height> or a frame size abbreviation.
I<rate> is the rate of the video to generate, may be a string of
the form I<num>/I<den> or a frame rate abbreviation.
I<src_name> is the name to the frei0r source to load. For more
information regarding frei0r and how to set the parameters read the
section frei0r in the description of the video filters.

For example, to generate a frei0r partik0l source with size 200x200
and frame rate 10 which is overlayed on the overlay filter main input:
	
	frei0r_src=200x200:10:partik0l=1234 [overlay]; [in][overlay] overlay



=head2 life


Generate a life pattern.

This source is based on a generalization of John Conway's life game.

The sourced input represents a life grid, each pixel represents a cell
which can be in one of two possible states, alive or dead. Every cell
interacts with its eight neighbours, which are the cells that are
horizontally, vertically, or diagonally adjacent.

At each interaction the grid evolves according to the adopted rule,
which specifies the number of neighbor alive cells which will make a
cell stay alive or born. The B<rule> option allows to specify
the rule to adopt.

This source accepts a list of options in the form of
I<key>=I<value> pairs separated by ":". A description of the
accepted options follows.


=over 4


=item B<filename, f>

Set the file from which to read the initial grid state. In the file,
each non-whitespace character is considered an alive cell, and newline
is used to delimit the end of each row.

If this option is not specified, the initial grid is generated
randomly.


=item B<rate, r>

Set the video rate, that is the number of frames generated per second.
Default is 25.


=item B<random_fill_ratio, ratio>

Set the random fill ratio for the initial random grid. It is a
floating point number value ranging from 0 to 1, defaults to 1/PHI.
It is ignored when a file is specified.


=item B<random_seed, seed>

Set the seed for filling the initial random grid, must be an integer
included between 0 and UINT32_MAX. If not specified, or if explicitly
set to -1, the filter will try to use a good random seed on a best
effort basis.


=item B<rule>

Set the life rule.

A rule can be specified with a code of the kind "SI<NS>/BI<NB>",
where I<NS> and I<NB> are sequences of numbers in the range 0-8,
I<NS> specifies the number of alive neighbor cells which make a
live cell stay alive, and I<NB> the number of alive neighbor cells
which make a dead cell to become alive (i.e. to "born").
"s" and "b" can be used in place of "S" and "B", respectively.

Alternatively a rule can be specified by an 18-bits integer. The 9
high order bits are used to encode the next cell state if it is alive
for each number of neighbor alive cells, the low order bits specify
the rule for "borning" new cells. Higher order bits encode for an
higher number of neighbor cells.
For example the number 6153 = C<(12E<lt>E<lt>9)+9> specifies a stay alive
rule of 12 and a born rule of 9, which corresponds to "S23/B03".

Default value is "S23/B3", which is the original Conway's game of life
rule, and will keep a cell alive if it has 2 or 3 neighbor alive
cells, and will born a new cell if there are three alive cells around
a dead cell.


=item B<size, s>

Set the size of the output video.

If B<filename> is specified, the size is set by default to the
same size of the input file. If B<size> is set, it must contain
the size specified in the input file, and the initial grid defined in
that file is centered in the larger resulting area.

If a filename is not specified, the size value defaults to "320x240"
(used for a randomly generated initial grid).


=item B<stitch>

If set to 1, stitch the left and right grid edges together, and the
top and bottom edges also. Defaults to 1.


=item B<mold>

Set cell mold speed. If set, a dead cell will go from B<death_color> to
B<mold_color> with a step of B<mold>. B<mold> can have a
value from 0 to 255.


=item B<life_color>

Set the color of living (or new born) cells.


=item B<death_color>

Set the color of dead cells. If B<mold> is set, this is the first color
used to represent a dead cell.


=item B<mold_color>

Set mold color, for definitely dead and moldy cells.

=back



=head3 Examples



=over 4


=item *

Read a grid from F<pattern>, and center it on a grid of size
300x300 pixels:
	
	life=f=pattern:s=300x300



=item *

Generate a random grid of size 200x200, with a fill ratio of 2/3:
	
	life=ratio=2/3:s=200x200



=item *

Specify a custom rule for evolving a randomly generated grid:
	
	life=rule=S14/B34



=item *

Full example with slow death effect (mold) using B<ffplay>:
	
	ffplay -f lavfi life=s=300x200:mold=10:r=60:ratio=0.1:death_color=#C83232:life_color=#00ff00,scale=1200:800:flags=16


=back



=head2 color, nullsrc, rgbtestsrc, smptebars, testsrc


The C<color> source provides an uniformly colored input.

The C<nullsrc> source returns unprocessed video frames. It is
mainly useful to be employed in analysis / debugging tools, or as the
source for filters which ignore the input data.

The C<rgbtestsrc> source generates an RGB test pattern useful for
detecting RGB vs BGR issues. You should see a red, green and blue
stripe from top to bottom.

The C<smptebars> source generates a color bars pattern, based on
the SMPTE Engineering Guideline EG 1-1990.

The C<testsrc> source generates a test video pattern, showing a
color pattern, a scrolling gradient and a timestamp. This is mainly
intended for testing purposes.

These sources accept an optional sequence of I<key>=I<value> pairs,
separated by ":". The description of the accepted options follows.


=over 4



=item B<color, c>

Specify the color of the source, only used in the C<color>
source. It can be the name of a color (case insensitive match) or a
0xRRGGBB[AA] sequence, possibly followed by an alpha specifier. The
default value is "black".


=item B<size, s>

Specify the size of the sourced video, it may be a string of the form
I<width>xI<height>, or the name of a size abbreviation. The
default value is "320x240".


=item B<rate, r>

Specify the frame rate of the sourced video, as the number of frames
generated per second. It has to be a string in the format
I<frame_rate_num>/I<frame_rate_den>, an integer number, a float
number or a valid video frame rate abbreviation. The default value is
"25".


=item B<sar>

Set the sample aspect ratio of the sourced video.


=item B<duration, d>

Set the video duration of the sourced video. The accepted syntax is:
	
	[-]HH[:MM[:SS[.m...]]]
	[-]S+[.m...]

See also the function C<av_parse_time()>.

If not specified, or the expressed duration is negative, the video is
supposed to be generated forever.


=item B<decimals, n>

Set the number of decimals to show in the timestamp, only used in the
C<testsrc> source.

The displayed timestamp value will correspond to the original
timestamp value multiplied by the power of 10 of the specified
value. Default value is 0.

=back


For example the following:
	
	testsrc=duration=5.3:size=qcif:rate=10


will generate a video with a duration of 5.3 seconds, with size
176x144 and a frame rate of 10 frames per second.

The following graph description will generate a red source
with an opacity of 0.2, with size "qcif" and a frame rate of 10
frames per second.
	
	color=c=red@0.2:s=qcif:r=10


If the input content is to be ignored, C<nullsrc> can be used. The
following command generates noise in the luminance plane by employing
the C<mp=geq> filter:
	
	nullsrc=s=256x256, mp=geq=random(1)*255:128:128



=head1 VIDEO SINKS


Below is a description of the currently available video sinks.


=head2 buffersink


Buffer video frames, and make them available to the end of the filter
graph.

This sink is mainly intended for a programmatic use, in particular
through the interface defined in F<libavfilter/buffersink.h>.

It does not require a string parameter in input, but you need to
specify a pointer to a list of supported pixel formats terminated by
-1 in the opaque parameter provided to C<avfilter_init_filter>
when initializing this sink.


=head2 nullsink


Null video sink, do absolutely nothing with the input video. It is
mainly useful as a template and to be employed in analysis / debugging
tools.


=head1 MULTIMEDIA FILTERS


Below is a description of the currently available multimedia filters.


=head2 asendcmd, sendcmd


Send commands to filters in the filtergraph.

These filters read commands to be sent to other filters in the
filtergraph.

C<asendcmd> must be inserted between two audio filters,
C<sendcmd> must be inserted between two video filters, but apart
from that they act the same way.

The specification of commands can be provided in the filter arguments
with the I<commands> option, or in a file specified by the
I<filename> option.

These filters accept the following options:

=over 4


=item B<commands, c>

Set the commands to be read and sent to the other filters.

=item B<filename, f>

Set the filename of the commands to be read and sent to the other
filters.

=back



=head3 Commands syntax


A commands description consists of a sequence of interval
specifications, comprising a list of commands to be executed when a
particular event related to that interval occurs. The occurring event
is typically the current frame time entering or leaving a given time
interval.

An interval is specified by the following syntax:
	
	<START>[-<END>] <COMMANDS>;


The time interval is specified by the I<START> and I<END> times.
I<END> is optional and defaults to the maximum time.

The current frame time is considered within the specified interval if
it is included in the interval [I<START>, I<END>), that is when
the time is greater or equal to I<START> and is lesser than
I<END>.

I<COMMANDS> consists of a sequence of one or more command
specifications, separated by ",", relating to that interval.  The
syntax of a command specification is given by:
	
	[<FLAGS>] <TARGET> <COMMAND> <ARG>


I<FLAGS> is optional and specifies the type of events relating to
the time interval which enable sending the specified command, and must
be a non-null sequence of identifier flags separated by "+" or "|" and
enclosed between "[" and "]".

The following flags are recognized:

=over 4


=item B<enter>

The command is sent when the current frame timestamp enters the
specified interval. In other words, the command is sent when the
previous frame timestamp was not in the given interval, and the
current is.


=item B<leave>

The command is sent when the current frame timestamp leaves the
specified interval. In other words, the command is sent when the
previous frame timestamp was in the given interval, and the
current is not.

=back


If I<FLAGS> is not specified, a default value of C<[enter]> is
assumed.

I<TARGET> specifies the target of the command, usually the name of
the filter class or a specific filter instance name.

I<COMMAND> specifies the name of the command for the target filter.

I<ARG> is optional and specifies the optional list of argument for
the given I<COMMAND>.

Between one interval specification and another, whitespaces, or
sequences of characters starting with C<#> until the end of line,
are ignored and can be used to annotate comments.

A simplified BNF description of the commands specification syntax
follows:
	
	<COMMAND_FLAG>  ::= "enter" | "leave"
	<COMMAND_FLAGS> ::= <COMMAND_FLAG> [(+|"|")<COMMAND_FLAG>]
	<COMMAND>       ::= ["[" <COMMAND_FLAGS> "]"] <TARGET> <COMMAND> [<ARG>]
	<COMMANDS>      ::= <COMMAND> [,<COMMANDS>]
	<INTERVAL>      ::= <START>[-<END>] <COMMANDS>
	<INTERVALS>     ::= <INTERVAL>[;<INTERVALS>]



=head3 Examples



=over 4


=item *

Specify audio tempo change at second 4:
	
	asendcmd=c='4.0 atempo tempo 1.5',atempo



=item *

Specify a list of drawtext and hue commands in a file.
	
	# show text in the interval 5-10
	5.0-10.0 [enter] drawtext reinit 'fontfile=FreeSerif.ttf:text=hello world',
	         [leave] drawtext reinit 'fontfile=FreeSerif.ttf:text=';
	
	# desaturate the image in the interval 15-20
	15.0-20.0 [enter] hue reinit s=0,
	          [enter] drawtext reinit 'fontfile=FreeSerif.ttf:text=nocolor',
	          [leave] hue reinit s=1,
	          [leave] drawtext reinit 'fontfile=FreeSerif.ttf:text=color';
	
	# apply an exponential saturation fade-out effect, starting from time 25
	25 [enter] hue s=exp(t-25)


A filtergraph allowing to read and process the above command list
stored in a file F<test.cmd>, can be specified with:
	
	sendcmd=f=test.cmd,drawtext=fontfile=FreeSerif.ttf:text='',hue


=back



=head2 asetpts, setpts


Change the PTS (presentation timestamp) of the input frames.

C<asetpts> works on audio frames, C<setpts> on video frames.

Accept in input an expression evaluated through the eval API, which
can contain the following constants:


=over 4


=item B<FRAME_RATE>

frame rate, only defined for constant frame-rate video


=item B<PTS>

the presentation timestamp in input


=item B<N>

the count of the input frame, starting from 0.


=item B<NB_CONSUMED_SAMPLES>

the number of consumed samples, not including the current frame (only
audio)


=item B<NB_SAMPLES>

the number of samples in the current frame (only audio)


=item B<SAMPLE_RATE>

audio sample rate


=item B<STARTPTS>

the PTS of the first frame


=item B<STARTT>

the time in seconds of the first frame


=item B<INTERLACED>

tell if the current frame is interlaced


=item B<T>

the time in seconds of the current frame


=item B<TB>

the time base


=item B<POS>

original position in the file of the frame, or undefined if undefined
for the current frame


=item B<PREV_INPTS>

previous input PTS


=item B<PREV_INT>

previous input time in seconds


=item B<PREV_OUTPTS>

previous output PTS


=item B<PREV_OUTT>

previous output time in seconds

=back



=head3 Examples



=over 4


=item *

Start counting PTS from zero
	
	setpts=PTS-STARTPTS



=item *

Apply fast motion effect:
	
	setpts=0.5*PTS



=item *

Apply slow motion effect:
	
	setpts=2.0*PTS



=item *

Set fixed rate of 25 frames per second:
	
	setpts=N/(25*TB)



=item *

Set fixed rate 25 fps with some jitter:
	
	setpts='1/(25*TB) * (N + 0.05 * sin(N*2*PI/25))'



=item *

Apply an offset of 10 seconds to the input PTS:
	
	setpts=PTS+10/TB


=back



=head2 ebur128


EBU R128 scanner filter. This filter takes an audio stream as input and outputs
it unchanged. By default, it logs a message at a frequency of 10Hz with the
Momentary loudness (identified by C<M>), Short-term loudness (C<S>),
Integrated loudness (C<I>) and Loudness Range (C<LRA>).

The filter also has a video output (see the I<video> option) with a real
time graph to observe the loudness evolution. The graphic contains the logged
message mentioned above, so it is not printed anymore when this option is set,
unless the verbose logging is set. The main graphing area contains the
short-term loudness (3 seconds of analysis), and the gauge on the right is for
the momentary loudness (400 milliseconds).

More information about the Loudness Recommendation EBU R128 on
E<lt>B<http://tech.ebu.ch/loudness>E<gt>.

The filter accepts the following named parameters:


=over 4



=item B<video>

Activate the video output. The audio stream is passed unchanged whether this
option is set or no. The video stream will be the first output stream if
activated. Default is C<0>.


=item B<size>

Set the video size. This option is for video only. Default and minimum
resolution is C<640x480>.


=item B<meter>

Set the EBU scale meter. Default is C<9>. Common values are C<9> and
C<18>, respectively for EBU scale meter +9 and EBU scale meter +18. Any
other integer value between this range is allowed.


=back


Example of real-time graph using B<ffplay>, with a EBU scale meter +18:
	
	ffplay -f lavfi -i "amovie=input.mp3,ebur128=video=1:meter=18 [out0][out1]"


Run an analysis with B<ffmpeg>:
	
	ffmpeg -nostats -i input.mp3 -filter_complex ebur128 -f null -



=head2 settb, asettb


Set the timebase to use for the output frames timestamps.
It is mainly useful for testing timebase configuration.

It accepts in input an arithmetic expression representing a rational.
The expression can contain the constants "AVTB" (the
default timebase), "intb" (the input timebase) and "sr" (the sample rate,
audio only).

The default value for the input is "intb".


=head3 Examples



=over 4


=item *

Set the timebase to 1/25:
	
	settb=1/25



=item *

Set the timebase to 1/10:
	
	settb=0.1



=item *

Set the timebase to 1001/1000:
	
	settb=1+0.001



=item *

Set the timebase to 2*intb:
	
	settb=2*intb



=item *

Set the default timebase value:
	
	settb=AVTB


=back



=head2 concat


Concatenate audio and video streams, joining them together one after the
other.

The filter works on segments of synchronized video and audio streams. All
segments must have the same number of streams of each type, and that will
also be the number of streams at output.

The filter accepts the following named parameters:

=over 4



=item B<n>

Set the number of segments. Default is 2.


=item B<v>

Set the number of output video streams, that is also the number of video
streams in each segment. Default is 1.


=item B<a>

Set the number of output audio streams, that is also the number of video
streams in each segment. Default is 0.


=back


The filter has I<v>+I<a> outputs: first I<v> video outputs, then
I<a> audio outputs.

There are I<n>×(I<v>+I<a>) inputs: first the inputs for the first
segment, in the same order as the outputs, then the inputs for the second
segment, etc.

Related streams do not always have exactly the same duration, for various
reasons including codec frame size or sloppy authoring. For that reason,
related synchronized streams (e.g. a video and its audio track) should be
concatenated at once. The concat filter will use the duration of the longest
stream in each segment (except the last one), and if necessary pad shorter
audio streams with silence.

For this filter to work correctly, all segments must start at timestamp 0.

All corresponding streams must have the same parameters in all segments; the
filtering system will automatically select a common pixel format for video
streams, and a common sample format, sample rate and channel layout for
audio streams, but other settings, such as resolution, must be converted
explicitly by the user.

Different frame rates are acceptable but will result in variable frame rate
at output; be sure to configure the output file to handle it.

Examples:

=over 4


=item *

Concatenate an opening, an episode and an ending, all in bilingual version
(video in stream 0, audio in streams 1 and 2):
	
	ffmpeg -i opening.mkv -i episode.mkv -i ending.mkv -filter_complex \
	  '[0:0] [0:1] [0:2] [1:0] [1:1] [1:2] [2:0] [2:1] [2:2]
	   concat=n=3:v=1:a=2 [v] [a1] [a2]' \
	  -map '[v]' -map '[a1]' -map '[a2]' output.mkv



=item *

Concatenate two parts, handling audio and video separately, using the
(a)movie sources, and adjusting the resolution:
	
	movie=part1.mp4, scale=512:288 [v1] ; amovie=part1.mp4 [a1] ;
	movie=part2.mp4, scale=512:288 [v2] ; amovie=part2.mp4 [a2] ;
	[v1] [v2] concat [outv] ; [a1] [a2] concat=v=0:a=1 [outa]

Note that a desync will happen at the stitch if the audio and video streams
do not have exactly the same duration in the first file.


=back



=head2 showspectrum


Convert input audio to a video output, representing the audio frequency
spectrum.

The filter accepts the following named parameters:

=over 4


=item B<size, s>

Specify the video size for the output. Default value is C<640x480>.

=back


The usage is very similar to the showwaves filter; see the examples in that
section.


=head2 showwaves


Convert input audio to a video output, representing the samples waves.

The filter accepts the following named parameters:

=over 4



=item B<n>

Set the number of samples which are printed on the same column. A
larger value will decrease the frame rate. Must be a positive
integer. This option can be set only if the value for I<rate>
is not explicitly specified.


=item B<rate, r>

Set the (approximate) output frame rate. This is done by setting the
option I<n>. Default value is "25".


=item B<size, s>

Specify the video size for the output. Default value is "600x240".

=back


Some examples follow.

=over 4


=item *

Output the input file audio and the corresponding video representation
at the same time:
	
	amovie=a.mp3,asplit[out0],showwaves[out1]



=item *

Create a synthetic signal and show it with showwaves, forcing a
framerate of 30 frames per second:
	
	aevalsrc=sin(1*2*PI*t)*sin(880*2*PI*t):cos(2*PI*200*t),asplit[out0],showwaves=r=30[out1]


=back



=head1 MULTIMEDIA SOURCES


Below is a description of the currently available multimedia sources.


=head2 amovie


This is the same as src_movie source, except it selects an audio
stream by default.



=head2 movie


Read audio and/or video stream(s) from a movie container.

It accepts the syntax: I<movie_name>[:I<options>] where
I<movie_name> is the name of the resource to read (not necessarily
a file but also a device or a stream accessed through some protocol),
and I<options> is an optional sequence of I<key>=I<value>
pairs, separated by ":".

The description of the accepted options follows.


=over 4



=item B<format_name, f>

Specifies the format assumed for the movie to read, and can be either
the name of a container or an input device. If not specified the
format is guessed from I<movie_name> or by probing.


=item B<seek_point, sp>

Specifies the seek point in seconds, the frames will be output
starting from this seek point, the parameter is evaluated with
C<av_strtod> so the numerical value may be suffixed by an IS
postfix. Default value is "0".


=item B<streams, s>

Specifies the streams to read. Several streams can be specified, separated
by "+". The source will then have as many outputs, in the same order. The
syntax is explained in the Stream specifiers chapter. Two special
names, "dv" and "da" specify respectively the default (best suited) video
and audio stream. Default is "dv", or "da" if the filter is called as
"amovie".


=item B<stream_index, si>

Specifies the index of the video stream to read. If the value is -1,
the best suited video stream will be automatically selected. Default
value is "-1". Deprecated. If the filter is called "amovie", it will select
audio instead of video.


=item B<loop>

Specifies how many times to read the stream in sequence.
If the value is less than 1, the stream will be read again and again.
Default value is "1".

Note that when the movie is looped the source timestamps are not
changed, so it will generate non monotonically increasing timestamps.

=back


This filter allows to overlay a second video on top of main input of
a filtergraph as shown in this graph:
	
	input -----------> deltapts0 --> overlay --> output
	                                    ^
	                                    |
	movie --> scale--> deltapts1 -------+


Some examples follow.


=over 4


=item *

Skip 3.2 seconds from the start of the avi file in.avi, and overlay it
on top of the input labelled as "in":
	
	movie=in.avi:seek_point=3.2, scale=180:-1, setpts=PTS-STARTPTS [movie];
	[in] setpts=PTS-STARTPTS, [movie] overlay=16:16 [out]



=item *

Read from a video4linux2 device, and overlay it on top of the input
labelled as "in":
	
	movie=/dev/video0:f=video4linux2, scale=180:-1, setpts=PTS-STARTPTS [movie];
	[in] setpts=PTS-STARTPTS, [movie] overlay=16:16 [out]



=item *

Read the first video stream and the audio stream with id 0x81 from
dvd.vob; the video is connected to the pad named "video" and the audio is
connected to the pad named "audio":
	
	movie=dvd.vob:s=v:0+#0x81 [video] [audio]


=back



=head1 METADATA


FFmpeg is able to dump metadata from media files into a simple UTF-8-encoded
INI-like text file and then load it back using the metadata muxer/demuxer.

The file format is as follows:

=over 4



=item 1.

A file consists of a header and a number of metadata tags divided into sections,
each on its own line.


=item 2.

The header is a ';FFMETADATA' string, followed by a version number (now 1).


=item 3.

Metadata tags are of the form 'key=value'


=item 4.

Immediately after header follows global metadata


=item 5.

After global metadata there may be sections with per-stream/per-chapter
metadata.


=item 6.

A section starts with the section name in uppercase (i.e. STREAM or CHAPTER) in
brackets ('[', ']') and ends with next section or end of file.


=item 7.

At the beginning of a chapter section there may be an optional timebase to be
used for start/end values. It must be in form 'TIMEBASE=num/den', where num and
den are integers. If the timebase is missing then start/end times are assumed to
be in milliseconds.
Next a chapter section must contain chapter start and end times in form
'START=num', 'END=num', where num is a positive integer.


=item 8.

Empty lines and lines starting with ';' or '#' are ignored.


=item 9.

Metadata keys or values containing special characters ('=', ';', '#', '\' and a
newline) must be escaped with a backslash '\'.


=item 10.

Note that whitespace in metadata (e.g. foo = bar) is considered to be a part of
the tag (in the example above key is 'foo ', value is ' bar').

=back


A ffmetadata file might look like this:
	
	;FFMETADATA1
	title=bike\\shed
	;this is a comment
	artist=FFmpeg troll team
	
	[CHAPTER]
	TIMEBASE=1/1000
	START=0
	#chapter ends at 0:01:00
	END=60000
	title=chapter \#1
	[STREAM]
	title=multi\
	line


=head1 SEE ALSO

ffplay(1), ffprobe(1), ffserver(1) and the FFmpeg HTML documentation

=head1 AUTHORS

See git history

